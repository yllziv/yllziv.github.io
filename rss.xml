<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ziv小站</title>
  <subtitle>杨龙龙的个人博客</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="http://yanglonglong.com/"/>
  <updated>2017-07-30T02:33:15.000Z</updated>
  <id>http://yanglonglong.com/</id>
  
  <author>
    <name>杨龙龙</name>
    <email>me@yanglonglong.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS常用居中方式总结</title>
    <link href="http://yanglonglong.com/blog/2017-07-29-CSS%E5%B8%B8%E7%94%A8%E5%B1%85%E4%B8%AD%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93.html"/>
    <id>http://yanglonglong.com/blog/2017-07-29-CSS常用居中方式总结.html</id>
    <published>2017-07-29T15:12:27.000Z</published>
    <updated>2017-07-30T02:33:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h2 id="水平居中-text-align"><a href="#水平居中-text-align" class="headerlink" title="水平居中:text-align"></a>水平居中:text-align</h2><p>行内元素包括：a／img／button，以及 display 为 inline / inline-block 的元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">display: inline-block;</div><div class="line">text-align:center;</div></pre></td></tr></table></figure></p>
<p>若需要垂直居中，使用line-height = 元素高度，或者给父元素添加padding／margin。</p>
<h2 id="margin-auto居中"><a href="#margin-auto居中" class="headerlink" title="margin: auto居中"></a>margin: auto居中</h2><p>满足条件：宽度固定 + 块级元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">width:200px;</div><div class="line">margin:0 auto;</div></pre></td></tr></table></figure></p>
<p>若需要垂直居中，则给父元素添加padding／margin。</p>
<h2 id="table-居中"><a href="#table-居中" class="headerlink" title="table 居中"></a>table 居中</h2><p>table 水平居中：<br>需要居中的元素设置 :<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap-center</span> &#123;</div><div class="line">  <span class="attribute">display</span>:table;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原理：table是长度自适应性的（table其长度根据其内文本长度决定，因此可以看做一个定宽度块元素）。</p>
<p>table 垂直居中：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span>&#123;</div><div class="line">  <span class="attribute">display</span>:table-cell;</div><div class="line">  <span class="attribute">vertical-align</span>:middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>table 垂直+水平居中：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span>&#123;</div><div class="line">  <span class="attribute">display</span>: table;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrap-center</span>&#123;</div><div class="line">  <span class="attribute">display</span>: table-cell;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="absolute-居中"><a href="#absolute-居中" class="headerlink" title="absolute 居中"></a>absolute 居中</h2><p>知道居中元素的宽高：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span>&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrap-center</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap-center"</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>不知道居中元素宽高，使用 translate 居中：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span>&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrap-center</span>&#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="flex-居中"><a href="#flex-居中" class="headerlink" title="flex 居中"></a>flex 居中</h2><p>作用于父元素，可以垂直 + 水平居中<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-flow</span>: row nowrap;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="float-水平居中"><a href="#float-水平居中" class="headerlink" title="float 水平居中"></a>float 水平居中</h2><p>不推荐，需要添加多余元素。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span>&#123;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">    <span class="attribute">clear</span>:both;</div><div class="line">    <span class="attribute">visibility</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrap-center</span>&#123; </div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2017-07-29-CSS常用居中方式总结.html">CSS常用居中方式总结</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;h2 id=&quot;水平居中-text-align&quot;&gt;&lt;a href=&quot;#水平居中-text-align&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="web" scheme="http://yanglonglong.com/categories/web/"/>
    
    
      <category term="CSS" scheme="http://yanglonglong.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JS中高度宽度位置的获取</title>
    <link href="http://yanglonglong.com/blog/2017-07-29-JS%E4%B8%AD%E9%AB%98%E5%BA%A6%E5%AE%BD%E5%BA%A6%E4%BD%8D%E7%BD%AE%E7%9A%84%E8%8E%B7%E5%8F%96.html"/>
    <id>http://yanglonglong.com/blog/2017-07-29-JS中高度宽度位置的获取.html</id>
    <published>2017-07-29T13:02:15.000Z</published>
    <updated>2017-07-30T02:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>经常需要在 js 中获取各种高度宽度位置，在这里统一整理一下。</p>
<h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><h3 id="浏览器显示的页面大小（浏览器大小-浏览器面板大小）"><a href="#浏览器显示的页面大小（浏览器大小-浏览器面板大小）" class="headerlink" title="浏览器显示的页面大小（浏览器大小 - 浏览器面板大小）"></a>浏览器显示的页面大小（浏览器大小 - 浏览器面板大小）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">window.innerWidth</div><div class="line">window.innerHeight</div></pre></td></tr></table></figure>
<h3 id="浏览器大小"><a href="#浏览器大小" class="headerlink" title="浏览器大小"></a>浏览器大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">window.outerWidth</div><div class="line">window.outerHeight</div></pre></td></tr></table></figure>
<h3 id="浏览器当前视窗显示的页面-和-整个html页面-边界的距离"><a href="#浏览器当前视窗显示的页面-和-整个html页面-边界的距离" class="headerlink" title="浏览器当前视窗显示的页面 和 整个html页面 边界的距离"></a>浏览器当前视窗显示的页面 和 整个html页面 边界的距离</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">window.pageXOffset</div><div class="line">window.pageYOffset</div></pre></td></tr></table></figure>
<h3 id="浏览器-相对-显示器-的距离"><a href="#浏览器-相对-显示器-的距离" class="headerlink" title="浏览器 相对 显示器 的距离"></a>浏览器 相对 显示器 的距离</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">window.screenX</div><div class="line">window.screenY</div></pre></td></tr></table></figure>
<h3 id="显示器的大小"><a href="#显示器的大小" class="headerlink" title="显示器的大小"></a>显示器的大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">window.screen.availWidth // 当前浏览器宽度</div><div class="line">window.screen.availHeight</div><div class="line">window.screen.width // 显示器真实宽度</div><div class="line">window.screen.height</div></pre></td></tr></table></figure>
<h2 id="元素的宽-高度-位置"><a href="#元素的宽-高度-位置" class="headerlink" title="元素的宽/高度/位置"></a>元素的宽/高度/位置</h2><p>获取整个页面的，可以设置元素为window／window.body</p>
<h3 id="相对父元素（offsetParent）的位置"><a href="#相对父元素（offsetParent）的位置" class="headerlink" title="相对父元素（offsetParent）的位置"></a>相对父元素（offsetParent）的位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">e.offsetTop</div><div class="line">e.offsetLeft</div></pre></td></tr></table></figure>
<h3 id="元素的宽-高度"><a href="#元素的宽-高度" class="headerlink" title="元素的宽/高度"></a>元素的宽/高度</h3><p>width+padding+border，不含margin和滚动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">e.offsetWidth</div><div class="line">e.offsetHeight</div></pre></td></tr></table></figure></p>
<h3 id="元素的宽-高度-1"><a href="#元素的宽-高度-1" class="headerlink" title="元素的宽/高度"></a>元素的宽/高度</h3><p>width+padding，不包括border,margin和滚动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">e.clientWidth</div><div class="line">e.clientHeight</div></pre></td></tr></table></figure></p>
<h3 id="元素的实际大小"><a href="#元素的实际大小" class="headerlink" title="元素的实际大小"></a>元素的实际大小</h3><p>width+padding+滚动，不包括border和margin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">e.scrollWidth</div><div class="line">e.scrollHeight</div></pre></td></tr></table></figure></p>
<h3 id="元素可见部分-和-元素边界-的距离"><a href="#元素可见部分-和-元素边界-的距离" class="headerlink" title="元素可见部分 和 元素边界 的距离"></a>元素可见部分 和 元素边界 的距离</h3><p>scrollTop = scrollHeight - clientHeight<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">e.scrollTop // 赋值，相当于移动滚动条了</div><div class="line">e.scrollLeft</div></pre></td></tr></table></figure></p>
<h3 id="border-top和border-left的大小"><a href="#border-top和border-left的大小" class="headerlink" title="border-top和border-left的大小"></a>border-top和border-left的大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">e.clientTop // border 宽度</div><div class="line">e.clientLeft</div></pre></td></tr></table></figure>
<h2 id="鼠标点击的位置"><a href="#鼠标点击的位置" class="headerlink" title="鼠标点击的位置"></a>鼠标点击的位置</h2><h3 id="相对整个html"><a href="#相对整个html" class="headerlink" title="相对整个html"></a>相对整个html</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">event.pageX</div><div class="line">event.pageY</div></pre></td></tr></table></figure>
<h3 id="相对浏览器窗口"><a href="#相对浏览器窗口" class="headerlink" title="相对浏览器窗口"></a>相对浏览器窗口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">event.clientX</div><div class="line">event.clientY</div></pre></td></tr></table></figure>
<h3 id="相对显示器"><a href="#相对显示器" class="headerlink" title="相对显示器"></a>相对显示器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">event.screenX</div><div class="line">event.screenY</div></pre></td></tr></table></figure>
<h3 id="相对元素本身"><a href="#相对元素本身" class="headerlink" title="相对元素本身"></a>相对元素本身</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">event.offsetX</div><div class="line">event.offsetY</div></pre></td></tr></table></figure>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2017-07-29-JS中高度宽度位置的获取.html">JS中高度宽度位置的获取</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;经常需要在 js 中获取各种高度宽度位置，在这里统一整理一下。&lt;/p&gt;
&lt;h2 id=&quot;window&quot;&gt;&lt;a href=&quot;#window&quot; 
    
    </summary>
    
      <category term="web" scheme="http://yanglonglong.com/categories/web/"/>
    
    
      <category term="JavaScript" scheme="http://yanglonglong.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Git 使用两年后的一个总结</title>
    <link href="http://yanglonglong.com/blog/2016-07-21-Git-%E4%BD%BF%E7%94%A8%E4%B8%A4%E5%B9%B4%E5%90%8E%E7%9A%84%E4%B8%80%E4%B8%AA%E6%80%BB%E7%BB%93.html"/>
    <id>http://yanglonglong.com/blog/2016-07-21-Git-使用两年后的一个总结.html</id>
    <published>2016-07-21T13:35:10.000Z</published>
    <updated>2016-07-23T12:57:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>从大四下学期开始使用 Github，已经使用两年了，对 Git 和 Linux 也有了更深入的了解。于是写一篇博文总结一下自己对 Git 使用上的一些技巧，一来方便自己日后查阅，二来要是有人能够看到从而有所收获，也是欣慰。</p>
<h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>直接上命令行，功能强大，对了解 Git 原理很有帮助。</p>
<h3 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a>SourceTree</h3><p>这个客户端在公司里有很多人用，应该比较好吧，我没用过，不做评价。</p>
<h3 id="tig"><a href="#tig" class="headerlink" title="tig"></a>tig</h3><p>查看 Git log 的工具，很强大<br>安装：brew install tig</p>
<h3 id="gitk"><a href="#gitk" class="headerlink" title="gitk"></a>gitk</h3><p>上半个窗口显示的是历次提交的分支祖先图谱，下半个窗口显示当前点选的提交对应的具体差异。<br>安装： brew install git / brew doctor (保证/usr/local/bin下的命令可用)</p>
<h2 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h2><ul>
<li>工作区：当前用户编辑的目录</li>
<li>暂存区：工作区到版本库的过渡空间</li>
<li>版本库：.git 里面保存着每一次提交后的版本</li>
</ul>
<h2 id="常规命令"><a href="#常规命令" class="headerlink" title="常规命令"></a>常规命令</h2><ul>
<li>git clone <a href="https://github.com/yllziv/zivim" target="_blank" rel="external">https://github.com/yllziv/zivim</a> // 将远程库下载到本地</li>
<li>git init  // 初始化一个 Git 仓库</li>
<li>git add . // 将工作区内容添加到暂存区（使用 -A 也可以）</li>
<li>git status // 查看状态</li>
<li>git commit -m ‘comment’  // 将暂存区的内容提交到版本库</li>
<li>git remote add origin <a href="https://github.com/yllziv/zivim" target="_blank" rel="external">https://github.com/yllziv/zivim</a> // 与远程库建立关联</li>
<li>git push origin branchName   // 将本地版本库内容提交到远程分支，第一次需要加 -u</li>
<li>git pull origin branchName   // 将远程分支拉到本地后通过git merge合并</li>
<li>git pull –rebase branchName // 将远程分支拉到本地后通过git rebase合并</li>
<li>git log –pretty=oneline –pragh // 查看日志</li>
<li>git checkout -b branchName   // 从当前版本库创建一个分支，并切换到该分支</li>
<li>git branch  // 查看所有分支</li>
<li>git branch -D branchName // 删除分支</li>
<li>git reset –hard HEAD  // 丢弃工作区和暂存区的所有更改</li>
<li>git checkout – fileName // 丢弃工作区的文件更改</li>
<li>git stash // 将当前分支的内容暂存起来，等价 git stash push</li>
<li>git stash list // 列出当前分支缓存的内容</li>
<li>git stash pop // 拿出当前分支缓存的内容</li>
<li>git fectch origin branchName // 将远程分支拉到本地</li>
<li>git merger branchName // 将分支合并到本地</li>
<li>git rebase branchName // 合并分支到本地</li>
<li>git diff HEAD // 将工作区与当前版本库对比</li>
</ul>
<h2 id="不常用命令"><a href="#不常用命令" class="headerlink" title="不常用命令"></a>不常用命令</h2><ul>
<li>git tag ‘v1.0’ // 打标签</li>
<li>git tag -d ‘v1.0’ // 删除标签</li>
<li>git branch -a // 查看所有分支（包括远程分支）</li>
<li>git branch -r // 只查看远程分支</li>
<li>git rm fileName // 从 Git 中删除文件</li>
<li>git mv oldName newName // 文件改名</li>
<li>git commit -am “init” 提交并且加注释</li>
<li>git config –list // 查看用户信息</li>
<li>git grep ‘something’ // 文件内容搜索</li>
<li>git reflog // 分支等引用变更记录管理</li>
<li>git show-branch // 显示分支列表及拓扑关系</li>
<li>git count-objects // 显示松散对象的数量和磁盘占用</li>
<li>git filter-branch // 版本库重构<br>－ git fsck // 对象库完整性检查</li>
<li>git blame fileName // 列出文件内容，左侧是对应每行的提交纪录</li>
<li>git gc // 对仓库进行重新打包以节省空间（会定时运行）</li>
<li>git revert // 还原一个版本的修改</li>
</ul>
<p>注意：<br>git pull 相当于：git fetch + git merge<br>git mv 相当于：mv /git rm / git add</p>
<h2 id="自己常用的自定义配置"><a href="#自己常用的自定义配置" class="headerlink" title="自己常用的自定义配置"></a>自己常用的自定义配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span></div><div class="line">git lg</div></pre></td></tr></table></figure>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="git-merge-与-git-rebase-区别"><a href="#git-merge-与-git-rebase-区别" class="headerlink" title="git merge 与 git rebase 区别"></a>git merge 与 git rebase 区别</h3><p>假设当前 Git 是下面情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- o - o - o - H - A - B - C (master)</div><div class="line">               \</div><div class="line">                P - Q - R (mybranch)</div></pre></td></tr></table></figure></p>
<p>若此时在 master 分支中执行：git merge mybranch，这时会提醒需要commit（X）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- o - o - o - H - A - B - C - X (master)</div><div class="line">               \             /</div><div class="line">                P - Q - R --- (mybranch)</div></pre></td></tr></table></figure></p>
<p>若此时在 master 分支中执行：git rebase mybranch，这个不会提醒commit。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- o - o - o - H - P - Q - R - A<span class="string">' - B'</span> - C<span class="string">' (master)</span></div><div class="line">                          |</div><div class="line">                          (mybranch)</div></pre></td></tr></table></figure></p>
<h3 id="什么时候使用-git-merge-或者-git-rebase-？"><a href="#什么时候使用-git-merge-或者-git-rebase-？" class="headerlink" title="什么时候使用 git merge 或者 git rebase ？"></a>什么时候使用 git merge 或者 git rebase ？</h3><p>Merge 将另一个分支所有变化，通过一次 commit 合并到当前分支中。<br>Rebase 将只是将另一个分支移动到当前分支的一个入口处。</p>
<p>如果创建一个分支是为了开发一个单独的功能，当你想把这些改变带到 master 中的时候，你可以需要使用 Merge。<br>如果你在一个分支上做了一些开发，而主分支上其他人做了一些无关紧要的改变，你只需要 git pull –rebase origin master 中的改变的分支即可。</p>
<h3 id="git-revert-和-git-reset的区别"><a href="#git-revert-和-git-reset的区别" class="headerlink" title="git revert 和 git reset的区别"></a>git revert 和 git reset的区别</h3><p>git reset 是直接删除指定的commit，把HEAD向后移动了一下，<br>git revert 用一次新的commit来回滚之前的commit。HEAD是继续前进的，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://stackoverflow.com/questions/3357122/git-pull-vs-git-fetch-git-rebase" target="_blank" rel="external">git pull VS git fetch git rebase</a></li>
<li><a href="http://stackoverflow.com/questions/804115/when-do-you-use-git-rebase-instead-of-git-merge" target="_blank" rel="external">When do you use git rebase instead of git merge?</a></li>
</ul>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://www.yanglonglong.com/blog/2016-07-21-Git-%E4%BD%BF%E7%94%A8%E4%B8%A4%E5%B9%B4%E5%90%8E%E7%9A%84%E4%B8%80%E4%B8%AA%E6%80%BB%E7%BB%93.html" target="_blank" rel="external">Git 使用两年后的一个总结</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;从大四下学期开始使用 Github，已经使用两年了，对 Git 和 Linux 也有了更深入的了解。于是写一篇博文总结一下自己对 Git 使
    
    </summary>
    
      <category term="tool" scheme="http://yanglonglong.com/categories/tool/"/>
    
    
      <category term="Git" scheme="http://yanglonglong.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>开发 Chrome 插件和应用</title>
    <link href="http://yanglonglong.com/blog/2016-07-05-%E5%BC%80%E5%8F%91-Chrome-%E6%8F%92%E4%BB%B6%E5%92%8C%E5%BA%94%E7%94%A8.html"/>
    <id>http://yanglonglong.com/blog/2016-07-05-开发-Chrome-插件和应用.html</id>
    <published>2016-07-05T12:23:27.000Z</published>
    <updated>2016-07-24T07:14:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="chrome应用和扩展的区别"><a href="#chrome应用和扩展的区别" class="headerlink" title="chrome应用和扩展的区别"></a>chrome应用和扩展的区别</h3><p>Chrome扩展主要用于对浏览器功能的增强，它更强调与浏览器相结合。比如Chrome扩展可以在浏览器的工具栏和地址栏中显示图标，它可以更改用户当前浏览的网页中的内容，也可以更改浏览器代理服务器的设置等等。</p>
<p>Chrome应用更强调是独立的程序，你可以不打开Chrome浏览器而运行这些程序。同时这些程序可以调用更加底层的系统接口，比如串口、USB、本地文件读写等等。同时Chrome应用可以拥有样式更加自由的独立窗口，而Chrome扩展的界面只能限定在浏览器窗口中。</p>
<h3 id="chrome扩展被安装后的操作"><a href="#chrome扩展被安装后的操作" class="headerlink" title="chrome扩展被安装后的操作"></a>chrome扩展被安装后的操作</h3><p>Chrome扩展是一系列文件的集合，这些文件包括HTML文件、CSS样式文件、JavaScript脚本文件、图片等静态文件以及manifest.json。个别扩展还会包含二进制文件，如DLL动态库和so动态库等。</p>
<p>扩展被安装后，Chrome就会读取扩展中的manifest.json文件，其内容是按照一定格式描述的扩展相关信息，如扩展名称、版本、更新地址、请求的权限、扩展的UI界面入口等等。这样Chrome就可以知道在浏览器中如何呈现这个扩展，以及这个扩展如何同用户进行交互。</p>
<h3 id="扩展位置："><a href="#扩展位置：" class="headerlink" title="扩展位置："></a>扩展位置：</h3><p>Chrome扩展的启动入口：浏览器的工具栏、地址栏中、后台默默运行。</p>
<h2 id="第一个chrome扩展"><a href="#第一个chrome扩展" class="headerlink" title="第一个chrome扩展"></a>第一个chrome扩展</h2><h3 id="首先新建mainfest-json文件："><a href="#首先新建mainfest-json文件：" class="headerlink" title="首先新建mainfest.json文件："></a>首先新建mainfest.json文件：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "manifest_version": 2,</div><div class="line">    "name": "我的时钟",  </div><div class="line">    "version": "1.0", // 扩展详细信息里显示</div><div class="line">    "description": "我的第一个Chrome扩展",  // 在扩展的详细信息里显示</div><div class="line">    "icons": &#123;</div><div class="line">        "16": "images/icon16.png",</div><div class="line">        "48": "images/icon48.png",</div><div class="line">        "128": "images/icon128.png"</div><div class="line">    &#125;,</div><div class="line">    "browser_action": &#123;</div><div class="line">        "default_icon": &#123;</div><div class="line">            "19": "images/icon19.png",</div><div class="line">            "38": "images/icon38.png"</div><div class="line">        &#125;,</div><div class="line">        "default_title": "我的时钟", // 鼠标移动到扩展上显示</div><div class="line">        "default_popup": "popup.html"</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>目前来说manifest_version属性值只能为数字2。</li>
<li>对于应用，mainfest.json还必须包含app属性。</li>
<li>不同地方用不同的尺寸，比如浏览器工具栏里用19像素的，视网膜屏幕用38像素的，扩展程序管理列表里用的48像素的，安装时的弹窗用的128像素的，网页窗口中的图标用的16像素的。</li>
</ul>
<h3 id="编写popup-html"><a href="#编写popup-html" class="headerlink" title="编写popup.html"></a>编写popup.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">* &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;&#125;</div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;&#125;</div><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">42px</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"clock_div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/my_clock.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="编写my-clock-js文件"><a href="#编写my-clock-js文件" class="headerlink" title="编写my_clock.js文件"></a>编写my_clock.js文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_clock</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> today=<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">  <span class="keyword">var</span> h=today.getHours();</div><div class="line">  <span class="keyword">var</span> m=today.getMinutes();</div><div class="line">  <span class="keyword">var</span> s=today.getSeconds();</div><div class="line">  m=m&gt;=<span class="number">10</span>?m:(<span class="string">'0'</span>+m);</div><div class="line">  s=s&gt;=<span class="number">10</span>?s:(<span class="string">'0'</span>+s);</div><div class="line">  el.innerHTML = h+<span class="string">":"</span>+m+<span class="string">":"</span>+s;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;my_clock(el)&#125;, <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> clock_div = <span class="built_in">document</span>.getElementById(<span class="string">'clock_div'</span>);</div><div class="line">my_clock(clock_div);</div></pre></td></tr></table></figure>
<h3 id="新建images文件夹："><a href="#新建images文件夹：" class="headerlink" title="新建images文件夹："></a>新建images文件夹：</h3><h3 id="加载chrome扩展"><a href="#加载chrome扩展" class="headerlink" title="加载chrome扩展"></a>加载chrome扩展</h3><p>依次点击“”-“工具”-“扩展程序”打开扩展程序页面，勾选右上角的“开发者模式”，点击“加载正在开发的扩展程序”，选择扩展所在的文件夹，就可以在浏览器工具栏中看到我们的扩展了。</p>
<h3 id="manifest-json模板"><a href="#manifest-json模板" class="headerlink" title="manifest.json模板"></a>manifest.json模板</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "app": &#123;</div><div class="line">        "background": &#123;</div><div class="line">            "scripts": ["background.js"]</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    "manifest_version": 2,</div><div class="line">    "name": "My Extension",</div><div class="line">    "version": "versionString",</div><div class="line">    "default_locale": "en",</div><div class="line">    "description": "A plain text description",</div><div class="line">    "icons": &#123;</div><div class="line">        "16": "images/icon16.png",</div><div class="line">        "48": "images/icon48.png",</div><div class="line">        "128": "images/icon128.png"</div><div class="line">    &#125;,</div><div class="line">    "browser_action": &#123;</div><div class="line">        "default_icon": &#123;</div><div class="line">            "19": "images/icon19.png",</div><div class="line">            "38": "images/icon38.png"</div><div class="line">        &#125;,</div><div class="line">        "default_title": "Extension Title",</div><div class="line">        "default_popup": "popup.html"</div><div class="line">    &#125;,</div><div class="line">    "page_action": &#123;</div><div class="line">        "default_icon": &#123;</div><div class="line">            "19": "images/icon19.png",</div><div class="line">            "38": "images/icon38.png"</div><div class="line">        &#125;,</div><div class="line">        "default_title": "Extension Title",</div><div class="line">        "default_popup": "popup.html"</div><div class="line">    &#125;,</div><div class="line">    "background": &#123;</div><div class="line">        "scripts": ["background.js"]</div><div class="line">    &#125;,</div><div class="line">    "content_scripts": [ // 指定注入脚本，当用户访问页面后相应脚本自动运行，从而对页面DOM进行操作。</div><div class="line">        &#123;</div><div class="line">            "matches": ["*://www.google.com/"], // 定义了哪些页面会被注入脚本</div><div class="line">            "css": ["mystyles.css"], // 要注入的样式表和JavaScript</div><div class="line">            "js": ["jquery.js", "myscript.js"]</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    "options_page": "options.html", // 选项页面</div><div class="line">    "permissions": [</div><div class="line">        "*://www.google.com/*"</div><div class="line">    ],</div><div class="line">    "web_accessible_resources": [ // 列出需要引入的资源</div><div class="line">        "images/*.png"</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Chrome扩展基础"><a href="#Chrome扩展基础" class="headerlink" title="Chrome扩展基础"></a>Chrome扩展基础</h2><h3 id="永远点不到百度一下"><a href="#永远点不到百度一下" class="headerlink" title="永远点不到百度一下"></a>永远点不到百度一下</h3><p>创建Manifest文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"永远点不到的搜索按钮"</span>,</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"1.0"</span>,</div><div class="line">    <span class="attr">"description"</span>: <span class="string">"让你永远也点击不到Google的搜索按钮"</span>,</div><div class="line">    <span class="attr">"content_scripts"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"matches"</span>: [<span class="string">"*://www.baidu.com/"</span>],</div><div class="line">            <span class="attr">"js"</span>: [<span class="string">"js/cannot_touch.js"</span>]</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编写cannot_touch.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">btn_move</span>(<span class="params">el, mouseLeft, mouseTop</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> leftRnd = (<span class="built_in">Math</span>.random()<span class="number">-0.5</span>)*<span class="number">20</span>;</div><div class="line">    <span class="keyword">var</span> topRnd = (<span class="built_in">Math</span>.random()<span class="number">-0.5</span>)*<span class="number">20</span>;</div><div class="line">    <span class="keyword">var</span> btnLeft = mouseLeft+(leftRnd&gt;<span class="number">0</span>?<span class="number">100</span>:<span class="number">-100</span>)+leftRnd;</div><div class="line">    <span class="keyword">var</span> btnTop = mouseTop+(topRnd&gt;<span class="number">0</span>?<span class="number">30</span>:<span class="number">-30</span>)+topRnd;</div><div class="line">    btnLeft = btnLeft&lt;<span class="number">100</span>?(btnLeft+<span class="built_in">window</span>.innerWidth<span class="number">-200</span>):(btnLeft&gt;<span class="built_in">window</span>.innerWidth<span class="number">-100</span>?btnLeft-<span class="built_in">window</span>.innerWidth+<span class="number">200</span>:btnLeft);</div><div class="line">    btnTop =  btnTop&lt;<span class="number">100</span>?( btnTop+<span class="built_in">window</span>.innerHeight<span class="number">-200</span>):(btnTop&gt;<span class="built_in">window</span>.innerHeight<span class="number">-100</span>?btnTop-<span class="built_in">window</span>.innerHeight+<span class="number">200</span>:btnTop);</div><div class="line">    el.style.position = <span class="string">'fixed'</span>;</div><div class="line">    el.style.left = btnLeft+<span class="string">'px'</span>;</div><div class="line">    el.style.top = btnTop+<span class="string">'px'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">over_btn</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(!e)&#123;</div><div class="line">        e = <span class="built_in">window</span>.event;</div><div class="line">    &#125;</div><div class="line">    btn_move(<span class="keyword">this</span>, e.clientX, e.clientY);</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'su'</span>).onmouseover = over_btn;</div></pre></td></tr></table></figure></p>
<p>将指定的脚本文件插入到符合规则的特定页面中，从而使插入的脚本可以对页面的DOM进行操作。</p>
<h3 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h3><p>Google允许Chrome扩展应用不必受限于跨域限制。但出于安全考虑，需要在Manifest的permissions属性中声明需要跨域的权限。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"permissions"</span>: [</div><div class="line">  <span class="string">"*://*.wikipedia.org/*"</span> <span class="comment">// 允许获取维基百科的数据</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查询ip的扩展：<br>mainfest.json文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">"name"</span>: <span class="string">"查看我的IP"</span>,</div><div class="line">    <span class="string">"version"</span>: <span class="string">"1.0"</span>,</div><div class="line">    <span class="string">"description"</span>: <span class="string">"查看我的电脑当前的公网IP"</span>,</div><div class="line">    <span class="string">"icons"</span>: &#123;</div><div class="line">        <span class="string">"16"</span>: <span class="string">"images/icon16.png"</span>,</div><div class="line">        <span class="string">"48"</span>: <span class="string">"images/icon48.png"</span>,</div><div class="line">        <span class="string">"128"</span>: <span class="string">"images/icon128.png"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"browser_action"</span>: &#123;</div><div class="line">        <span class="string">"default_icon"</span>: &#123;</div><div class="line">            <span class="string">"19"</span>: <span class="string">"images/icon19.png"</span>,</div><div class="line">            <span class="string">"38"</span>: <span class="string">"images/icon38.png"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"default_title"</span>: <span class="string">"查看我的IP"</span>,</div><div class="line">        <span class="string">"default_popup"</span>: <span class="string">"popup.html"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"permissions"</span>: [</div><div class="line">        <span class="string">"http://int.dpool.sina.com.cn/"</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>popup.html文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">* &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">42px</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ip_div"</span>&gt;</span>正在查询……<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/my_ip.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>my_ip.js：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">httpRequest</span>(<span class="params">url, callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  xhr.open(<span class="string">"GET"</span>, url, <span class="literal">true</span>);</div><div class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">  callback(xhr.responseText);</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">  xhr.send();&#125;</div><div class="line"></div><div class="line">httpRequest(<span class="string">'http://int.dpool.sina.com.cn/iplookup/iplookup.php?'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ip</span>)</span>&#123;</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'ip_div'</span>).innerText = ip;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="常驻后台"><a href="#常驻后台" class="headerlink" title="常驻后台"></a>常驻后台</h3><p>在Manifest中指定background域可以使扩展常驻后台。<br>background可以包含三种属性，分别是scripts（扩展启动时自动创建一个包含所有指定脚本的页面 ）、page和persistent（true时扩展将一直在后台运行；false时扩展在后台按需运行，这就是Chrome后来提出的Event Page）。</p>
<p>实时监视网站在线状态的扩展：<br>每隔5秒就发起一次连接请求，如果请求成功就代表网站在线，将扩展图标显示为绿色，如果请求失败就代表网站不在线，将扩展图标显示为红色。<br>Manifest文件：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"Baidu在线状态"</span>,</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"1.0"</span>,</div><div class="line">    <span class="attr">"description"</span>: <span class="string">"监视Baidu是否在线"</span>,</div><div class="line">    <span class="attr">"icons"</span>: &#123;</div><div class="line">        <span class="attr">"16"</span>: <span class="string">"images/icon16.png"</span>,</div><div class="line">        <span class="attr">"48"</span>: <span class="string">"images/icon48.png"</span>,</div><div class="line">        <span class="attr">"128"</span>: <span class="string">"images/icon128.png"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"browser_action"</span>: &#123;</div><div class="line">        <span class="attr">"default_icon"</span>: &#123;</div><div class="line">            <span class="attr">"19"</span>: <span class="string">"images/icon19.png"</span>,</div><div class="line">            <span class="attr">"38"</span>: <span class="string">"images/icon38.png"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"background"</span>: &#123;</div><div class="line">        <span class="attr">"scripts"</span>: [</div><div class="line">            <span class="string">"js/status.js"</span></div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"permissions"</span>: [</div><div class="line">        <span class="string">"http://www.baidu.cn/"</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于这个扩展没有UI，所以我们不必编写HTML文件，下面直接编写status.js:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">httpRequest</span>(<span class="params">url, callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  xhr.open(<span class="string">"GET"</span>, url, <span class="literal">true</span>);</div><div class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">  callback(<span class="literal">true</span>);</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">  xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  callback(<span class="literal">false</span>);</div><div class="line">  &#125;</div><div class="line">  xhr.send();&#125;</div><div class="line"></div><div class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  httpRequest(<span class="string">'http://www.baidu.com/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">status</span>)</span>&#123;</div><div class="line">      chrome.browserAction.setIcon(&#123;<span class="attr">path</span>: <span class="string">'images/'</span>+(status?<span class="string">'online.png'</span>:<span class="string">'offline.png'</span>)&#125;); <span class="comment">// 更换扩展在浏览器工具栏中的图标</span></div><div class="line">  &#125;);</div><div class="line">&#125;,<span class="number">5000</span>);</div></pre></td></tr></table></figure></p>
<h3 id="带选项页面的扩展"><a href="#带选项页面的扩展" class="headerlink" title="带选项页面的扩展"></a>带选项页面的扩展</h3><p>通过Manifest文件的options_page属性可以为扩展指定一个选项页面。<br>设置可以采用多种方式存储：cookie、HTML5的storage，Chrome提供的存储API，使用Web SQL Database。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;options_page&quot;: &quot;options.html&quot;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="扩展页面间的通信"><a href="#扩展页面间的通信" class="headerlink" title="扩展页面间的通信"></a>扩展页面间的通信</h3><p>在popup.html中执行如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chrome.runtime.sendMessage(<span class="string">'Hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">  <span class="built_in">document</span>.write(response);&#125;);</div></pre></td></tr></table></figure></p>
<p>在background中执行如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">chrome.runtime.onMessage.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">message, sender, sendResponse</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(message == <span class="string">'Hello'</span>)&#123;</div><div class="line">  sendResponse(<span class="string">'Hello from background.'</span>);</div><div class="line">  &#125;&#125;);</div></pre></td></tr></table></figure></p>
<p>查看popup.html页面会发现有输出“Hello from background.”</p>
<h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><h4 id="Chrome存储API"><a href="#Chrome存储API" class="headerlink" title="Chrome存储API"></a>Chrome存储API</h4><p>Chrome为扩展应用提供了存储API，以便将扩展中需要保存的数据写入本地磁盘。Chrome提供的存储API可以说是对localStorage的改进，它与localStorage相比有以下区别：</p>
<ul>
<li>如果储存区域指定为sync，数据可以自动同步；</li>
<li>content_scripts可以直接读取数据，而不必通过background页面；</li>
<li>在隐身模式下仍然可以读出之前存储的数据；</li>
<li>读写速度更快；</li>
<li>用户数据可以以对象的类型保存。<br>content_scripts是注入到用户当前浏览页面中的，如果content_scripts直接读取localStorage，所读取到的数据是用户当前浏览页面所在域中的。所以通常的解决办法是content_scripts通过runtime.sendMessage和background通信，由background读写扩展所在域（通常是chrome-extension://extension-id/）的localStorage，然后再传递给content_scripts。</li>
</ul>
<p>使用Chrome存储API必须要在Manifest的permissions中声明”storage”，之后才有权限调用。Chrome存储API提供了2种储存区域，分别是sync和local。两种储存区域的区别在于，sync储存的区域会根据用户当前在Chrome上登陆的Google账户自动同步数据，当无可用网络连接可用时，sync区域对数据的读写和local区域对数据的读写行为一致。</p>
<p>对于每种储存区域，Chrome又提供了5个方法，分别是get、getBytesInUse、set、remove和clear。<br>（1）get方法即为读取数据，完整的方法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chrome.storage.StorageArea.get(keys, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(result);&#125;);</div></pre></td></tr></table></figure></p>
<p>keys可以是字符串、包含多个字符串的数组或对象。如果keys是字符串，则和localStorage的用法类似；如果是数组，则相当于一次读取了多个数据；如果keys是对象，则会先读取以这个对象属性名为键值的数据，如果这个数据不存在则返回keys对象的属性值（比如keys为{‘name’:’Billy’}，如果name这个值存在，就返回name原有的值，如果不存在就返回Billy）。如果keys为一个空数组（[]）或空对象（{}），则返回一个空列表，如果keys为null，则返回所有存储的数据。</p>
<p>（2） getBytesInUse方法为获取一个数据或多个数据所占用的总空间，返回结果的单位是字节，完整方法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chrome.storage.StorageArea.getBytesInUse(keys, <span class="function"><span class="keyword">function</span>(<span class="params">bytes</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(bytes);&#125;);</div></pre></td></tr></table></figure></p>
<p>此处的keys只能为null、字符串或包含多个字符串的数组。</p>
<p>（3） set方法为写入数据，完整方法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chrome.storage.StorageArea.set(items, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//do something&#125;);</span></div></pre></td></tr></table></figure></p>
<p>items为对象类型，形式为键/值对。items的属性值如果是字符型、数字型和数组型，则储存的格式不会改变，但如果是对象型和函数型的，会被储存为“{}”，如果是日期型和正则型的，会被储存为它们的字符串形式。</p>
<p>（4） remove方法为删除数据，完整方法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chrome.storage.StorageArea.remove(keys, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//do something&#125;);</span></div></pre></td></tr></table></figure></p>
<p>其中keys可以是字符串，也可以是包含多个字符串的数组。</p>
<p>（5） clear方法为删除所有数据，完整方法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chrome.storage.StorageArea.clear(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//do something&#125;);</span></div></pre></td></tr></table></figure></p>
<p>请注意，上述五种完整方法中，StorageArea必须指定为local或sync中的一个。</p>
<p>Chrome同时还为存储API提供了一个onChanged事件，当存储区的数据发生改变时，这个事件会被激发。<br>onChanged的完整方法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chrome.storage.onChanged.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">changes, areaName</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Value in '</span>+areaName+<span class="string">' has been changed:'</span>);</div><div class="line">  <span class="built_in">console</span>.log(changes);&#125;);</div></pre></td></tr></table></figure></p>
<p>callback会接收到两个参数，第一个为changes，第二个是StorageArea。changes是词典对象，键为更改的属性名称，值包含两个属性，分别为oldValue和newValue；StorageArea为local或sync。</p>
<h2 id="Chrome扩展的UI界面"><a href="#Chrome扩展的UI界面" class="headerlink" title="Chrome扩展的UI界面"></a>Chrome扩展的UI界面</h2><ul>
<li>Browser Actions将扩展图标置于Chrome浏览器工具栏中，地址栏的右侧。如果声明了popup页面，当用户点击图标时，在图标的下侧会打开这个页面。同时图标上面还可以附带badge——一个带有显示有限字符空间的区域——用以显示一些有用的信息，如未读邮件数、当前音乐播放时间等。<br>如果没有足够的空间，会在图标的上侧打开。</li>
<li>右键菜单：要在Manifest的permissions域中声明contextMenus权限。</li>
<li>桌面提醒：需要在Manifest中声明notifications权限。<br>创建桌面提醒非常容易，只需指定标题、内容和图片即可。下面的代码生成了标题为“Notification Demo”，内容为“Merry Christmas”，图片为“icon48.png”的桌面提醒窗口。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> notification = webkitNotifications.createNotification(</div><div class="line">  <span class="string">'icon48.png'</span>,</div><div class="line">  <span class="string">'Notification Demo'</span>,</div><div class="line">  <span class="string">'Merry Christmas'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>桌面系统窗口创建之后是不会立刻显示出来的，为了让其显示，还要调用show方法：<br>notification.show();</p>
<ul>
<li>Chrome和其他浏览器相比一个最大的区别就是地址栏——其实不仅仅是地址栏，而是一个多功能的输入框，Google将其称为omnibox（中文为“多功能框”）。我们熟悉的一个功能就是用户可以直接在omnibox搜索关键字，Chrome也将omnibox开放给开发者，这使得omnibox更加强大。</li>
</ul>
<h2 id="管理浏览器"><a href="#管理浏览器" class="headerlink" title="管理浏览器"></a>管理浏览器</h2><ul>
<li>书签：要在扩展中操作书签，需要在Manifest中声明bookmarks权限。</li>
<li>Cookies，需要在Manifest中声明cookies权限，同时也要声明所需管理Cookies所在的域。</li>
<li>历史，需要在Manifest中声明history权限。</li>
<li>管理扩展与应用：management接口可以获取用户已安装的扩展和应用信息，同时还可以卸载和禁用它们。需要在Manifest中声明management权限。</li>
<li>标签，需要声明tabs权限。</li>
<li>override pages，用自定义的页面替换Chrome相应默认的页面，目前支持替换的页面包含Chrome的书签页面、历史记录和新标签页面。</li>
<li>下载，提供了downloads API，扩展可以通过此API管理浏览器的下载功能，包括暂停、搜索和取消等。需要在Manifest文件中声明downloads权限。</li>
<li>网络请求，提供了较为完整的方法供扩展程序分析、阻断及更改网络请求，同时也提供了一系列较为全面的监听事件以监听整个网络请求生命周期的各个阶段。网络请求的整个生命周期所触发事件的时间顺序如下图所示。需要在Manifest中声明webRequest权限以及相关被操作的URL。</li>
<li>代理，代理可以让用户通过代理服务器浏览网络资源以达到匿名访问等目的。代理的类型有多种，常用的包括http代理和socks代理等。Chrome浏览器提供了代理设置管理接口，这样可以让扩展来做到更加智能的代理设置。要让扩展使用代理接口，需要声明proxy权限：<br>“permissions”: [<br>“proxy”]</li>
<li>系统信息，Chrome提供了获取系统CPU、内存和存储设备的信息，要获取这些信息，需要在Manifest中分别声明如下权限：<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"permissions": [</div><div class="line">  "system.cpu",</div><div class="line">  "system.memory",</div><div class="line">  "system.storage"]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="编写第一个chrome应用"><a href="#编写第一个chrome应用" class="headerlink" title="编写第一个chrome应用"></a>编写第一个chrome应用</h2><p>在编写Chrome应用时请时刻记住，这已经不是单纯地开发浏览器扩展了，现在要编写的是一款真正的桌面程序，而Chrome只是类似CLR和Java的环境而已。<br>创建Manifest文件：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"app"</span>: &#123;</div><div class="line">  <span class="attr">"background"</span>: &#123;</div><div class="line">  <span class="attr">"scripts"</span>: [<span class="string">"background.js"</span>]</div><div class="line">  &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"Performance Monitor"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"A performance monitor to show cpu and memory status."</span>,</div><div class="line">  <span class="attr">"icons"</span>: &#123;</div><div class="line">  <span class="attr">"16"</span>: <span class="string">"images/icon16.png"</span>,</div><div class="line">  <span class="attr">"48"</span>: <span class="string">"images/icon48.png"</span>,</div><div class="line">  <span class="attr">"128"</span>: <span class="string">"images/icon128.png"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"permissions"</span>: [</div><div class="line">  <span class="string">"system.cpu"</span>,</div><div class="line">  <span class="string">"system.memory"</span></div><div class="line">  ]&#125;</div></pre></td></tr></table></figure></p>
<p>编写background.js脚本：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">chrome.app.runtime.onLaunched.addListener(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  chrome.app.window.create(<span class="string">'main.html'</span>, &#123;</div><div class="line">  <span class="string">'id'</span>: <span class="string">'main'</span>,</div><div class="line">  <span class="string">'bounds'</span>: &#123;</div><div class="line">  <span class="string">'width'</span>: <span class="number">542</span>,</div><div class="line">  <span class="string">'height'</span>: <span class="number">360</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">'resizable'</span>: <span class="literal">false</span>,</div><div class="line">  <span class="string">'frame'</span>: <span class="string">'none'</span></div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>chrome应用可以进行的操作：</p>
<ul>
<li>文件系统：目录及文件操作对象、获取目录及文件操作对象、读取文件、遍历目录、创建及删除目录和文件、写入文件、复制及移动目录和文件。</li>
<li>媒体库：- 获取媒体库、添加及移除媒体库、更新媒体库、获取媒体文件信息。</li>
<li>网络通信：UDP协议、TCP协议、TCP Server、WebSocket。</li>
<li>操作USB设备、串口通信、文字转语音、系统信息。</li>
</ul>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-07-05-%E5%BC%80%E5%8F%91-Chrome-%E6%8F%92%E4%BB%B6%E5%92%8C%E5%BA%94%E7%94%A8.html">开发 Chrome 插件和应用</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;chrome应用和扩展的区别&quot;&gt;&lt;a href=&quot;#chrome应用和扩展的区别&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="tool" scheme="http://yanglonglong.com/categories/tool/"/>
    
    
      <category term="Chrome" scheme="http://yanglonglong.com/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>玩转 Chrome 控制台</title>
    <link href="http://yanglonglong.com/blog/2016-07-03-%E7%8E%A9%E8%BD%AC-Chrome-%E6%8E%A7%E5%88%B6%E5%8F%B0.html"/>
    <id>http://yanglonglong.com/blog/2016-07-03-玩转-Chrome-控制台.html</id>
    <published>2016-07-03T06:51:00.000Z</published>
    <updated>2016-07-24T07:38:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chrome-控制台使用"><a href="#Chrome-控制台使用" class="headerlink" title="Chrome 控制台使用"></a>Chrome 控制台使用</h2><h3 id="Elements面板"><a href="#Elements面板" class="headerlink" title="Elements面板"></a>Elements面板</h3><p>显示实时的DOM树<br>  DOM BreakPoints：有时候我们需要监听某个 DOM 被修改情况，而不关心是哪行代码做的修改（也可能有多处都会对其做修改）。那么我们可以直接在 DOM 上设置断点。</p>
<h3 id="Console面板"><a href="#Console面板" class="headerlink" title="Console面板"></a>Console面板</h3><ul>
<li>$()–document.querySelector()的简写，返回第一个和css选择器匹配的元素。例如$(‘div’)返回这个页面中第一个div元素</li>
<li>$$()–document.querySelectorAll()的简写，返回一个和css选择器匹配的元素数组。</li>
<li>选中某个元素之后，在 console 中输入 $0 即是该元素。</li>
</ul>
<h3 id="Sources面板"><a href="#Sources面板" class="headerlink" title="Sources面板"></a>Sources面板</h3><p>查看源代码，进行调试，还可以把文件下载到本地，通过代理来调试该文件。</p>
<h3 id="Network面板"><a href="#Network面板" class="headerlink" title="Network面板"></a>Network面板</h3><ul>
<li>监控当前网页所有的http请求的面版，它主体部分展示的是每个http请求，每个字段表示着该请求的不同属性和状态。</li>
<li>可以模拟不同的网速情况，也可以看到请求和响应信息。</li>
<li>对请求链接右键，copy as curl，直接在curl中更改参数。</li>
</ul>
<h3 id="Resources面板"><a href="#Resources面板" class="headerlink" title="Resources面板"></a>Resources面板</h3><p>显示所有加载的资源，</p>
<h3 id="Timeline面板"><a href="#Timeline面板" class="headerlink" title="Timeline面板"></a>Timeline面板</h3><p>分析你的网站内存泄露</p>
<h3 id="Profiles面板"><a href="#Profiles面板" class="headerlink" title="Profiles面板"></a>Profiles面板</h3><p>监控网页中各种方法执行时间和内存的变化，简单来说它就是Timeline的数字化版本</p>
<h3 id="Audits面板"><a href="#Audits面板" class="headerlink" title="Audits面板"></a>Audits面板</h3><p>对页面的一个优化建议</p>
<h3 id="Security面板"><a href="#Security面板" class="headerlink" title="Security面板"></a>Security面板</h3><p>查看其应用链接或站点请求的安全验证状态，包括TLS协 议状态以及页面子资源是否采用了不安全的HTTP协议。</p>
<p>注意：<br>可以通过workspaces来编辑本地文件：需要配置文本服务器。</p>
<h2 id="控制台快捷键："><a href="#控制台快捷键：" class="headerlink" title="控制台快捷键："></a>控制台快捷键：</h2><p>cmd+p 搜索文件<br>cmd+shift+p 搜索函数<br>cmd+f 查找<br>cmd+shift+f 全局查找<br>cmd+d 连续选中单词<br>cmd+shift+d 切换控制台显示方式<br>cmd+g 跳转到行号</p>
<h2 id="Chrome-常用快捷键"><a href="#Chrome-常用快捷键" class="headerlink" title="Chrome 常用快捷键"></a>Chrome 常用快捷键</h2><p>cmd+t 新标签页<br>ctrl+tab 切换标签页<br>cmd+l 在地址栏中输入<br>cmd+alt+i 打开开发者工具<br>cmd+shift+r 强制刷新<br>cmd+shift+t 恢复关闭的页面<br>cmd+shift+j 打开下载中的东西</p>
<h2 id="Chrome-常用插件"><a href="#Chrome-常用插件" class="headerlink" title="Chrome 常用插件"></a>Chrome 常用插件</h2><ul>
<li>Clear Cache 清理缓存</li>
<li>Live HTTP Headers 查看 HTTP 请求</li>
<li>OneTab 一键收起所有 tab 页面</li>
<li>Postman 测试 HTTP 请求</li>
<li>Proxy SwitchyOmeg 切换代理</li>
<li>Save to Pocket 保存在 Pocket 中</li>
<li>Vimium 在 Chrome 中使用 VIM 快捷键</li>
<li>Visual Event 查看页面事件</li>
<li>Vue.js devtools VUE 调试工具</li>
<li>Wappalyzer 分析当前页面使用的技术框架</li>
<li>WEB前端助手(FeHelper) 各种小工具合集</li>
<li>WhatFont 查看页面使用的字体</li>
<li>二维码(QR码)生成器(QR Code Generator) 生成二维码</li>
<li>印象笔记·悦读  净化页面</li>
</ul>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-07-03-%E7%8E%A9%E8%BD%AC-Chrome-%E6%8E%A7%E5%88%B6%E5%8F%B0.html">玩转 Chrome 控制台</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Chrome-控制台使用&quot;&gt;&lt;a href=&quot;#Chrome-控制台使用&quot; class=&quot;headerlink&quot; title=&quot;Chrome 控制台使用&quot;&gt;&lt;/a&gt;Chrome 控制台使用&lt;/h2&gt;&lt;h3 id=&quot;Elements面板&quot;&gt;&lt;a href=&quot;#Ele
    
    </summary>
    
      <category term="tool" scheme="http://yanglonglong.com/categories/tool/"/>
    
    
      <category term="Chrome" scheme="http://yanglonglong.com/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>curl 工具使用详解</title>
    <link href="http://yanglonglong.com/blog/2016-06-30-curl-%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://yanglonglong.com/blog/2016-06-30-curl-工具使用详解.html</id>
    <published>2016-06-30T02:58:28.000Z</published>
    <updated>2016-07-22T12:13:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最开始是在使用 GeoServer 的时候，要先测试 get 和 post 请求是否正确，刚开始在用java写的，然后不停的修改参数，重新编译执行。后来发现 curl 这个神器，功能强大，极大提高工作效率。<br>chrome 对 curl 的支持也非常好，在 Netword 面板中的请求右键，都有一个复制为 curl 格式的选项，复制之后直接在 curl 中执行，完美！它会复制各种用户信息，包括 Cookie/UserAgent等。 </p>
<h2 id="curl-简介"><a href="#curl-简介" class="headerlink" title="curl 简介"></a>curl 简介</h2><p>curl是利用URL语法在命令行方式下工作的开源文件传输工具，作用是发出网络请求，然后得到和提取数据，显示在”标准输出”上面，支持多种协议，如FTP，HTTP，HTTPS，POP3，SMTP等。</p>
<h2 id="curl-使用"><a href="#curl-使用" class="headerlink" title="curl 使用"></a>curl 使用</h2><h3 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h3><p>在命令行中查看：  curl www.sina.com<br>保存到文件中查看：curl -o [文件名] www.sina.com<br>网页自动跳转：    curl -L www.sina.com –&gt; www.sina.com.cn</p>
<h3 id="查看头信息"><a href="#查看头信息" class="headerlink" title="查看头信息"></a>查看头信息</h3><p>多显示头信息：    curl -i www.sina.com<br>只显示头信息：    curl -I www.sina.com </p>
<h3 id="查看通信过程"><a href="#查看通信过程" class="headerlink" title="查看通信过程"></a>查看通信过程</h3><p>多显示通信过程：  curl -v www.sina.com<br>保存详细通信过程：curl –trace-ascii output.txt www.sina.com</p>
<h3 id="发送表单信息"><a href="#发送表单信息" class="headerlink" title="发送表单信息"></a>发送表单信息</h3><p>GET方法：  curl example.com/form.cgi?data1=xxx&amp;data2=xxx<br>POST方法： curl –data “data=xxx” example.com/form.cgi<br>编码后发送： curl –data-urlencode “date=April 1” example.com/form.cgi</p>
<h3 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词"></a>HTTP动词</h3><p>GET：   curl www.sina.com（默认）<br>POST：  curl -X POST www.example.com<br>DELETE：curl -X DELETE www.example.com</p>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">'multipart/form-data'</span> <span class="attr">action</span>=<span class="string">"upload.cgi"</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">name</span>=<span class="string">upload</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">name</span>=<span class="string">press</span> <span class="attr">value</span>=<span class="string">"OK"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上表单使用curl来上传文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl --form upload=@localfilename --form press=OK [URL]</div></pre></td></tr></table></figure></p>
<h3 id="Referer字段"><a href="#Referer字段" class="headerlink" title="Referer字段"></a>Referer字段</h3><p>需要在http request头信息中，提供一个referer字段，表示你是从哪里跳转过来的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl --referer http://www.example.com http://www.example.com</div></pre></td></tr></table></figure></p>
<h3 id="模拟设备信息"><a href="#模拟设备信息" class="headerlink" title="模拟设备信息"></a>模拟设备信息</h3><p>iPhone4的User Agent是：　Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) AppleWebKit/### (KHTML, like Gecko) Version/### Mobile/### Safari/6531.22.7<br>curl模拟iphone4：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl --user-agent <span class="string">"[User Agent]"</span> [URL]</div></pre></td></tr></table></figure></p>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl --cookie <span class="string">"name=xxx"</span> www.example.com</div></pre></td></tr></table></figure>
<h3 id="增加头信息"><a href="#增加头信息" class="headerlink" title="增加头信息"></a>增加头信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl --header <span class="string">"Content-Type:application/json"</span> http://example.com</div><div class="line">curl    -H    <span class="string">" Content-type: text/plain"</span> http://example.com</div></pre></td></tr></table></figure>
<h3 id="HTTP认证-u-–user"><a href="#HTTP认证-u-–user" class="headerlink" title="HTTP认证-u/–user"></a>HTTP认证-u/–user</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl --user name:password example.com</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://curl.haxx.se/docs/httpscripting.html" target="_blank" rel="external">curl 帮助文档</a></p>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://www.yanglonglong.com/blog/2016-06-30-curl-%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="external">curl 工具使用详解</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;最开始是在使用 GeoServer 的时候，要先测试 get 和 post 请求是否正确，刚开始在用java写的，然后不停的修改参数，重新编
    
    </summary>
    
      <category term="tool" scheme="http://yanglonglong.com/categories/tool/"/>
    
    
      <category term="curl" scheme="http://yanglonglong.com/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>我的VIM 终极配置方案</title>
    <link href="http://yanglonglong.com/blog/2016-06-24-%E6%88%91%E7%9A%84VIM-%E7%BB%88%E6%9E%81%E9%85%8D%E7%BD%AE%E6%96%B9%E6%A1%88.html"/>
    <id>http://yanglonglong.com/blog/2016-06-24-我的VIM-终极配置方案.html</id>
    <published>2016-06-24T07:12:03.000Z</published>
    <updated>2016-07-22T11:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>从大学到研究生期间，用过 N 种 IDE，持续使用超过三个月的大概有：<br>VC++6.0, Visual Studio, Eclipse, MyEclipse, WebStrom, IntelliJ, Pycharm, Sublime, VIM, notepad++。</p>
<p>现在主要做前端了，所以 C++ / C# / JAVA /Python 相关的 IDE 就不使用了。<br>目前主要是用的是 Sublime /VIM，以后有空折腾 swift 的话，就可以加上 Xcode。</p>
<p>Sublime 的配置比较简单，使用上也是傻瓜式的，加个主题插件（Material-Theme）、右键增强等几个插件，然后开启 VIM 模式，也可以用的很爽，这里就不多介绍了，可以参考<a href="https://github.com/yllziv/sublime_config" target="_blank" rel="external">我的配置</a>。</p>
<p>VIM 配置比较简单，有 Vundle 这样的包管理工具，但是使用上还是需要一定的时间适应的。比如我从第一次配好 VIM 环境然后偶尔使用的频率，到现在快两年了，也只能算是比较熟练而已。要想真正的掌握 VIM，还需要抛弃正在使用的编辑器，全职使用 VIM 一段时间。</p>
<h2 id="我的-VIM-配置"><a href="#我的-VIM-配置" class="headerlink" title="我的 VIM 配置"></a>我的 VIM 配置</h2><p>见 Github：<a href="https://github.com/yllziv/zivim" target="_blank" rel="external">zivim</a></p>
<h2 id="VIM概述"><a href="#VIM概述" class="headerlink" title="VIM概述"></a>VIM概述</h2><p>###设计哲学<br>Keep it simple enough。<br>减少使用鼠标，减少敲击键盘，减少手指移动，减少目光移动。</p>
<h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><p>1、左移h、右移l、下移j、上移k<br>2、向下翻页ctrl + f，向上翻页ctrl + b<br>3、向下翻半页ctrl + d，向上翻半页ctrl + u<br>4、移动到行尾$，移动到行首0（数字），移动到行首第一个字符处^<br>6、移动到段首{，移动到段尾} ，以空行来标识<br>7、移动到下一个词w/e，移动到上一个词   b<br>8、移动到文档开始gg，移动到文档结束  G<br>9、移动到匹配的{}.().[]处   %<br>10、跳到第n行 ngg 或 nG 或 :n<br>11、[{ 跳到本代码块的开头<br>12、]} 跳到本代码块的结尾<br>13、gf 跳转到文件<br>19、gd 移动到光标所处的函数或变量的定义处<br>14、ctrl + o 跳转到上一位置<br>15、 显示行号：Ctrl+g</p>
<h3 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h3><p>1、光标向后查找关键字 # ， 光标向前查找关键字*<br>3、当前行查找x字符 fx（向后查找）, Fx（向前查找）<br>4、基本替换 :s/s1/s2 （s1替换为s2，替换第一个） ，s/s1/s2/g替换当前行<br>5、全部替换 :%s/s1/s2 （全文替换）<br>7、替换某些行 :n1,n2 s/s1/s2/g （从n1到n2行）<br>8、搜索模式为 /，Tab为下一页，Enter选择<br>9、重复上次操作.<br>12、 替换当前字符 r，替换并插入当前字符以及之后字符：R<br>13、 向后查找 ? n是下一个，N是上一个，Enter选择<br>14、ctrl + [ 实现ESC功能</p>
<h3 id="编辑操作"><a href="#编辑操作" class="headerlink" title="编辑操作"></a>编辑操作</h3><p>1、光标后插入a, 行尾插入A<br>2、后插一行插入o，前插一行插入O<br>3、删除字符插入s， 删除整行插入S<br>4、光标前插入i，行首插入I<br>5、删除一行dd，删除后进入插入模式cc<br>6、删除一个单词dw，删除一个单词进入插入模式cw<br>7、删除一个字符x或者dl，删除一个字符进入插入模式s或者cl<br>8、粘贴p，交换两个字符xp，交换两行ddp   （dd和x都是剪切操作）<br>9、复制y，复制一行yy<br>10、撤销u，重做ctrl + r，重复. U恢复一整行<br>11、智能提示 ctrl + n 或者 ctrl + p<br>13、删除到下一个字符跨过的字符，删除并进入插入模式，不包括x字符 ctx ，包括x字符，cfx ，不进入插入模式dtx ，dfx<br>14、删除到行尾可以使用D或C<br>15、可以使用多重剪切板，查看状态使用:reg，使用剪切板使用”，例如复制到w寄存器，”wyy，或者使用可视模式v”wy<br>16、使用数字可以跨过n个区域，如y3x，会拷贝光标到第三个x之间的区域，3j向下移动3行<br>17、在编写代码的时候可以使用]p粘贴，这样可以自动进行代码缩进<br>18、 &gt;&gt; 缩进所有选择的代码 ， &lt;&lt; 反缩进所有选择的代码<br>19、合并两行 J<br>20、切换大小写~<br>21、切换当前单词为大写gUiw，小写guiw<br>22、 自动缩进当前行==</p>
<h3 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h3><p>1、分隔一个窗口:split或者:vsplit<br>2、创建一个窗口:new或者:vnew<br>3、在新窗口打开文件:sf {filename}<br>4、关闭当前窗口:close<br>5、仅保留当前窗口:only<br>6、到左边窗口 ctrl + w, h<br>7、到右边窗口 ctrl + w, l<br>8、到上边窗口 ctrl + w, k<br>9、到下边窗口 ctrl + w, j<br>10、移动当前窗口的布局位置 ctrl + w + r</p>
<h3 id="宏操作"><a href="#宏操作" class="headerlink" title="宏操作"></a>宏操作</h3><p>1、开始记录宏操作q[a-z]，按q结束，保存操作到寄存器[a-z]中<br>2、@[a-z]执行寄存器[a-z]中的操作<br>3、@@执行最近一次记录的宏操作</p>
<h3 id="可视操作"><a href="#可视操作" class="headerlink" title="可视操作"></a>可视操作</h3><p>1、进入块可视模式 ctrl + v ，进入字符可视模式 v ，进入行可视模式 V<br>2、删除选定的块 d ，复制y ， 切换大小写~<br>3、删除选定的块然后进入插入模式 c<br>4、左移块&lt; ， 右移块&gt;<br>5、跳转光标到选中块的另一个端点o<br>6、引号内的vi”  vi’    vi(  vi{  vi(  vi&lt;  vi[<br>7、vis句子 vib块  viw单词  vip段落  vit选择html内容<br>8、va{ 选中{}中间内容，包括{}，其他类似<br>9、 删除： di(   di”    di’   di[    di{<br>10、修改：c</p>
<h3 id="挂起操作"><a href="#挂起操作" class="headerlink" title="挂起操作"></a>挂起操作</h3><p>1、挂起Vim ctrl + z<br>2、查看任务 在shell中输入 jobs<br>3、恢复任务 fg [job number]（将后台程序放到前台）<br>4、在vim中执行shell命令 :!command<br>5、在vim中开启shell命令：shell，退出该shell：exit<br>8.2.8 折叠使用<br>za       打开或关闭当前折叠；<br>zR       打开所有折叠。<br>zM     关闭所有折叠；</p>
<h3 id="标记使用"><a href="#标记使用" class="headerlink" title="标记使用"></a>标记使用</h3><p>设定一个标记 m{a-zA-Z}<br>跳转到指定的标记‘{a-zA-Z}或 `{a-zA-Z}</p>
<h3 id="退出Vim"><a href="#退出Vim" class="headerlink" title="退出Vim"></a>退出Vim</h3><p>:wq   保存修改并退出<br>:x     保存修改并退出<br>:q     退出，如果对缓冲区进行过修改，则会提示<br>:q!    强制退出，放弃修改<br>:e!    不保存退出再进入</p>
<h2 id="vim插件的使用"><a href="#vim插件的使用" class="headerlink" title="vim插件的使用"></a>vim插件的使用</h2><h3 id="vundle插件"><a href="#vundle插件" class="headerlink" title="vundle插件"></a>vundle插件</h3><p>BundleInstall，BundleUpdate，BundleClean，BundleList，BundleSearch</p>
<h3 id="emmet插件"><a href="#emmet插件" class="headerlink" title="emmet插件"></a>emmet插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">展开缩略词：输入缩略词组div&gt;p<span class="comment">#foo$*3&gt;a或者! 按&lt;Ctrl-y&gt; 后再按逗号</span></div><div class="line">包入：大V 行选取，&lt;c-y&gt;，键入ul&gt;li*，然后按 Enter。</div><div class="line">插入模式下根据光标位置选中整个标签：&lt;c-y&gt;d</div><div class="line">插入模式下根据光标位置选中整个标签内容：&lt;c-y&gt;D</div><div class="line">跳转到下一个编辑点：&lt;c-y&gt;n</div><div class="line">跳转到上一个编辑点：&lt;c-y&gt;N</div><div class="line">切换注释：&lt;c-y&gt;/</div><div class="line">分割/合并标签：&lt;c-y&gt;j</div><div class="line">移除标签对：&lt;c-y&gt;k</div></pre></td></tr></table></figure>
<h3 id="The-NERD-tree插件"><a href="#The-NERD-tree插件" class="headerlink" title="The-NERD-tree插件"></a>The-NERD-tree插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">打开文件</div><div class="line">o 在已有窗口中打开文件或书签，并跳到该窗口（与双击效果一致）</div><div class="line">go 在已有窗口 中打开文件、目录或书签，但不跳到该窗口</div><div class="line">i 水平分隔窗口打开选中文件，并跳到该窗口（与鼠标中键效果一致）</div><div class="line">gi 水平分隔窗口打开选中文件，但不跳到该窗口</div><div class="line">s 垂直分隔窗口打开选中文件，并跳到该窗口</div><div class="line">gs 垂直分隔窗口打开选中文件，但不跳到该窗口</div><div class="line"></div><div class="line">使用目录</div><div class="line">o  在已有窗口中打开目录（与双击效果一致）</div><div class="line">O 递归打开选中 结点下的所有目录</div><div class="line">x 合拢选中结点的父目录</div><div class="line">X 递归 合拢选中结点下的所有目录</div><div class="line">P 跳到目录根结点</div><div class="line">p 跳到目录父结点</div><div class="line">K 跳到当前目录下同级的第一个结点 ，k 跳到当前目录下同级的前一个结点</div><div class="line">J 跳到当前目录下同级的最后一个结点， j 跳到当前目录下同级的后一个结点</div><div class="line">C 将选中目录或选中文件的父目录设为根结点</div><div class="line">u 将当前根结点的父目录设为根目录，并变成合拢原根结点</div><div class="line">U 将当前根结点的父目录设为根目录，但保持展开原根结点</div><div class="line">r 递归刷新选中目录，R 递归刷新根结点</div><div class="line">m 显示文件系统菜单</div><div class="line">F 切换是否显示文件</div><div class="line">I 切换是否显示隐藏文件</div><div class="line">? 切换是否显示 Quick Help</div><div class="line">B 切换是否显示书签</div><div class="line">D 删除当前书签</div><div class="line">q 关闭 NerdTree 窗口</div><div class="line"></div><div class="line">使用标签页</div><div class="line">t 在新 Tab 中打开选中文件/书签，并跳到新 Tab</div><div class="line">T 在新 Tab 中打开选中文件/书签，但不跳到新 Tab</div><div class="line">gT 前一个 tab</div><div class="line">gt 后一个 tab</div><div class="line">:tabc 关闭当前的 tab</div><div class="line">:tabo 关闭所有其他的 tab</div><div class="line">:tabs 查看所有打开的 tab</div></pre></td></tr></table></figure>
<h3 id="matchit插件"><a href="#matchit插件" class="headerlink" title="matchit插件"></a>matchit插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">在()，以及HTML标签之间快速跳转</div><div class="line">ctrl+%, g% 反向匹配，</div><div class="line">[% 定位块首    </div><div class="line">]% 定位块尾</div></pre></td></tr></table></figure>
<h3 id="The-NERD-Commenter插件"><a href="#The-NERD-Commenter插件" class="headerlink" title="The-NERD-Commenter插件"></a>The-NERD-Commenter插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">,ci ：切换选中行的注释状态 </div><div class="line">,n,ci : 注释/取消注释光标以下 n 行   </div><div class="line">,cm 为光标所在行的添加块注释  </div><div class="line">,cs ：使用迷人的方式进行注释 </div><div class="line">,cA：在行末添加注释</div></pre></td></tr></table></figure>
<h3 id="surround-处理复杂tag"><a href="#surround-处理复杂tag" class="headerlink" title="surround  处理复杂tag"></a>surround  处理复杂tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">普通模式下：</div><div class="line">ds  - 删除外包围  eg. ds<span class="string">" , ds&lt;</span></div><div class="line">cs  - 改变外包围  eg. cs ]) , cs"&lt;q&gt;</div><div class="line">ys  - 增加外包围  eg. ysiw] ，ysiw&lt;em&gt; 其中iw是一个文本对象</div><div class="line">yS  - 增加外包围，并将本文放置新行中 eg. ySiw&#123;</div><div class="line">yss - 给整行增加外包围 eg. yss&gt; ,  yss<span class="string">"</span></div><div class="line">ySs - add a surrounding to the whole line, place it on a new line + indent it</div><div class="line">ySS - 与ySs相同</div><div class="line">&lt;div&gt;Yo!*&lt;/div&gt;           dst         Yo!</div><div class="line">&lt;div&gt;Yo!*&lt;/div&gt;           cst&lt;p&gt;      &lt;p&gt;Yo!&lt;/p&gt;</div><div class="line">基于包围的本文编辑</div><div class="line">cit 删除一对 HTML/XML 的标签内部的所有字符并进入插入模式</div><div class="line">ci[ ci( ci&lt; ci&#123; 删除一对 [], (), &lt;&gt;, 或&#123;&#125; 中的所有字符并进入插入模式</div><div class="line">ci” ci’ ci` 删除一对引号字符 ”  ‘ 或 ` 中所有字符并进入插入模式</div><div class="line">ci: 例如，ci(，或者ci)，将会修改()之间的文本；</div><div class="line">di: 剪切配对符号之间文本；</div><div class="line">yi: 复制；</div><div class="line">ca: 同ci，但修改内容包括配对符号本身；</div><div class="line">da: 同di，但剪切内容包括配对符号本身；</div><div class="line">ya: 同yi，但复制内容包括配对符号本身</div><div class="line">PS. dib等同于di(</div><div class="line">diB等同于di&#123;</div></pre></td></tr></table></figure>
<h3 id="snipmate插件"><a href="#snipmate插件" class="headerlink" title="snipmate插件"></a>snipmate插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">js代码自动补全插件</div><div class="line"><span class="keyword">for</span> &lt;Tab&gt;</div><div class="line">fun&lt;Tab&gt;</div><div class="line"><span class="keyword">if</span>   &lt;Tab&gt; </div><div class="line">switch &lt;Tab&gt;</div></pre></td></tr></table></figure>
<h3 id="vim-multiple-cursors插件"><a href="#vim-multiple-cursors插件" class="headerlink" title="vim-multiple-cursors插件"></a>vim-multiple-cursors插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">多行操作：ctrl+n  选中光标下的单词，连续按会连续选。</div><div class="line">ctrl+p 放弃一个, 回到上一个，</div><div class="line">ctrl+x 跳过当前选中, 选中下一个，esc退出</div></pre></td></tr></table></figure>
<h3 id="mark-vim插件"><a href="#mark-vim插件" class="headerlink" title="mark.vim插件"></a>mark.vim插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">,m高亮该单词或者取消高亮  </div><div class="line">,n取消高亮   </div><div class="line">,*  </div><div class="line">,<span class="comment"># 下一个最近的标签   </span></div><div class="line">,/  ,?下一个标签    </div><div class="line">,r搜索</div><div class="line"></div><div class="line"><span class="comment">### ctrlp.vim插件</span></div><div class="line">```bash</div><div class="line">Ctrl+p 快速查找文件</div><div class="line">F5 ： 清除当前目录的缓存文件</div><div class="line">&lt;c-j&gt;, &lt;c-k&gt; 在结果列表中上下移动</div><div class="line">&lt;c-t&gt;，&lt;c-v&gt;, &lt;c-x&gt; 在新标签或者分区中打开文件</div><div class="line">&lt;c-n&gt;, &lt;c-p&gt; 选择查询记录</div><div class="line">&lt;c-y&gt; 在当前目录中创建新文件，输入文件名后&lt;c-y&gt;</div><div class="line">&lt;c-z&gt; 选择或者取消选择多个文件， &lt;c-o&gt;打开选择的多个文件</div><div class="line">.. 回车，进入上层目录</div><div class="line">a.js:25 进入a.js文件，并把光标移动到第25行</div><div class="line">&lt;c<span class="_">-f</span>&gt; and &lt;c-b&gt; 循环模式：mru/bfu/fil</div></pre></td></tr></table></figure>
<h3 id="gundo插件"><a href="#gundo插件" class="headerlink" title="gundo插件"></a>gundo插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">编辑文件的时光机器：</div><div class="line">&lt;Leader&gt;u 进入</div><div class="line">当前文件 @</div><div class="line">其他文件 o 回车选择</div><div class="line">小p看差异</div><div class="line">大P回放操作</div><div class="line">q 退出。</div></pre></td></tr></table></figure>
<h3 id="taglist-vim插件"><a href="#taglist-vim插件" class="headerlink" title="taglist.vim插件"></a>taglist.vim插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;CR&gt;         跳到光标下tag所定义的位置，用鼠标双击此tag功能也一样（但要在vimrc文件中打开此项功能）</div><div class="line">&lt;Space&gt;    显示光标下tag的原型定义</div><div class="line">o            在一个新打开的窗口中显示光标下tag</div><div class="line">s             更改排序方式，在按名字排序和按出现顺序排序间切换</div><div class="line">x             taglist窗口放大和缩小，方便查看较长的tag</div><div class="line">+            打开一个折叠，同zo</div><div class="line">-             将tag折叠起来，同zc</div><div class="line">*             打开所有的折叠，同zR</div><div class="line">=            将所有tag折叠起来，同zM</div><div class="line">[[            跳到前一个文件</div><div class="line">]]            跳到后一个文件</div><div class="line">q            关闭taglist窗口</div><div class="line">,tl           刷新</div><div class="line">u            更新taglist窗口中的tag</div></pre></td></tr></table></figure>
<h3 id="easymotion-插件"><a href="#easymotion-插件" class="headerlink" title="easymotion 插件"></a>easymotion 插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">,,fa 该行及该行以下所有的 </div><div class="line">a 都将被高亮并标记序号</div><div class="line">,,w 将所有单词都编码  </div><div class="line">,,j  将所有光标下面的单词都编码  </div><div class="line">,,k/h/j  将所有光标上/左/右面的单词都编码 </div><div class="line">/ 输入要查找的单词，Tab寻找，Enter选择</div></pre></td></tr></table></figure>
<h3 id="vim-markdown插件"><a href="#vim-markdown插件" class="headerlink" title="vim-markdown插件"></a>vim-markdown插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">]]下一标题</div><div class="line">[[:上一标题</div><div class="line">][下一子标题</div><div class="line">[]上一子标题 </div><div class="line">]c当前标题</div><div class="line">]u父标题（asdf）</div><div class="line">&lt;leader&gt;h 进入目录</div></pre></td></tr></table></figure>
<h3 id="Marks-Browser插件"><a href="#Marks-Browser插件" class="headerlink" title="Marks-Browser插件"></a>Marks-Browser插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">标记浏览窗口</div><div class="line">&lt;leader&gt;mk打开标记窗口</div><div class="line">d是删除标记</div><div class="line">enter进入标记</div></pre></td></tr></table></figure>
<h3 id="vim-indent-guides插件"><a href="#vim-indent-guides插件" class="headerlink" title="vim-indent-guides插件"></a>vim-indent-guides插件</h3><p>可视化缩进插件：<leader>i 开/关缩进可视化</leader></p>
<h3 id="ShowMarks插件"><a href="#ShowMarks插件" class="headerlink" title="ShowMarks插件"></a>ShowMarks插件</h3><p> 高亮标记位置：,mt打开/关闭   ,mm标记   ,mh清除     ,ma清除缓冲区所有标记</p>
<h3 id="vim-powerline插件"><a href="#vim-powerline插件" class="headerlink" title="vim-powerline插件"></a>vim-powerline插件</h3><p>华丽的状态栏</p>
<h3 id="html5插件"><a href="#html5插件" class="headerlink" title="html5插件"></a>html5插件</h3><p>HTML5插件</p>
<h3 id="skammer-vim-css-color插件"><a href="#skammer-vim-css-color插件" class="headerlink" title="skammer/vim-css-color插件"></a>skammer/vim-css-color插件</h3><p>颜色插件</p>
<h3 id="Winmanager插件"><a href="#Winmanager插件" class="headerlink" title="Winmanager插件"></a>Winmanager插件</h3><p>打开关闭winmanager快捷键为,w</p>
<h3 id="accelerated-smooth-scroll插件"><a href="#accelerated-smooth-scroll插件" class="headerlink" title="accelerated-smooth-scroll插件"></a>accelerated-smooth-scroll插件</h3><p>dubf出现滚动效果</p>
<h3 id="syntastic插件"><a href="#syntastic插件" class="headerlink" title="syntastic插件"></a>syntastic插件</h3><p>在保存文件的时候会出现错误提示</p>
<h3 id="Tabular插件"><a href="#Tabular插件" class="headerlink" title="Tabular插件"></a>Tabular插件</h3><p>等号对齐 :Tab /= ，冒号对齐:Tab /: 等等</p>
<h3 id="closetag插件"><a href="#closetag插件" class="headerlink" title="closetag插件"></a>closetag插件</h3><p>提供标签自动闭合</p>
<h3 id="jsbeautify插件"><a href="#jsbeautify插件" class="headerlink" title="jsbeautify插件"></a>jsbeautify插件</h3><p>  ,f 格式化js代码</p>
<h3 id="repeat-vim插件"><a href="#repeat-vim插件" class="headerlink" title="repeat.vim插件"></a>repeat.vim插件</h3><p>小数点 . 重复上一个命令</p>
<h3 id="molokai插件"><a href="#molokai插件" class="headerlink" title="molokai插件"></a>molokai插件</h3><p>配置颜色</p>
<h3 id="neocomplcache插件"><a href="#neocomplcache插件" class="headerlink" title="neocomplcache插件"></a>neocomplcache插件</h3><p>  js语法自动提示</p>
<h3 id="MatchTag插件"><a href="#MatchTag插件" class="headerlink" title="MatchTag插件"></a>MatchTag插件</h3><p> 高亮两个配对的tag</p>
<h3 id="AutoClose插件"><a href="#AutoClose插件" class="headerlink" title="AutoClose插件"></a>AutoClose插件</h3><p>输入” ‘ ( { [，自动帮你补全剩余半个</p>
<h3 id="suan-vim-instant-markdown插件"><a href="#suan-vim-instant-markdown插件" class="headerlink" title="suan/vim-instant-markdown插件"></a>suan/vim-instant-markdown插件</h3><p>markdown实时预览</p>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-06-24-%E6%88%91%E7%9A%84VIM-%E7%BB%88%E6%9E%81%E9%85%8D%E7%BD%AE%E6%96%B9%E6%A1%88.html">我的VIM 终极配置方案</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;从大学到研究生期间，用过 N 种 IDE，持续使用超过三个月的大概有：&lt;br&gt;VC++6.0, Visual Studio, Eclipse
    
    </summary>
    
      <category term="tool" scheme="http://yanglonglong.com/categories/tool/"/>
    
    
      <category term="VIM" scheme="http://yanglonglong.com/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>使用 JavaScript 玩转正则表达式</title>
    <link href="http://yanglonglong.com/blog/2016-06-20-%E4%BD%BF%E7%94%A8-JavaScript-%E7%8E%A9%E8%BD%AC%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
    <id>http://yanglonglong.com/blog/2016-06-20-使用-JavaScript-玩转正则表达式.html</id>
    <published>2016-06-20T11:41:40.000Z</published>
    <updated>2016-07-23T12:46:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>使用正则已经很久了，边用边查的状态维持了很久，是时候写篇博文总结一下。<br>捎带推广一下自己开发的一个小工具来现在检测正则表达式：<a href="http://yanglonglong.com/tool/regular.html">在线正则表达式测试</a></p>
<p>正则表达式概念：指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串，主要用来验证（前后分别加上^和$）、搜索/替换（\b）。</p>
<h2 id="JavaScript-中的-RegExp-对象"><a href="#JavaScript-中的-RegExp-对象" class="headerlink" title="JavaScript 中的 RegExp 对象"></a>JavaScript 中的 RegExp 对象</h2><h3 id="创建一个正则表达式"><a href="#创建一个正则表达式" class="headerlink" title="创建一个正则表达式"></a>创建一个正则表达式</h3><h4 id="以字面量形式定义正则表达式"><a href="#以字面量形式定义正则表达式" class="headerlink" title="以字面量形式定义正则表达式"></a>以字面量形式定义正则表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> expression = <span class="regexp">/pattern/</span>flags;</div></pre></td></tr></table></figure>
<p>其中pattern是正则表达式，可以包括字符类、限定符、分组、向前查找以及反向引用。<br>flags用以标明正则表达式的匹配模式(行为)：</p>
<ul>
<li>g——全局模式，表示正则表达式将被用于所有字符串；</li>
<li>i——表示不区分大小写；</li>
<li>m——表示多行模式，到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。</li>
</ul>
<h4 id="以RegExp构造函数定义正则表达式"><a href="#以RegExp构造函数定义正则表达式" class="headerlink" title="以RegExp构造函数定义正则表达式"></a>以RegExp构造函数定义正则表达式</h4><p>它接受两个参数：(要匹配的字符串模式，标志字符串(可选的))<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> expression = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[bc]at"</span>,<span class="string">"i"</span>);</div></pre></td></tr></table></figure></p>
<p>匹配第一个’bat’或者’cat’，不区分大小写。RegExp构造函数的模式参数是字符串，所有元字符必须双重转义。</p>
<p>注意：正则表达式需要转移的字符：() [] {} + * ^ &amp; | ? . \</p>
<h3 id="RegExp实例属性"><a href="#RegExp实例属性" class="headerlink" title="RegExp实例属性"></a>RegExp实例属性</h3><ul>
<li>global：布尔值，表示是否设置了g标志。</li>
<li>ignoreCase：布尔值，表示是否设置了i标志。</li>
<li>multiline：布尔值，表示是否设置了m表示。</li>
<li>lastIndex：整数，表示开始搜索下一个匹配项的字符位置，从0开始。</li>
<li>sourse：正则表达式的字符串表示，按照字面量形式，而非传入构造函数中的字符串模型返回。</li>
</ul>
<h3 id="RegExp实例方法"><a href="#RegExp实例方法" class="headerlink" title="RegExp实例方法"></a>RegExp实例方法</h3><p>两个主要的方法：exec() / test()</p>
<h4 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h4><p>exec()专门为捕获组设计，接受一个参数：(要应用模式的字符串)。<br>如果 exec() 找到了匹配的文本，则返回一个结果数组。否则，返回 null。此数组的第 0 个元素是与正则表达式相匹配的文本，第 1 个元素是与 RegExpObject 的第 1 个子表达式相匹配的文本（如果有的话），第 2 个元素是与 RegExpObject 的第 2 个子表达式相匹配的文本（如果有的话），以此类推。</p>
<p>该数组包括两个额外属性：</p>
<ul>
<li>index——表示匹配项在字符串中的位置</li>
<li>input——表示应用正则表达式的字符串。</li>
</ul>
<p>返回的数组中第一项是与整个模型匹配的字符串，其他项是与模式中捕获组匹配的字符串。</p>
<p>注意：在循环中反复地调用 exec() 方法是<strong>唯一一种获得全局模式的完整模式匹配信息的方法</strong>。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = [];</div><div class="line"><span class="keyword">var</span> str = <span class="string">'yanglonglong'</span>;</div><div class="line"><span class="keyword">var</span> patt = <span class="regexp">/ong/g</span>;</div><div class="line"><span class="keyword">var</span> tmp;</div><div class="line"><span class="keyword">while</span>((tmp = patt.exec(str)) != <span class="literal">null</span>)&#123;</div><div class="line">  result.push(tmp.index + <span class="string">':'</span> + tmp)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(result); <span class="comment">// ["5:ong", "9:ong"]</span></div></pre></td></tr></table></figure></p>
<h4 id="test"><a href="#test" class="headerlink" title="test()"></a>test()</h4><p>test()方法接受一个字符串参数，该模式与该参数匹配的情况下返回true，否则返回false。常用在if语句中。</p>
<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p>toLocaleString()和toString()方法都会返回正则表达式的字面量，与创建正则表达式的方式无关。<br>valueOf()方法返回正则表达式本身。</p>
<h3 id="RegExp构造函数属性"><a href="#RegExp构造函数属性" class="headerlink" title="RegExp构造函数属性"></a>RegExp构造函数属性</h3><p>这些属性适用于作用域中的所有正则表达式，并且基于所执行的最近一次正则表达式操作而变化。</p>
<ul>
<li>input，$_ 最近一次要匹配的字符串。</li>
<li>lastMatch $&amp; 最近一次的匹配项。</li>
<li>lastParen $+ 最近一次匹配的捕获组。</li>
<li>leftContex $^ input字符串中lastMatch之前的文本</li>
<li>multiline $* 布尔值，表示是否所有表达式都使用多行模式。</li>
<li>rightContext $` input字符串中lastMatch之后的文本。</li>
<li>RegExp.1，RegExp.2，……，RegExp.$9 用于存储第一、第二、……、第九个匹配的捕获组。<br>这些属性可以从exec()或test()执行的操作中提取出更具体的信息。</li>
</ul>
<h3 id="JavaScript-对正则支持的局限性"><a href="#JavaScript-对正则支持的局限性" class="headerlink" title="JavaScript 对正则支持的局限性"></a>JavaScript 对正则支持的局限性</h3><p>不支持的特性包括：匹配字符串开始和结尾的\A和\Z锚；向后查找lookbehind；并集和交集类；原子组；Unicode支持（单个字符除外，如\uFFFF）；命名的捕获组；s单行和x无间隔的匹配模式；条件匹配；正则表达式注释。</p>
<h2 id="JavaScript-中字符串对正则的支持"><a href="#JavaScript-中字符串对正则的支持" class="headerlink" title="JavaScript 中字符串对正则的支持"></a>JavaScript 中字符串对正则的支持</h2><p>JavaScript 中字符串有如下几个方法支持正则表达式：</p>
<ul>
<li>replace // 替换与正则表达式匹配的子串</li>
<li>match // 找到一个或多个正则表达式的匹配</li>
<li>split // 把字符串分割为字符串数组</li>
<li>search // ,检索与正则表达式相匹配的值</li>
</ul>
<h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><p>普通替换<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str =<span class="string">"some money"</span>;</div><div class="line">alert(str.replace(<span class="string">"some"</span>,<span class="string">"much"</span>)); <span class="comment">// much money</span></div></pre></td></tr></table></figure></p>
<p>使用正则表达式全局替换<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str =<span class="string">"some money"</span>;</div><div class="line">alert(str.replace(<span class="regexp">/o/g</span>,<span class="string">"O"</span>)); <span class="comment">// sOme mOney</span></div></pre></td></tr></table></figure></p>
<p>在正则中使用捕获<br>$0 表示匹配到的数据；$1 表示第一个捕获组；$2 表示第二个捕获组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">re = <span class="regexp">/(\d)\s(\d)/</span>;</div><div class="line">str = <span class="string">"1234 5678"</span>;</div><div class="line">alert(str.replace(re,<span class="string">"  $2,$1  "</span>)); <span class="comment">// 123  5,4  678</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2c</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> test = <span class="regexp">/([\d]&#123;4&#125;)-([\d]&#123;1,2&#125;)-([\d]&#123;1,2&#125;)/</span>;</div><div class="line">  <span class="keyword">return</span> s.replace(test, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span>($<span class="number">2</span> +<span class="string">"/"</span> + $<span class="number">1</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(f2c(<span class="string">"today: 2011-03-29"</span>)); <span class="comment">// today: 03/2011</span></div><div class="line"><span class="comment">// $0: 2011-03-29</span></div></pre></td></tr></table></figure>
<p>注意，replace 第二个参数可以是字符串，也可以是函数。</p>
<h4 id="replace-第二个参数是字符串"><a href="#replace-第二个参数是字符串" class="headerlink" title="replace 第二个参数是字符串"></a>replace 第二个参数是字符串</h4><p>如果它是字符串，那么每个匹配都将由字符串替换。但是字符串中的 $ 字符具有特定的含义：<br>$1、$2、…、$99：与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。<br>$&amp;/$0：与 regexp 相匹配的子串。<br>$`：位于匹配子串左侧的文本。<br>$’：位于匹配子串右侧的文本。<br>$$：表示 $ 符号。</p>
<h4 id="replace-第二个参数是函数"><a href="#replace-第二个参数是函数" class="headerlink" title="replace 第二个参数是函数"></a>replace 第二个参数是函数</h4><p>函数的第一个参数是匹配模式的字符串。<br>接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。<br>接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。<br>最后一个参数是 stringObject 本身。</p>
<h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p>match()本质上与调用RegExp的exec()方法相同。<br>match()方法接收一个参数（正则表达式或者RegExp对象），返回数组。数组第一项是与整个模式匹配的字符串，之后的每一项保存着与正则表达式中的铺货组匹配的字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'yanglonglong'</span>.match(<span class="regexp">/l(o)n(g)/</span>)</div><div class="line"><span class="comment">// ["long", "o", "g"]</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'yanglongdongw'</span>.match(<span class="regexp">/\wong(?=w)/</span>)</div><div class="line"><span class="comment">// ["dong"]</span></div></pre></td></tr></table></figure>
<p>若是全局匹配，则返回所有匹配结果组成的数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"My name is CJ.Hello everyone!"</span>;</div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/[A-Z]/g</span>;<span class="comment">//匹配所有大写字母</span></div><div class="line"><span class="keyword">var</span> arr = str.match(re);<span class="comment">//返回数组</span></div><div class="line"><span class="comment">// "M", "C", "J", "H"]</span></div></pre></td></tr></table></figure></p>
<h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p>split()基于指定的分隔符将一个字符串分割成多个子字符串，并将结果放在一个数组中返回。<br>分隔符可以是字符串／RegExp对象。<br>split()可以接受第二个可选参数，用于指定数组大小。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">str = <span class="string">"a_db-c"</span>;</div><div class="line">re=<span class="regexp">/[^a-z]/i</span>;</div><div class="line">arr = str.split(re);<span class="comment">//["a","bd","c"];</span></div></pre></td></tr></table></figure></p>
<h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p>在字符串中查找时我们常用indexOf,与之对应用于正则查找的方法是search。<br>search()参数与match()相同，返回字符串中第一个匹配项的索引/-1，始终从字符串开头向后查找。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">str = <span class="string">"My age is 18.Golden age!"</span>;<span class="comment">//年龄不是一定的,我们用indexOf不能查找它的位置</span></div><div class="line">re = <span class="regexp">/\d+/</span>;</div><div class="line">alert(str.search(re));<span class="comment">//返回查找到的字符串开始下标10</span></div></pre></td></tr></table></figure></p>
<h2 id="正则表达式元字符"><a href="#正则表达式元字符" class="headerlink" title="正则表达式元字符"></a>正则表达式元字符</h2><h3 id="简单元字符"><a href="#简单元字符" class="headerlink" title="简单元字符"></a>简单元字符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">.   匹配除换行符以外的任意字符，包括空格</div><div class="line">^   匹配字符串的开始/一行的开始</div><div class="line">$   匹配字符串的结束/一行的结束</div><div class="line">\d  匹配一位数字,等价于[0-9]。</div><div class="line">\b  单词的开头或结尾，也就是单词的分界处（单词的开头\&lt; 单词的结尾\&gt;）</div><div class="line">\w  匹配字母或、数字、下划线,等价于[A-Za-z0-9_]</div><div class="line">\s  匹配任何的空白符，包括换行符</div><div class="line">\z  匹配字符串的末尾</div><div class="line">\g  匹配的起始位置，或者是上一次匹配的结束位置</div><div class="line">\1,\2 反向引用，匹配之前的第一、第二组括号内的字表达式匹配的文本</div><div class="line">（在 js 中使用 <span class="variable">$1</span> <span class="variable">$2</span>）。</div><div class="line"></div><div class="line">\A  字符串开头(类似^，但不受处理多行选项的影响)</div><div class="line">\Z  字符串结尾或行尾(不受处理多行选项的影响)</div><div class="line">\G  当前搜索的开头</div><div class="line">\D  匹配非数字的字符,等价于[^0-9]。</div><div class="line">\B  匹配不是单词的开头或结尾的字符</div><div class="line">\W  匹配不是字母或、数字、下划线的字符</div><div class="line">\S  匹配任何不是空白符的字符</div><div class="line"></div><div class="line">\t  水平制表符</div><div class="line">\v  垂直制表符</div><div class="line">\n  换行符</div><div class="line">\r  回车符</div><div class="line">\a  报警</div><div class="line">\f  换页符</div><div class="line">\e  Escape</div></pre></td></tr></table></figure>
<h3 id="复杂元字符"><a href="#复杂元字符" class="headerlink" title="复杂元字符"></a>复杂元字符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">* 指定*前边的内容可以连续重复使用任意次（&gt;=0）</div><div class="line">+   指定+前边的内容可以连续重复使用任意次（&gt;=1）</div><div class="line">?   指定+前边的内容可以连续重复使用(i == 0 or i ==1)</div><div class="line"></div><div class="line">-  表示一个范围，如[0-9]/[a-z]</div><div class="line">&#123;n&#125;   &#123;&#125;前面的元字符必须连续重复匹配n次</div><div class="line">&#123;n,&#125;  &#123;&#125;前面的元字符必须连续重复匹配n次或者更多次</div><div class="line">&#123;n,m&#125; &#123;&#125;前面的元字符重复匹配要大于n次，小于m次</div><div class="line"></div><div class="line">*? 指定*前边的内容可以连续重复使用任意次（&gt;=0）,但尽可能少，忽略优先</div><div class="line">+? 指定+前边的内容可以连续重复使用任意次（&gt;=1）,但尽可能少</div><div class="line">?? 指定+前边的内容可以连续重复使用(i == 0 or i ==1),但尽可能少</div><div class="line">&#123;n&#125;? &#123;&#125;前面的元字符必须连续重复匹配n次,但尽可能少</div><div class="line">&#123;n,m&#125;? &#123;&#125;前面的元字符重复匹配要大于等于n次，小于m次,但尽可能少</div><div class="line"></div><div class="line"></div><div class="line">[xyz]   字符组，只能匹配一个字符</div><div class="line">[^xyz]  排除型字符组，匹配未包含的任意字符，必须匹配一个字符</div><div class="line">[^x]    匹配除了x以外的任意字符</div><div class="line">[^aeiou] 匹配除了aeiou这几个字母以外的任意字符</div><div class="line">x|y      分隔不同的规则，作为分支条件，匹配x或y，遵循取短原则</div><div class="line"></div><div class="line">(exp)  匹配exp，并捕获文本到自动命名的组里：例如([a-z])([0-9])\1\2，\1代表([a-z])匹配的内容，\2代表([0-9])匹配的内容。</div><div class="line">(?:exp)      非捕获型括号，匹配exp，不捕获匹配的文本，也不给此分组分配组号</div><div class="line">(?<span class="comment">#comment)和#....  包含注释comment ，最好忽略模式里的空白符，从而添加多行注释。</span></div><div class="line">(?=……)    肯定顺序环视      子表达式能够匹配右侧文本</div><div class="line">(?!……)    否定顺序环视    子表达式不能匹配右侧文本</div></pre></td></tr></table></figure>
<h3 id="JavaScript-不支持的元字符"><a href="#JavaScript-不支持的元字符" class="headerlink" title="JavaScript 不支持的元字符"></a>JavaScript 不支持的元字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(?<span class="xml"><span class="tag">&lt;<span class="name">name</span>&gt;</span>exp)  匹配exp，并捕获文本到名称为name的组里</span></div><div class="line">(?'name'exp) 匹配exp，并捕获文本到名称为name的组里</div><div class="line">(?<span class="tag">&lt;<span class="name">=……)</span>   肯定逆序环视   子表达式能够匹配左侧文本</span></div><div class="line">(?&lt;!……)   否定逆序环视    子表达式不能匹配左侧文本</div><div class="line">(?&gt;……)    固化分组</div></pre></td></tr></table></figure>
<h3 id="正则表达式修饰符"><a href="#正则表达式修饰符" class="headerlink" title="正则表达式修饰符"></a>正则表达式修饰符</h3><ul>
<li>i 忽略大小写</li>
<li>g 全局匹配</li>
<li>m 修改^和$在正则表达式中的作用，让它们分别表示行首和行尾，之前是字符串开头和结尾</li>
</ul>
<h2 id="正则表达式举例"><a href="#正则表达式举例" class="headerlink" title="正则表达式举例"></a>正则表达式举例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line">精确地查找net这个单词</div><div class="line">\bnet\b</div><div class="line"></div><div class="line">http后面不远处跟着一个net(不能换行)</div><div class="line">\bhttp\b.*\b.net\b</div><div class="line"></div><div class="line">以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字</div><div class="line">0\d\d-\d\d\d\d\d\d\d\d   化简为0\d&#123;2&#125;-\d&#123;8&#125;</div><div class="line"></div><div class="line">填写的QQ号必须为5位到12位数字</div><div class="line">^\d&#123;5,12&#125;$</div><div class="line"></div><div class="line">匹配刚好6个字符的单词</div><div class="line">\b\w&#123;6&#125;\</div><div class="line"></div><div class="line">匹配以字母a开头的单词</div><div class="line">(\b):\ba\w*\b</div><div class="line"></div><div class="line">匹配1个或更多连续的数字</div><div class="line"> \d+</div><div class="line"></div><div class="line">查找元字符，例如<span class="string">"."</span>  <span class="string">"*"</span>  <span class="string">"\"，要使用转义字符</span></div><div class="line">\.   \*  \\</div><div class="line"></div><div class="line">匹配Windows后面跟1个或更多数字</div><div class="line">Windows\d+</div><div class="line"></div><div class="line">匹配一行的第一个单词(或整个字符串的第一个单词)</div><div class="line">^\w+</div><div class="line"></div><div class="line">匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等</div><div class="line">\(?0\d&#123;2&#125;[) -]?\d&#123;8&#125;或者\(?0\d&#123;2&#125;\)?-?\d&#123;8&#125;</div><div class="line"></div><div class="line">匹配两种以连字号分隔的电话号码：</div><div class="line">一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)</div><div class="line">0\d&#123;2&#125;-\d&#123;8&#125;|0\d&#123;3&#125;-\d&#123;7&#125;</div><div class="line"></div><div class="line">匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，</div><div class="line">区号与本地号间可以用连字号或空格间隔，也可以没有间隔</div><div class="line">\(\d&#123;3&#125;\)\d&#123;8&#125;|\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;3&#125;\d&#123;8&#125;</div><div class="line"></div><div class="line">IP地址匹配表达式</div><div class="line">([01]?\d\d\.|2[0-4]\d\.|25[0-5]\d.)&#123;3&#125;[01]?\d\d|2[0-4]\d|25[0-5]\d</div><div class="line"></div><div class="line">从路径中获取文件名</div><div class="line">[^/]*$</div><div class="line"></div><div class="line">所在路径和文件名</div><div class="line">^(.*)/(.*) <span class="variable">$1</span>和<span class="variable">$2</span>来提取这两者。</div><div class="line"></div><div class="line">去除文本首尾的空白字符</div><div class="line">s/^\s+//;</div><div class="line">s/\s+$//;</div><div class="line">s/\s*(.*?)\s*$/<span class="variable">$1</span>/s</div><div class="line"></div><div class="line">检查HTTP URL：</div><div class="line">^http://([^/:]+)(:(\d+))?(/.*)?$</div><div class="line"></div><div class="line">匹配引号内的字符串</div><div class="line">“[^”]*”</div><div class="line"></div><div class="line">匹配Jan 31之类的日期</div><div class="line">Jan ([12][0-9] | 3[01] | 0? [1-9])</div><div class="line"></div><div class="line">匹配不包含空白符的字符串</div><div class="line">\S+</div><div class="line"></div><div class="line">匹配用尖括号括起来的以a开头的字符串</div><div class="line">&lt;a[^&gt;]+&gt;</div><div class="line"></div><div class="line">匹配温度：</div><div class="line">/^([-+]?[0-9]+(\.[0-9]*)?)([CF])$/   数字保存在<span class="variable">$1</span>，小数保存在<span class="variable">$2</span>，C/F保存在<span class="variable">$3</span>。</div><div class="line"></div><div class="line">单词起始分界符</div><div class="line">(?&lt;!\w)(?=\w)</div><div class="line"></div><div class="line">单词结束分界符</div><div class="line">(?&lt;=\w)(?!\w)</div><div class="line"></div><div class="line">匹配主机名</div><div class="line">[-a-z0-9]+(\.[-a-z0-9]+)*\.(com|edu|info)</div><div class="line"></div><div class="line">匹配连续行</div><div class="line">^\w+=([^\n\\]|\\,)*</div><div class="line"></div><div class="line">网址（URL）</div><div class="line">[a-zA-z]+://[^\s]*</div><div class="line"></div><div class="line">电子邮件(Email)</div><div class="line">\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</div><div class="line"></div><div class="line">QQ号码</div><div class="line">[1-9]\d&#123;4,&#125;</div><div class="line"></div><div class="line">HTML标记(包含内容或自闭合)</div><div class="line">&lt;(.*)(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt;</div><div class="line"></div><div class="line">密码(由数字/大写字母/小写字母/标点符号组成，四种都必有，8位以上)</div><div class="line">(?=^.&#123;8,&#125;$)(?=.*\d)(?=.*\W+)(?=.*[A-Z])(?=.*[a-z])(?!.*\n).*$</div><div class="line"></div><div class="line">日期(年-月-日)</div><div class="line">(\d&#123;4&#125;|\d&#123;2&#125;)-((1[0-2])|(0?[1-9]))-(([12][0-9])|(3[01])|(0?[1-9]))</div><div class="line"></div><div class="line">日期(月/日/年)</div><div class="line">((1[0-2])|(0?[1-9]))/(([12][0-9])|(3[01])|(0?[1-9]))/(\d&#123;4&#125;|\d&#123;2&#125;)</div><div class="line"></div><div class="line">时间(小时:分钟, 24小时制)</div><div class="line">((1|0?)[0-9]|2[0-3]):([0-5][0-9])</div><div class="line"></div><div class="line">汉字(字符)</div><div class="line">[\u4e00-\u9fa5]</div><div class="line"></div><div class="line">中文及全角标点符号(字符)</div><div class="line">[\u3000-\u301e\ufe10-\ufe19\ufe30-\ufe44\ufe50-\ufe6b\uff01-\uffee]</div><div class="line"></div><div class="line">中国大陆固定电话号码</div><div class="line">(\d&#123;4&#125;-|\d&#123;3&#125;-)?(\d&#123;8&#125;|\d&#123;7&#125;)</div><div class="line"></div><div class="line">中国大陆手机号码</div><div class="line">1\d&#123;10&#125;</div><div class="line"></div><div class="line">中国大陆邮政编码</div><div class="line">[1-9]\d&#123;5&#125;</div><div class="line"></div><div class="line">中国大陆身份证号(15位或18位)</div><div class="line">\d&#123;15&#125;(\d\d[0-9xX])?</div><div class="line"></div><div class="line">非负整数(正整数或零)</div><div class="line">\d+</div><div class="line"></div><div class="line">正整数</div><div class="line">[0-9]*[1-9][0-9]*</div><div class="line"></div><div class="line">负整数</div><div class="line">-[0-9]*[1-9][0-9]*</div><div class="line"></div><div class="line">整数</div><div class="line">-?\d+</div><div class="line"></div><div class="line">小数</div><div class="line">(-?\d+)(\.\d+)?</div><div class="line"></div><div class="line">不包含abc的单词</div><div class="line">\b((?!abc)\w)+\b</div></pre></td></tr></table></figure>
<h2 id="向后引用"><a href="#向后引用" class="headerlink" title="向后引用"></a>向后引用</h2><p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。</p>
<p>后向引用用于重复搜索前面某个分组匹配的文本。例如，\1代表分组1匹配的文本。匹配重复的单词，像go go, 或者kitty kitty：</p>
<p>\b(\w+)\b\s+\1\b<br>这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)。</p>
<p>指定表达式组名：(?<word>\w+)或者(?’Word’\w+),这样就把\w+的组名指定为Word了。要反向引用这个分组捕获的内容，可以使用\k<word>,所以上一个例子也可以写成这样：\b(?<word>\w+)\b\s+\k<word>\b。</word></word></word></word></p>
<p>可以使用(?:exp)这样的语法来剥夺一个分组对组号分配的参与权。其中分组0对应整个正则表达式。<br>实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组号</p>
<h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。</p>
<p>断言用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配。</p>
<p><strong>(?=exp)</strong>也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。<br>比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I’m singing while you’re dancing.时，它会匹配sing和danc。</p>
<p><strong>(?&lt;=exp)</strong>也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp。<br>比如(?&lt;=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。</p>
<p>JavaScript连逆序环视（Lookbehind,如(?&lt;=ab)c）都不支持，而perl和python是支持的。</p>
<p>假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：((?&lt;=\d)\d{3})+\b，用它对1234567890进行查找时结果是234567890。</p>
<p>下面这个例子同时使用了这两种断言：(?&lt;=\s)\d+(?=\s)匹配以空白符间隔的数字(再次强调，不包括这些空白符)</p>
<h2 id="负向零宽断言"><a href="#负向零宽断言" class="headerlink" title="负向零宽断言"></a>负向零宽断言</h2><p>引子：只是想要确保某个字符没有出现，但并不想去匹配它。</p>
<p>例如，如果我们想查找这样的单词–它里面出现了字母q,但是q后面跟的不是字母u,我们可以尝试这样：\b\w<em>q[^u]\w</em>\b匹配包含后面不是字母u的字母q的单词。如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错，因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的\w<em>\b将会匹配下一个单词，于是\b\w</em>q[^u]\w*\b就能匹配整个Iraq fighting。</p>
<p>负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题：\b\w<em>q(?!u)\w</em>\b。</p>
<p>零宽度负预测先行断言<strong>(?!exp)</strong>，断言此位置的后面不能匹配表达式exp。<br>例如：\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；<br>\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。</p>
<p>零宽度负回顾后发断言(?&lt;!exp),断言此位置的前面不能匹配表达式exp：(?&lt;![a-z])\d{7}匹配前面不是小写字母的七位数字。<br>(?&lt;=&lt;(\w+)&gt;).*(?=&lt;\/\1&gt;)匹配不包含属性的简单HTML标签内里的内容。</p>
<p>(?&lt;=&lt;(\w+)&gt;)指定了这样的前缀：被尖括号括起来的单词(比如可能是<code>&lt;b&gt;</code>)，然后是.*(任意的字符串),最后是一个后缀(?=&lt;\/\1&gt;)。注意后缀里的\/，它用到了前面提过的字符转义；\1则是一个反向引用，引用的正是捕获的第一组，前面的(\w+)匹配的内容，这样如果前缀实际上是<b>的话，后缀就是</b>了。整个表达式匹配的是<b>和</b>之间的内容(再次提醒，不包括前缀和后缀本身)。</p>
<h2 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h2><p>贪婪匹配：当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。</p>
<p>懒惰匹配：匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。<code>这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。</code></p>
<p>为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配拥有最高的优先权</p>
<p>8.3.7 平衡组/递归匹配<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">有时我们需要匹配像( 100 * ( 50 + 15 ) )这样的可嵌套的层次性结构，这时简单地使用\(.+\)则只会匹配到最左边的左括号和最右边的右括号之间的内容(这里我们讨论的是贪婪模式，懒惰模式也有下面的问题)。假如原来的字符串里的左括号和右括号出现的次数不相等，比如( 5 / ( 3 + 2 ) ) )，那我们的匹配结果里两者的个数也不会相等。有没有办法在这样的字符串里匹配到最长的，配对的括号之间的内容呢？</div><div class="line"></div><div class="line">为了避免(和\(把你的大脑彻底搞糊涂，我们还是用尖括号代替圆括号吧。现在我们的问题变成了如何把xx &lt;aa &lt;bbb&gt; &lt;bbb&gt; aa&gt; yy这样的字符串里，最长的配对的尖括号内的内容捕获出来？</div></pre></td></tr></table></figure></p>
<p>这里需要用到以下的语法构造：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(?<span class="string">'group'</span>) 把捕获的内容命名为group,并压入堆栈(Stack)</div><div class="line">(?<span class="string">'-group'</span>) 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败</div><div class="line">(?(group)yes|no) 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分</div><div class="line">(?!) 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败</div></pre></td></tr></table></figure></p>
<p>我们需要做的是每碰到了左括号，就在压入一个”Open”,每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空－－如果不为空那就证明左括号比右括号多，那匹配就应该失败。正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;                         <span class="comment">#最外层的左括号</span></div><div class="line">    [^&lt;&gt;]*                <span class="comment">#最外层的左括号后面的不是括号的内容</span></div><div class="line">    (</div><div class="line">        (</div><div class="line">            (?<span class="string">'Open'</span>&lt;)    <span class="comment">#碰到了左括号，在黑板上写一个"Open"</span></div><div class="line">            [^&lt;&gt;]*       <span class="comment">#匹配左括号后面的不是括号的内容</span></div><div class="line">        )+</div><div class="line">        (</div><div class="line">            (?<span class="string">'-Open'</span>&gt;)   <span class="comment">#碰到了右括号，擦掉一个"Open"</span></div><div class="line">            [^&lt;&gt;]*        <span class="comment">#匹配右括号后面不是括号的内容</span></div><div class="line">        )+</div><div class="line">    )*</div><div class="line">    (?(Open)(?!))     <span class="comment">#在遇到最外层的右括号前，判断黑板上还有没有没擦掉的"Open"；如果还有，则匹配失败</span></div><div class="line">&gt;                         <span class="comment">#最外层的右括号</span></div></pre></td></tr></table></figure>
<p>平衡组的一个最常见的应用就是匹配HTML,下面这个例子可以匹配嵌套的<code>&lt;div&gt;</code>标签<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div[^</span>&gt;</span>]*&gt;[^<span class="tag">&lt;&gt;</span>]*(((?'Open'<span class="tag">&lt;<span class="name">div[^</span>&gt;</span>]*&gt;)[^<span class="tag">&lt;&gt;</span>]*)+((?'-Open'<span class="tag">&lt;/<span class="name">div</span>&gt;</span>)[^<span class="tag">&lt;&gt;</span>]*)+)*(?(Open)(?!))<span class="tag">&lt;/<span class="name">div</span>&gt;</span>.</div></pre></td></tr></table></figure></p>
<h2 id="高效率的正则表达式"><a href="#高效率的正则表达式" class="headerlink" title="高效率的正则表达式"></a>高效率的正则表达式</h2><ul>
<li>滥用点号、星号和加号是不环保、不负责任的做法。</li>
<li>每使用一个普通括号()而不是非捕获型括号(?:…)，就会保留一部分内存等着你再次访问。养成合理使用(?:…)括号的习惯。</li>
<li>将一条复杂的正则表达式拆分为两条或多条简单的正则表达式，编程难度会降低，运行效率会提升。</li>
<li>例如用来消除行首和行尾空白字符的正则表达式s/^\s+|\s+$//g;，其运行效率理论上要低于s/^\s+//g; s/\s+$//g;</li>
<li>用肯定环视可以模拟固化分组。</li>
<li>正则引擎会回溯到存在尚未尝试的多选分支的地方。</li>
<li>如果使用NFA引擎，必须保证效率（如果能够匹配，必须很快返回匹配结果，若不能匹配，应该尽可能短的时间内报告匹配失败</li>
</ul>
<h2 id="正则表达式匹配规则"><a href="#正则表达式匹配规则" class="headerlink" title="正则表达式匹配规则"></a>正则表达式匹配规则</h2><ol>
<li>优先选择最左端的匹配结果:匹配先从需要查找的字符串的起始位置尝试匹配，并且每一次尝试都要进行到底。</li>
<li>标准量词是匹配优先的:标准匹配量词的结果“可能“并非所有可能中最长的，但它们总是尝试匹配尽可能多的字符，直到匹配上限为止。</li>
</ol>
<p>例如^.<em>([0-9][0-9]) 匹配”about 24 chart”的过程：<br>`.</em>匹配整个字符串之后，第一个[0-9]的匹配要求[.<em>]释放第一个字符”t”(最后的字符)，但是不能让[0-9]匹配，所以.</em>必须继续交还字符，接下来是”r”，直到释放4，但是第二个[0-9]不能匹配，所以再次释放一个字符，就ok，匹配24。`<br>注意，匹配优先的结构只会在被迫的情况下交还字符。</p>
<h2 id="正则引擎"><a href="#正则引擎" class="headerlink" title="正则引擎"></a>正则引擎</h2><ol>
<li>DFA（确定型有穷自动机）</li>
<li>传统的NFA（非确定型有穷自动机）</li>
<li>POSIX NFA</li>
<li>DFA/NFA混合</li>
</ol>
<p>回溯：NFA引擎在依次处理各个子表达式或组成元素，遇到需要在两个可能成功的可能中进行选择的时候，它会选择其一，同时记住另一个（备用状态），以备稍后可能的需要。<br>只要引擎报告匹配失败，它必然尝试了所有的可能。</p>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-06-20-%E4%BD%BF%E7%94%A8-JavaScript-%E7%8E%A9%E8%BD%AC%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html">使用 JavaScript 玩转正则表达式</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;使用正则已经很久了，边用边查的状态维持了很久，是时候写篇博文总结一下。&lt;br&gt;捎带推广一下自己开发的一个小工具来现在检测正则表达式：&lt;a h
    
    </summary>
    
      <category term="tool" scheme="http://yanglonglong.com/categories/tool/"/>
    
    
      <category term="JavaScript" scheme="http://yanglonglong.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用RequireJS来实现代码模块化</title>
    <link href="http://yanglonglong.com/blog/2016-06-11-%E4%BD%BF%E7%94%A8RequireJS%E6%9D%A5%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%9D%97%E5%8C%96.html"/>
    <id>http://yanglonglong.com/blog/2016-06-11-使用RequireJS来实现代码模块化.html</id>
    <published>2016-06-10T16:00:34.000Z</published>
    <updated>2016-07-04T12:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>RequireJS的目标是鼓励代码的模块化，它使用了不同于传统script标签的脚本加载步骤。可以用它来加速、优化代码，但其主要目的还是为了代码的模块化。它是AMD规范最好的实现者之一，也可以用在Node环境中。</p>
<h2 id="与传统方式对比"><a href="#与传统方式对比" class="headerlink" title="与传统方式对比"></a>与传统方式对比</h2><h3 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>body<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">"it works"</span>);</div><div class="line">&#125;</div><div class="line">fun1();</div></pre></td></tr></table></figure>
<p>或者使用了块作用域来申明function防止污染全局变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="string">"it works"</span>);</div><div class="line">    &#125;</div><div class="line">    fun1();</div><div class="line">&#125;)()</div></pre></td></tr></table></figure></p>
<p>alert执行的时候，<span>body</span>并未被显示，当点击确定后，才出现，这就是JS阻塞浏览器渲染导致的结果。<br>由于JS文件存在依赖关系，比如上面的b.js要依赖于a.js,所以务必保证a.js优先引入到页面上来且先加载，要严格保证加载顺序，依赖性最大的文件一定要放到最后加载。</p>
<p>但是当依赖关系很复杂的时候，代码的编写和维护就会变得困难了。</p>
<h3 id="使用RequireJS模块加载"><a href="#使用RequireJS模块加载" class="headerlink" title="使用RequireJS模块加载"></a>使用RequireJS模块加载</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="built_in">require</span>([<span class="string">"a"</span>]);</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>body<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 全局变量，用来定义模块</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"it works"</span>);</div><div class="line">    &#125;</div><div class="line">    fun1();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>实现JS文件的异步加载，防止js加载阻塞页面渲染；<br>使用程序调用的方式加载js，防出现众多的script标签；<br>管理模块之间的依赖性，便于代码的编写和维护。<br>但是加载这个文件也会造成网页失去响应，我们可以加上 defer 和 async这个属性。如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span> <span class="attr">defer</span> <span class="attr">async</span>=<span class="string">"true"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Async属性表明文件需要异步加载，IE不支持这个属性，只支持defer，所以上面把这2个属性都加上。</p>
<p>在 AMD 中，模块的灵活性主要体现在：</p>
<ol>
<li>define 的时候，ID 是可以省略的。</li>
<li>模块声明和引用依赖，可以通过 Relative ID。</li>
</ol>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>require会定义三个变量：define,require,requirejs，其中require === requirejs，一般使用require更简短。<br>define 从名字就可以看出这个api是用来定义一个模块；<br>require 加载依赖模块，并执行加载完后的回调函数。<br>定义模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="string">"it works"</span>);</div><div class="line">    &#125;</div><div class="line">    fun1();</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>加载模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"js/a"</span>]);</div></pre></td></tr></table></figure></p>
<p>注意require中参数是一个数组，即使只有一个依赖，也必须使用数组来定义<br>requir API的第二个参数是callback，一个function，是用来处理加载完毕后的逻辑，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"js/a"</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"load finished"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="加载文件"><a href="#加载文件" class="headerlink" title="加载文件"></a>加载文件</h2><p>之前的例子中加载模块都是本地js，但是大部分情况下网页需要加载的JS可能来自本地服务器、其他网站或CDN(内容分发网络)，这样就不能通过这种方式来加载了。<br>以加载一个jquery库为例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">paths</span> : &#123;</div><div class="line">        <span class="string">"jquery"</span> : [<span class="string">"http://apps.bdimg.com/libs/jquery/2.1.1/jquery.min.js"</span>]</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">require</span>([<span class="string">"jquery"</span>,<span class="string">"js/a"</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"load finished"</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>require.config是用来配置模块加载位置，简单点说就是给模块起一个更短更好记的名字，比如将百度的jquery库地址标记为jquery，这样在require时只需要写[“jquery”]就可以加载该js。<br>本地的js我们也可以这样配置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">paths</span> : &#123;</div><div class="line">        <span class="string">"jquery"</span> : [<span class="string">"http://libs.baidu.com/jquery/2.0.3/jquery"</span>],</div><div class="line">        <span class="string">"a"</span> : <span class="string">"js/a"</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">require</span>([<span class="string">"jquery"</span>,<span class="string">"a"</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"load finished"</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>通过paths的配置会使我们的模块名字更精炼，paths还有一个重要的功能，就是可以配置多个路径，如果远程cdn库没有加载成功，可以加载本地的库，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">paths</span> : &#123;</div><div class="line">        <span class="string">"jquery"</span> : [<span class="string">"http://libs.baidu.com/jquery/2.0.3/jquery"</span>, <span class="string">"js/jquery"</span>],</div><div class="line">        <span class="string">"a"</span> : <span class="string">"js/a"</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">require</span>([<span class="string">"jquery"</span>,<span class="string">"a"</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"load finished"</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这样配置后，当百度的jquery没有加载成功后，会加载本地js目录下的jquery。<br>在使用requirejs时，加载模块时不用写.js后缀的，当然也是不能写后缀<br>上面例子中的callback函数中发现有$参数，这个就是依赖的jquery模块的输出变量，如果你依赖多个模块，可以依次写入多个参数来使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"jquery"</span>,<span class="string">"underscore"</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$, _</span>)</span>&#123;</div><div class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        _.each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],alert);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>如果某个模块不输出变量值，则没有，所以尽量将输出的模块写在前面，防止位置错乱引发误解.</p>
<h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>上面的例子中重复出现了require.config配置，如果每个页面中都加入配置，必然显得十分不雅，requirejs提供了一种叫”主数据”的功能，我们首先创建一个main.js：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">paths</span> : &#123;</div><div class="line">        <span class="string">"jquery"</span> : [<span class="string">"http://libs.baidu.com/jquery/2.0.3/jquery"</span>, <span class="string">"js/jquery"</span>],</div><div class="line">        <span class="string">"a"</span> : <span class="string">"js/a"</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>然后再页面中使用下面的方式来使用requirejs：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"js/main"</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>解释一下，加载requirejs脚本的script标签加入了data-main属性，这个属性指定的js将在加载完reuqire.js后,继续异步加载data-main属性中的js文件，我们把require.config的配置加入到data-main后，就可以使每一个页面都使用这个配置，然后页面中就可以直接使用require来加载所有的短模块名。</p>
<p>data-main还有一个重要的功能，当script标签指定data-main属性时，require会默认的将data-main指定的js为根路径，是什么意思呢？如上面的data-main=”js/main”设定后，我们在使用require([‘jquery’])后(不配置jquery的paths)，require会自动加载js/jquery.js这个文件，而不是jquery.js，<br>相当于默认配置了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">baseUrl</span> : <span class="string">"js"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>为requireJS源码已经默认都是以后缀JS文件结尾的。</p>
<h2 id="自定义模块文件"><a href="#自定义模块文件" class="headerlink" title="自定义模块文件"></a>自定义模块文件</h2><p>RequireJS编写模块不同于其他脚本文件，它良好的使用define来定义一个作用域避免全局空间污染，它可以显示出其依赖关系，并以函数(定义此模块的那个函数)参数的形式将这些依赖进行注入。</p>
<h3 id="常见的RequireJS目录结构"><a href="#常见的RequireJS目录结构" class="headerlink" title="常见的RequireJS目录结构"></a>常见的RequireJS目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">js</div><div class="line">    app               //一般js文件放到app目录下</div><div class="line">        a.js</div><div class="line">        b.js</div><div class="line">        c.js</div><div class="line">    lib               //一般库文件放在lib目录下</div><div class="line">        jquery.js</div><div class="line">    app.js            // 项目的主文件（入口初始化文件）</div><div class="line">    require.js        //require.js</div><div class="line">index.html</div></pre></td></tr></table></figure>
<h3 id="b-js内容"><a href="#b-js内容" class="headerlink" title="b.js内容"></a>b.js内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">add</span> : add</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在app.js里面来调用了b.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'app/b'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">b</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(b.add(<span class="number">1</span>,<span class="number">1</span>));</div><div class="line">&#125;);</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure></p>
<p>加载顺序 requirejs –&gt; app.js –&gt; b.js</p>
<h3 id="a-js内容"><a href="#a-js内容" class="headerlink" title="a.js内容"></a>a.js内容</h3><p>直接返回一个对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">color</span>: <span class="string">"black"</span>,</div><div class="line">        <span class="attr">size</span>: <span class="string">"unisize"</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在app.js里面来调用了a.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"app/a"</span>],<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>全局变量全部使用define函数包围，什么时候需要全局变量的话，直接<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"XX"</span>],<span class="function"><span class="keyword">function</span>(<span class="params">XX</span>)</span>&#123;</div><div class="line">    <span class="comment">//coding</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这样调用下，同时所有的JS都是异步的，并不会堵塞加载。</p>
<h2 id="AMD模块规范"><a href="#AMD模块规范" class="headerlink" title="AMD模块规范"></a>AMD模块规范</h2><p>define(id?, dependencies?, factory); 有四种形式：<br>define(factory);<br>define(id, factory);<br>define(dependencies, factory);<br>define(id, dependencies, factory);</p>
<ul>
<li>id：路径，不能添加 .js 后缀，命名只能是Top-Level ID，能省则省。</li>
<li>factory 可以是 Function 或 Object。如果 factory 是 Function，Loader 将在合适的时候执行 factory，并且把返回值作为模块对象；factory 中也可以通过 exports 和 module.exports 暴露对象，前提是 dependencies 显式或隐式(使用默认值)包含 exports 和 module，以及 factory 形参也需要声明它们。<br>dependencies 参数默认值是 [require, exports, module] ，自定义模块名不能重复，参考第五种写法。</li>
</ul>
<h3 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">mix</span>: <span class="function"><span class="keyword">function</span>(<span class="params">source, target</span>) </span>&#123;&#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="第二种写法-有依赖项"><a href="#第二种写法-有依赖项" class="headerlink" title="第二种写法 有依赖项"></a>第二种写法 有依赖项</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'data'</span>, <span class="string">'ui'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">data, ui</span>) </span>&#123;</div><div class="line">    <span class="comment">// init here</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="第三种写法-直接一个对象"><a href="#第三种写法-直接一个对象" class="headerlink" title="第三种写法 直接一个对象"></a>第三种写法 直接一个对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define(&#123;</div><div class="line">    <span class="attr">data</span>: [],</div><div class="line">    <span class="attr">ui</span>: []</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="第四种写法-具名模块-如下"><a href="#第四种写法-具名模块-如下" class="headerlink" title="第四种写法 具名模块 如下"></a>第四种写法 具名模块 如下</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'index'</span>, [<span class="string">'data'</span>,<span class="string">'base'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">data, base</span>) </span>&#123;</div><div class="line">    <span class="comment">// todo</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>对于第四种写法 具名模块写法我们并不推荐的，因为不书写模块名我们一样可以调用;且在合并代码的时候，我们也可以根据代码自动生成模块名。<br>果我们现在写死了模块名，当某个时候，b.js我要移动到其他目录时候，JS也要跟着改，所以代码维护方面不好，所以不建议书写模块名。</p>
<h3 id="第五种写法-包装模块"><a href="#第五种写法-包装模块" class="headerlink" title="第五种写法 包装模块"></a>第五种写法 包装模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> base = <span class="built_in">require</span>(<span class="string">'base'</span>);</div><div class="line">    exports.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// todo with module base</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'app/a'</span>);</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">    exports.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// todo with module base</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">    <span class="built_in">module</span>.exports = &#123;</div><div class="line">        <span class="attr">color</span>: <span class="string">'red'</span></div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 或者</span></div><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports</span>) </span>&#123;</div><div class="line">    exports.color = <span class="string">'red'</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>书写格式和nodeJS比较像，可以使用require获取模块，使用exports或者module.exports导出API。<br>注意：书写requireJS遵循一个文件一个模块。不要手动写模块名标示。</p>
<h2 id="高级部分"><a href="#高级部分" class="headerlink" title="高级部分"></a>高级部分</h2><h3 id="模块的依赖声明"><a href="#模块的依赖声明" class="headerlink" title="模块的依赖声明"></a>模块的依赖声明</h3><p>方式一： 通过 define 的 dependencies 参数声明依赖</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">define(</div><div class="line">    ['conf', 'ui’],</div><div class="line">    function (conf, ui) &#123;</div><div class="line">        function init() &#123;</div><div class="line">            ui.conf(conf);</div><div class="line">            ui.init();</div><div class="line">        &#125;</div><div class="line">        return init;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>方式二： 在 factory 中通过 require 声明依赖<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">define(</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> ui = <span class="built_in">require</span>(<span class="string">'ui'</span>);</div><div class="line">            ui.conf(<span class="built_in">require</span>(<span class="string">'conf'</span>));</div><div class="line">            ui.init();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> init;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>Loader 可以通过正则分析 factory function 的 toString 结果，抽取出依赖的模块，并加载和初始化它们。通过正则分析的原因是，对于一个浏览器端运行的 Loader，内置 AST 分析的功能，其大小和分析效率一定是不可接受的。</p>
<p>对比：方式二虽然写起来爽，但是性能较差，正则分析需要消耗时间。实践：开发时按方式二写，上线前通过工具打包成方式一。</p>
<h3 id="依赖划分定义"><a href="#依赖划分定义" class="headerlink" title="依赖划分定义"></a>依赖划分定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'a'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'b'</span>);</div><div class="line">    b.init();</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line">define(<span class="string">'b'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>);</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            a.foo();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>模块b可以改写为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'b'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">require</span>(<span class="string">'a'</span>).foo();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li>装载时依赖 - 模块在初始化过程就需要用到的依赖模块，我们认为这种依赖是装载时依赖。a 对 b 的依赖就是装载时依赖。</li>
<li>运行时依赖- 模块在初始化过程不需要用到，但是在后续的运行过程中需要用到的依赖模块，我们认为这种依赖是运行时依赖。b 对 a 的依赖就是运行时依赖。</li>
</ul>
<p>结论：模块需要在其装载时依赖都初始化完后再进行初始化，并不是所有的依赖。<br>对于循环依赖，只要依赖环中任何一条边是运行时依赖，这个环理论上就是活的。如果全部边都是装载时依赖，这个环就是死的。</p>
<h3 id="对于-dependencies-参数中声明的依赖"><a href="#对于-dependencies-参数中声明的依赖" class="headerlink" title="对于 dependencies 参数中声明的依赖"></a>对于 dependencies 参数中声明的依赖</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'a'</span>, [<span class="string">'require'</span>, <span class="string">'b'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require, b</span>) </span>&#123;</div><div class="line">    b.init();</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line">define(<span class="string">'b'</span>, [<span class="string">'require'</span>, <span class="string">'a'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">require</span>(<span class="string">'a'</span>).foo();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果 dependencies 里声明，并且 factory 的形参里包含了，则一定是装载时依赖。如果 factory 的形参里未包含，则说明这个依赖有可能是运行时依赖。</p>
<p>AMD 对于:</p>
<ol>
<li>factory 内部 require 的依赖模块</li>
<li>在 dependencies 中声明但是在 factory 形参列表之外的依赖模块<br>这两种形式声明的依赖，并 没有明确规定执行 factory 初始化的时机。只不过 AMD 玩家通常用 RequireJS，它对于不形成环的依赖模块，都会在自己初始化前先初始化依赖模块。<br>注意：CMD 的 用时定义，确实能让依赖模块初始化的顺序和代码里依赖声明顺序一致。</li>
</ol>
<h3 id="require-的形式"><a href="#require-的形式" class="headerlink" title="require 的形式"></a>require 的形式</h3><ol>
<li>异步 require - require({Array}ids, {Function}callback)：Loader 会负责加载 ids 中的模块，初始化完成，然后调用 callback。调用时传入的参数根据 ids 中声明的模块顺序。</li>
<li>同步 require - require({string}id)：返回一个现有的模块，如果模块不存在，不允许去请求模块，必须抛出一个错误。</li>
</ol>
<h3 id="require-的类型"><a href="#require-的类型" class="headerlink" title="require 的类型"></a>require 的类型</h3><p>在页面中直接使用的 require 是一个全局函数。这就是全局 require<br>在模块的 define 中，通常用到的是局部 require，除非你忘记在 factory 的形参中写 require。<br>区别：局部 require拥有当前所属模块的一些信息，运行的行为受到当前所属模块的影响。所以局部 require可以接受 Relative ID。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'foo/a'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);</div><div class="line">    b.init();</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line">define(<span class="string">'foo/b'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">require</span>(<span class="string">'./a'</span>).foo(); <span class="comment">// 局部的 require 接受 Relative ID</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="模块查找"><a href="#模块查找" class="headerlink" title="模块查找"></a>模块查找</h3><p>Loader 会提供一个配置方法，通常是 require.config。Loader 会用到进行模块查找的配置项有：</p>
<ul>
<li>baseUrl</li>
<li>paths</li>
<li>packages</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">'src'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>通常情况下，模块会根据 ID 到 baseUrl 下寻找。如果模块不在正常的位置，开发者需要配置 paths。如果是 Package，需要配置 packages。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'main'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">main</span>) </span>&#123;</div><div class="line">    main.init();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>假设 main 模块中声明依赖 ./conf，Loader 需要加载其依赖并完成初始化。但是 ./conf 是一个 Relative ID，Loader 需要将其转换成 Top-Level ID: conf。这个过程我们叫做 normalize。在 normalize 后，Loader 会用 Top-Level ID: conf，根据配置，计算出其地址，然后发起请求。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">'src'</span>,</div><div class="line">    <span class="attr">paths</span>: &#123;</div><div class="line">        <span class="string">'bizUI'</span>: <span class="string">'common/ui'</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>require bizUI/TreeView 和 common/ui/TreeView，都会对应到 src/common/ui/TreeView.js 文件。</p>
<h3 id="打包合并的支持"><a href="#打包合并的支持" class="headerlink" title="打包合并的支持"></a>打包合并的支持</h3><p>开发时正常分文件定义模块，上线前通过工具构建打包，页面上启动应用的代码不需要更改。<br>下面是简单的开发时和打包后代码示例（不同工具打包的代码可能会有细微差别，下面代码仅为说明）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 开发时 main 模块，src/main.js</span></div><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> conf = <span class="built_in">require</span>(<span class="string">'./conf'</span>);</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 开发时 conf 模块，src/conf.js</span></div><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">pageSize</span>: <span class="number">30</span></div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打包后的 src/main.js</span></div><div class="line">define(<span class="string">'main'</span>, [<span class="string">'require'</span>, <span class="string">'./conf'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> conf = <span class="built_in">require</span>(<span class="string">'./conf'</span>);</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line">define(<span class="string">'conf'</span>, [], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">pageSize</span>: <span class="number">30</span></div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>多个 define 可以放在一个 script 中。</li>
<li>这些 define 的顺序应该没有任何影响。</li>
</ol>
<h2 id="requireJS配置项"><a href="#requireJS配置项" class="headerlink" title="requireJS配置项"></a>requireJS配置项</h2><h3 id="baseUrl"><a href="#baseUrl" class="headerlink" title="baseUrl"></a>baseUrl</h3><p>指定本地模块的基准目录，即本地模块的路径是相对于那个目录的，该属性通常有requireJS加载时的data-main属性指定。<br>HTML文件中：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span> <span class="attr">defer</span> <span class="attr">async</span>=<span class="string">"true"</span> <span class="attr">data-main</span>=<span class="string">"js/app"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>app.js中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">requirejs.config(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">'js/app'</span></div><div class="line">&#125;);</div><div class="line">requirejs([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>)</span>&#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>由于index.html和js是同一个目录下的，都是放在requireJS文件夹里面的，所以定义baseUrl:’js/app’ 会自动解析成 requireJS/js/app/ 所以requirejs([‘a’,’b’,’c’])的话，会自动到requireJS/js/app/目录下去查找a.js，b.js，c.js.找到了就可以加载出来。</p>
<p>如果未显示设置baseUrl,则默认值是加载require.js的html所处的位置，如果使用了data-main属性的话，则该路径变成了baseUrl。<br>例如，在HTML文件中：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span> <span class="attr">defer</span> <span class="attr">async</span>=<span class="string">"true"</span> <span class="attr">data-main</span>=<span class="string">"js/app"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在app.js中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">requirejs([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>)</span>&#123;</div><div class="line">    <span class="comment">//coding</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>默认情况下是从data-main文件入口去加载js/app.js代码的，但是现在app.js中并没有设置config配置项，所以使用requirejs([‘a’,’b’,’c’],function(a,b,c))的时候会继续加载js下面的a.js,b.js,c.js，如果找到就加载，没有找到就显示404 not found，此例中未找到js/a.js等。</p>
<h3 id="paths"><a href="#paths" class="headerlink" title="paths"></a>paths</h3><p>paths是映射那些不直接放在baseUrl指定的目录下的文件，设置paths的起始位置是相对于baseUrl的，除非该path设置是以”/”开头或含有URL协议(<a href="http://或者https://" target="_blank" rel="external">http://或者https://</a>).<br>例如在app.js中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> requirejs.config(&#123;</div><div class="line">   <span class="attr">baseUrl</span>: <span class="string">'js/lib'</span>,</div><div class="line">   <span class="attr">paths</span>: &#123;</div><div class="line">       <span class="attr">app</span>: <span class="string">'../app'</span></div><div class="line">   &#125;</div><div class="line">&#125;);</div><div class="line">requirejs([<span class="string">'app/a'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">   <span class="comment">//coding</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>可以看到paths是相对于baseUrl配置项生成的，baseUrl:’js/lib’下的所有js文件，但是paths下的 app:’../app’是相对于js/lib下设置的，’..’的解析到js目录下，然后就解析成js/app下，再require([‘app/a’]),就解析到js/app/a.js了。若注释掉baseUrl: ‘js/lib’，则直接把app/a.js放在项目文件requirejs下了，为requirejs/app/a.js找不到。</p>
<h3 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h3><p>Package 是独立的同类功能的代码和资源集合，是一种包装方式。</p>
<ol>
<li>Package 是需要被独立组织的，甚至是独立开发，模块查找规则需要一些配置支持。相应配置项名称为 location。</li>
<li>Package 在使用上绝大多数时候需要一个统一的出口（用于内部组织、整体配置、统一暴露等）。相应的配置项名称为 main。</li>
<li>Package 的名称当然是少不了。相应配置项名称为 name。<br>如：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">packages: [</div><div class="line">    &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'dojo'</span>,</div><div class="line">        <span class="attr">location</span>: <span class="string">'dojo/1.7.1'</span>,</div><div class="line">        <span class="attr">main</span>:<span class="string">'main'</span></div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>某个目录下的所有模块，由于可能被跨项目复用，需要抽取成 Package。</p>
<h3 id="shim参数"><a href="#shim参数" class="headerlink" title="shim参数"></a>shim参数</h3><p>通过require加载的模块一般都需要符合AMD规范即使用define来申明模块，但是部分时候需要加载非AMD规范的js，这时候就需要用到另一个功能：shim。<br>shim解释起来也比较难理解，shim直接翻译为”垫”，其实也是有这层意思的，主要用在两个地方</p>
<h4 id="非AMD模块输出"><a href="#非AMD模块输出" class="headerlink" title="非AMD模块输出"></a>非AMD模块输出</h4><p>将非标准的AMD模块”垫”成可用的模块，例如：在老版本的jquery中，是没有继承AMD规范的，所以不能直接require[“jquery”],这时候就需要shim。<br>比如我要是用underscore类库，但是它并没有实现AMD规范，那我们可以这样配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">shim</span>: &#123;</div><div class="line">        <span class="string">"underscore"</span> : &#123;</div><div class="line">            <span class="attr">exports</span> : <span class="string">"_"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这样配置后，我们就可以在其他模块中引用underscore模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"underscore"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">_</span>)</span>&#123;</div><div class="line">    _.each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], alert);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="插件形式的非AMD模块"><a href="#插件形式的非AMD模块" class="headerlink" title="插件形式的非AMD模块"></a>插件形式的非AMD模块</h4><p>我们经常会用到jquery插件，而且这些插件基本都不符合AMD规范，比如jquery.form插件，这时候就需要将form插件”垫”到jquery中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">shim</span>: &#123;</div><div class="line">        <span class="string">"underscore"</span> : &#123;</div><div class="line">            <span class="attr">exports</span> : <span class="string">"_"</span>;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"jquery.form"</span> : &#123;</div><div class="line">            <span class="attr">deps</span> : [<span class="string">"jquery"</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>也可以简写为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">shim</span>: &#123;</div><div class="line">        <span class="string">"underscore"</span> : &#123;</div><div class="line">            <span class="attr">exports</span> : <span class="string">"_"</span>;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"jquery.form"</span> : [<span class="string">"jquery"</span>]</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这样配置之后我们就可以使用加载插件后的jquery了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config([<span class="string">"jquery"</span>, <span class="string">"jquery.form"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $(<span class="string">"form"</span>).ajaxSubmit(&#123;...&#125;);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="非AMD方式定义的模块"><a href="#非AMD方式定义的模块" class="headerlink" title="非AMD方式定义的模块"></a>非AMD方式定义的模块</h4><p>shim参数解决了使用非AMD方式定义的模块(如jquery插件)及其载入顺序，<br>为那些没有使用define()来声明依赖关系，设置模块的”浏览器全局变量注入”型脚本做依赖和导出配置。<br>在js/app目录下新建文件 depBase.js 代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="string">"a"</span>:<span class="number">11</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>接着在app.js文件里面把代码改成如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">'js/lib'</span>,</div><div class="line">    <span class="attr">shim</span>: &#123;</div><div class="line">        <span class="string">'app/depBase'</span>: [<span class="string">'jquery'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">paths</span>: &#123;</div><div class="line">        <span class="attr">app</span>: <span class="string">'../app'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">require</span>([<span class="string">'app/depBase'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">base</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(base);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>先加载baseUrl中的配置 js/lib下的jquery文件，然后再加载js/app/depBase.js文件。shim这个参数可以解决没有使用define(function(){})这样的文件包围的代码或者一些全局变量注入，可以确保此文件先加载，然后再加载其他文件。</p>
<h4 id="不使用shim这个参数"><a href="#不使用shim这个参数" class="headerlink" title="不使用shim这个参数"></a>不使用shim这个参数</h4><p>在最新版的requirejs2.1.15中(以前的版本我不太清楚)，也可以通过require([‘XX’])来解决<br>在js/app文件下新建global.js文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">names = ziv; <span class="comment">// 创造一个全局变量names</span></div></pre></td></tr></table></figure></p>
<p>其中js/app/depBase.js代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="string">'name'</span>:names</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>app.js代码如下初始化如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">'js/app'</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">require</span>([<span class="string">'global'</span>,<span class="string">'depBase'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">global,base</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(base);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>先global初始化引入全局变量names，接着打印出depBase的返回值{name:ziv}。</p>
<h3 id="Map参数"><a href="#Map参数" class="headerlink" title="Map参数"></a>Map参数</h3><p>Map参数是用来解决同一个模块不同版本的问题，比如在项目开发中，开发初期使用了jquery1.7版本，但是由于业务的需求需要引入jquery1.9以上的版本时候，但是又担心有些是依赖于jquery1.7的代码升级到1.9以上的时候会有问题，因此可以让一部分代码还是依赖于jquery1.7,薪增的代码依赖于jquery1.9.</p>
<p>lib文件下新增jquery1.7.js和 jquery1.9.1.js，现在在入口文件app.js添加如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">requirejs.config(&#123;</div><div class="line">  <span class="attr">map</span>: &#123;</div><div class="line">    <span class="string">'app/a'</span>: &#123;</div><div class="line">      <span class="string">'jquery'</span>: <span class="string">'js/lib/jquery1.7.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">'app/b'</span>: &#123;</div><div class="line">      <span class="string">'jquery'</span>: <span class="string">'js/lib/jquery1.9.1.js'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">require</span>([<span class="string">'app/a'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">jq</span>)</span>&#123;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">require</span>([<span class="string">'app/b'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">jq</span>)</span>&#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>然后在app/a.js添加如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>([<span class="string">'jquery'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在app/b.js添加如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> b = <span class="built_in">require</span>([<span class="string">'jquery'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在app.js中require([‘app/a’],function(jq){  });时候，在加载app/a.js的时候会加载jquery1.7.js文件，在加载app/b.js的时候会加载jquery1.9.1.js。</p>
<p>如果在app.js中把下面这行b.js代码初始化注释掉require([‘app/b’],function(jq){   });那么就只会加载app/a.js及对应的jquery1.7.js</p>
<h3 id="config参数"><a href="#config参数" class="headerlink" title="config参数"></a>config参数</h3><p>config是指需要将配置信息传给一个模块，这些配置往往是application级别的信息，需要一个手段将他们向下传递给模块。<br>在requireJS中，基于requirejs.config()的config配置项来实现。要获取这些信息的模块可以加载特殊的依赖 ”moudle” ,并调用module.config().<br>在项目requirejs下js/app文件下新建一个d.js. 然后在app.js初始化文件加入如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">requirejs.config(&#123;</div><div class="line">    <span class="attr">config</span>: &#123;</div><div class="line">        <span class="string">'app/c'</span>: &#123;</div><div class="line">            <span class="attr">size</span>: <span class="string">'large'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'app/d'</span>: &#123;</div><div class="line">            <span class="attr">color</span>: <span class="string">'blue'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">require</span>([<span class="string">'app/c'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(c);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">require</span>([<span class="string">'app/d'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">dss</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(d);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在c.js里面这样写代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">    <span class="comment">//其值是'large'</span></div><div class="line">    <span class="keyword">var</span> size = <span class="built_in">module</span>.config().size;</div><div class="line">    <span class="keyword">return</span> size;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在控制台下运行可以看到能打印出 large值出来，这说明我们可以通过config配置项来给app/c.js传递一个模块信息，比如如上面的一个对象{size：large}，而在c.js里面直接可以通过module.config()方法来获取size的值。<br>下面我们可以使用一个依赖数组来做同样的事情，如下d.js代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'module'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">module</span>) </span>&#123;</div><div class="line">  <span class="comment">//Will be the value 'blue'</span></div><div class="line">  <span class="keyword">var</span> color = <span class="built_in">module</span>.config().color;</div><div class="line">  <span class="keyword">return</span> color;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在控制台看 也一样可以打印出color值出来。</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="AMD-设计了插件机制"><a href="#AMD-设计了插件机制" class="headerlink" title="AMD 设计了插件机制"></a>AMD 设计了插件机制</h3><p>一个 Loader Plugin Resource 的形式是， ! 分割两个部分，前面部分是插件模块的 ID，后面部分是资源 ID：<br>[Plugin Module ID]![resource ID]<br>大多数资源的加载需要通过网络，所以可能是异步的。 AMD 要求 Plugin 模块必须包含一个 load 方法。<br>load: function (resourceId, require, load, config)</p>
<p>通过一个简单的加载 CSS 的 Plugin 模块，可以更容易明白 load 方法的作用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'css'</span>, &#123;</div><div class="line">    <span class="attr">load</span>: <span class="function"><span class="keyword">function</span> (<span class="params">resourceId, req, load</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</div><div class="line">        link.setAttribute(<span class="string">'rel'</span>, <span class="string">'stylesheet'</span>);</div><div class="line">        link.setAttribute(<span class="string">'type'</span>, <span class="string">'text/css'</span>);</div><div class="line">        link.setAttribute(<span class="string">'href'</span>, req.toUrl(resourceId));</div><div class="line">        <span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</div><div class="line">            || <span class="built_in">document</span>.body;</div><div class="line">        parent.appendChild(link);</div><div class="line">        parent = <span class="literal">null</span>;</div><div class="line">        link = <span class="literal">null</span>;</div><div class="line">        load(<span class="literal">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="requireJS插件"><a href="#requireJS插件" class="headerlink" title="requireJS插件"></a>requireJS插件</h2><p>require.js还提供一系列插件，实现一些特定的功能。<a href="https://github.com/jrburke/requirejs/wiki/Plugins" target="_blank" rel="external">https://github.com/jrburke/requirejs/wiki/Plugins</a><br>domready插件，可以让回调函数在页面DOM结构加载完成后再运行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'domready!'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">doc</span>)</span>&#123;</div><div class="line"> 　<span class="comment">// called once the DOM is ready</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>text和image插件，则是允许require.js加载文本和图片文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">　　define([</div><div class="line">　　　　<span class="string">'text!review.txt'</span>,</div><div class="line">　　　　<span class="string">'image!cat.jpg'</span></div><div class="line">　　　　],</div><div class="line">　　　　<span class="function"><span class="keyword">function</span>(<span class="params">review,cat</span>)</span>&#123;</div><div class="line">　　　　　　<span class="built_in">console</span>.log(review);</div><div class="line">　　　　　　<span class="built_in">document</span>.body.appendChild(cat);</div><div class="line">　　　　&#125;</div><div class="line">　　);</div></pre></td></tr></table></figure></p>
<p>类似的插件还有json和mdown，用于加载json文件和markdown文件。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="内部机制"><a href="#内部机制" class="headerlink" title="内部机制"></a>内部机制</h3><p>RequireJS加载的每个模块作为script Tag，使用head.appendChild()方法。<br>在模块的定义时，requireJS等到所有的依赖都加载完毕，会为函数的调用计算出正确的顺序，然后在函数中通过正确的顺序进行调用。</p>
<h3 id="requireJS函数增加了第三个参数errbacks"><a href="#requireJS函数增加了第三个参数errbacks" class="headerlink" title="requireJS函数增加了第三个参数errbacks"></a>requireJS函数增加了第三个参数errbacks</h3><p>在入口文件app.js下增加代码，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'b'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(b);</div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    alert(arr);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>加载b模块，正常是app/b，这里故意写错，会执行到第二个回调函数进去到alert框。</p>
<h3 id="在模块载入失败回调中可以使用undef函数移除模块的注册"><a href="#在模块载入失败回调中可以使用undef函数移除模块的注册" class="headerlink" title="在模块载入失败回调中可以使用undef函数移除模块的注册"></a>在模块载入失败回调中可以使用undef函数移除模块的注册</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'b'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line">    <span class="comment">//Do something with $ here</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> failedId = err.requireModules &amp;&amp; err.requireModules[<span class="number">0</span>];</div><div class="line">    <span class="keyword">if</span> (failedId === <span class="string">'b'</span>) &#123;</div><div class="line">        requirejs.undef(failedId);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>－ 开发时，模块声明不要写 ID<br>－ 模块划分应尽可能细粒度<br>－ 在 factory 中使用 require 引用依赖模块，不要写 dependencies 参数<br>－ 对于要使用的依赖模块，即用即 require：可以有效避免出现死循环依赖；阅读和维护成本低。<br>－ 对于 package 依赖，require 使用 Top-Level ID；对于相同功能模块群组下的依赖，require 使用 Relative ID： var conf = require(‘./conf’);<br>－ 模块的资源引用，在 factory 头部声明<br>    － require(‘css!./list.css’);<br>    － require(‘tpl!./list.tpl.html’);<br>－ 不要使用 paths：配置了 paths 时不同 ID 的模块可能对应到同一个 define － 文件。在一个系统里，同一个文件对应到多个模块，这种二义很容易导致难以理解的，并且会留下坑。<br>－ 使用第三方库，通过 package 引入：就算所有东西都自己实现，基础的业务无关部分，也应该作为独立的 package。<br>－ package 内部模块对主模块的依赖，不使用 require(‘.’)，使用require(‘main’)<br>－ 可以对环境和模块进行区分，不需要太强迫症，例如jquery，在loader之前引入就ok。<br>－ r.js 是 RequireJS 附带的 optimize 工具，比较成熟，打包构建 AMD 模块的构建产物优秀。<br>－ 因为性能的考虑，线上环境静态资源通过 CDN 分发是一种常用做法。此时，静态资源和页面处于不同的域名下，线上环境的 Loader 配置需要通过 paths，让 Loader 能够正确加载静态资源</p>
<p>在 AMD 中，模块 ID 与路径应该是一个对应关系。怎么破？这里提供两种玩法：<br>第一种方式：将打包后的模块定义合并文件，直接在页面上通过 script 标签引入。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"amd-loader.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"combined-md5.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">require</span>([<span class="string">'main'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">main</span>) </span>&#123;</div><div class="line">    main.init();</div><div class="line">&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>第二种方式：通过 paths 配置映射。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"amd-loader.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">paths</span>: &#123;</div><div class="line">        <span class="string">'main'</span>: <span class="string">'main-file-md5'</span>,</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">require</span>([<span class="string">'main'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">main</span>) </span>&#123;</div><div class="line">    main.init();</div><div class="line">&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在一个 Web 应用，特别是规模较大的 Web 应用中，为了性能最优化的考虑，可能会两种方式结合着玩：</p>
<ul>
<li>系统一开始进入就需要的模块，通过第一种方式载入；需要按需加载的模块，通过第二种方式配置</li>
<li>模块定义合并文件可以根据变更频度打包成多个，充分利用缓存和浏览器的并行下载</li>
<li>paths 配置项是 id prefix 匹配的，工具处理时注意模块文件同名目录下文件的路径处理</li>
<li>需要按需加载的模块数量通常不小，根据 DRY 原则，线上环境 paths 配置一定要用工具在构建过程自动完成</li>
</ul>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Require.js的问题在于各种参数设置过于繁琐，不容易学习，很难完全掌握。<br>而且，实际应用中，往往还需要在服务器端，将所有模块合并后，再统一加载，这多出了很多工作量。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.requirejs.cn/" target="_blank" rel="external">RequireJS中文网</a><br><a href="http://efe.baidu.com/blog/dissecting-amd-what/" target="_blank" rel="external">玩转AMD - 设计思路</a><br><a href="http://efe.baidu.com/blog/dissecting-amd-how/" target="_blank" rel="external">玩转AMD - 应用实践</a></p>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://www.yanglonglong.com/blog/2016-06-11-%E4%BD%BF%E7%94%A8RequireJS%E6%9D%A5%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%9D%97%E5%8C%96.html" target="_blank" rel="external">使用RequireJS来实现代码模块化</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;RequireJS的目标是鼓励代码的模块化，它使用了不同于传统script标签的脚本加载步骤。可以用它来加速、优化代码，但其主要目的还是为了
    
    </summary>
    
      <category term="web" scheme="http://yanglonglong.com/categories/web/"/>
    
    
      <category term="JavaScript" scheme="http://yanglonglong.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>less使用——写给熟悉sass的FEer</title>
    <link href="http://yanglonglong.com/blog/2016-06-10-less%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%86%99%E7%BB%99%E7%86%9F%E6%82%89sass%E7%9A%84FEer.html"/>
    <id>http://yanglonglong.com/blog/2016-06-10-less使用——写给熟悉sass的FEer.html</id>
    <published>2016-06-10T11:33:04.000Z</published>
    <updated>2016-06-10T12:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>对于熟悉sass的人来说，转换到less还是很容易的，毕竟sass比less强大不少。下面按照less与sass的相同点和不同点来分别阐述，实现的主要功能都是类似的，只是语法上有些不同罢了。</p>
<h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>最常用的嵌套功能在sass和less中是相同的，例如：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/** less or sass */</div><div class="line">#header &#123;</div><div class="line">  color: black;</div><div class="line">  .navigation &#123;</div><div class="line">    font-size: 12px;</div><div class="line">  &#125;</div><div class="line">  .logo &#123;</div><div class="line">    width: 300px;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>/* comment */，是有效的，而且能够通过处理并正确输出。<br>// comment，同样可以用但是不能够通过处理也不能被输出。</p>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@import "library"; // library.less</div><div class="line">@import "typo.css";</div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/** sass */</div><div class="line">lighten($color, 10%);</div><div class="line">darken($color, 10%);</div><div class="line"></div><div class="line">/** less */</div><div class="line">lighten(@color, 10%);</div><div class="line">darken(@color, 10%);</div></pre></td></tr></table></figure>
<h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>sass安装较为复杂，需要先安装ruby环境，再通过dem安装sass。<br>less安装则非常简单，只需要：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm i less -g</div></pre></td></tr></table></figure></p>
<h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>sass中定义变量使用 $ 符号，less中定义变量使用 @ 符号。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/**  less */</div><div class="line">@nice-blue: #5B83AD;</div><div class="line">@light-blue: @nice-blue + #111;</div><div class="line"></div><div class="line">#header &#123;</div><div class="line">  color: @light-blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="less中在选择器中使用变量"><a href="#less中在选择器中使用变量" class="headerlink" title="less中在选择器中使用变量"></a>less中在选择器中使用变量</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@my-selector: banner;</div><div class="line"></div><div class="line">.@&#123;my-selector&#125; &#123;</div><div class="line">  font-weight: bold;</div><div class="line">  line-height: 40px;</div><div class="line">  margin: 0 auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="less中使用url变量"><a href="#less中使用url变量" class="headerlink" title="less中使用url变量"></a>less中使用url变量</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@images: "../img";</div><div class="line"></div><div class="line">body &#123;</div><div class="line">  color: #444;</div><div class="line">  background: url("@&#123;images&#125;/white-sand.png");</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h3><p>sass中使用mixins需要使用@mixin声明，然后使用@include调用。<br>例如：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**  sass */</div><div class="line">@mixin border &#123;</div><div class="line">    border-top: 1px dotted #333;</div><div class="line">&#125;</div><div class="line">article.post &#123;</div><div class="line">    background: #eee;</div><div class="line">    @include border;</div><div class="line">&#125;</div><div class="line">ul.menu &#123;</div><div class="line">    background: #ccc;</div><div class="line">    @include border;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>less中使用mixins则比较简单，直接通过 点. 定义即可。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**  less */</div><div class="line">.border &#123;</div><div class="line">    border-top: 1px dotted #333;</div><div class="line">&#125;</div><div class="line">article.post &#123;</div><div class="line">    background: #eee;</div><div class="line">    .border;</div><div class="line">&#125;</div><div class="line">ul.menu &#123;</div><div class="line">    background: #ccc;</div><div class="line">    .border;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>less在mixins中使用参数：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.border-radius( @radius: 3px ) &#123;</div><div class="line">-webkit-border-radius: @radius;</div><div class="line">border-radius: @radius;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>Sass可以处理无法识别的度量单位并将其输出。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/** sass */</div><div class="line">2in + 3cm + 2pc = 3.514in</div><div class="line"></div><div class="line">/** less */</div><div class="line">2in + 3cm + 2pc = Error</div></pre></td></tr></table></figure></p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>less中的作用域比较正常<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**  less */</div><div class="line">@color: #00c; /* 蓝色 */</div><div class="line">#header &#123;</div><div class="line">    @color: #c00; /* red */</div><div class="line">    border: 1px solid @color; /* 红色边框 */</div><div class="line">&#125;</div><div class="line">#footer &#123;</div><div class="line">    border: 1px solid @color; /* 蓝色边框 */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>sass中，当@color变量变为红色后，代码中，此处之后的该变量的值，将会被重写（成为红色）。</p>
<h3 id="在less中使用javascript"><a href="#在less中使用javascript" class="headerlink" title="在less中使用javascript"></a>在less中使用javascript</h3><p>这个功能目测非常强大！<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**  less */</div><div class="line">@string: `'howdy'.toUpperCase()`; /* @string 变成 'HOWDY' */</div><div class="line"></div><div class="line">/* 你也可以使用前面提到的插值： */</div><div class="line">@string: 'howdy';</div><div class="line">@var: ~`'@&#123;string&#125;'.topUpperCase()`; /* 变为 'HOWDY' */</div><div class="line"></div><div class="line">/* 获取文档的信息 */</div><div class="line">@height = `document.body.clientHeight`;</div></pre></td></tr></table></figure></p>
<h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/** sass */</div><div class="line">p &#123;</div><div class="line">  @if $type == ocean &#123;</div><div class="line">    color: blue;</div><div class="line">  &#125; @else if $type == matador &#123;</div><div class="line">    color: red;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/** less */</div><div class="line">button when (@my-option = true) &#123;</div><div class="line">  color: white;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>在 Less 中，mixin 可以被自己调用。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/** sass */</div><div class="line">@for $i from 1 through 3 &#123;</div><div class="line">  .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/** less */</div><div class="line">.loop(@counter) when (@counter &gt; 0) &#123;</div><div class="line">  .loop((@counter - 1));    // next iteration</div><div class="line">  width: (10px * @counter); // code for each iteration</div><div class="line">&#125;</div><div class="line"></div><div class="line">div &#123;</div><div class="line">  .loop(5); // launch the loop</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://less.bootcss.com/features/" target="_blank" rel="external">less中文</a><br><a href="http://blog.jobbole.com/24671/" target="_blank" rel="external">LESS介绍及其与Sass的差异</a><br><a href="http://www.oschina.net/question/12_44255?sort=default&amp;p=4" target="_blank" rel="external">为您详细比较三个 CSS 预处理器（框架）：Sass、LESS 和 Stylus</a></p>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-06-10-less%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%86%99%E7%BB%99%E7%86%9F%E6%82%89sass%E7%9A%84FEer.html">less使用——写给熟悉sass的FEer</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;对于熟悉sass的人来说，转换到less还是很容易的，毕竟sass比less强大不少。下面按照less与sass的相同点和不同点来分别阐述，
    
    </summary>
    
      <category term="web" scheme="http://yanglonglong.com/categories/web/"/>
    
    
      <category term="CSS" scheme="http://yanglonglong.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>使用Mustache模版引擎</title>
    <link href="http://yanglonglong.com/blog/2016-06-08-%E4%BD%BF%E7%94%A8Mustache%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E.html"/>
    <id>http://yanglonglong.com/blog/2016-06-08-使用Mustache模版引擎.html</id>
    <published>2016-06-08T12:02:19.000Z</published>
    <updated>2016-07-04T10:29:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>之前一直在使用jade模版，写过这篇博文<a href="http://yanglonglong.com/blog/2016-04-26-%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8EJade%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6.html">模版引擎Jade深入研究</a>，并在文章中对比了现在一些主流的模版引擎。现在新部门使用的是Mustache，于是就有了这篇博文，对于使用过Handlebars模版的人来说，语法是很类似的。</p>
<p>注意，本文中因为转义的问题，部分符号使用了中文符号，复制粘贴时注意转换成英文符号。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Web模板引擎是为了使界面与数据分离而产生的，它可以生成特定格式的HTML文档。Mustache是一个logic-less（轻逻辑）模板解析引擎，语法的逻辑比较简单，工作方式是通过通过对象的方式扩展模板标签。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>Mustache 的模板语法很简单，一共有7个：</p>
<ul>
<li>｛{keyName}｝</li>
<li>｛{＃keyName}｝ ｛{／keyName}｝</li>
<li>｛{^keyName}｝ ｛{／keyName}｝</li>
<li>｛{.}｝</li>
<li>｛{ &lt;partials}｝</li>
<li>｛｛{keyName｝}｝</li>
<li>｛{！comments}｝</li>
</ul>
<p>例子：<br>首先引入mustache.js文件，在html中定义模版，在js定义数据并进行渲染。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"mustache.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> data = &#123;</div><div class="line">    <span class="string">"company"</span>: <span class="string">"Apple"</span>,</div><div class="line">    <span class="string">"address"</span>: &#123;</div><div class="line">        <span class="string">"street"</span>: <span class="string">"1 Infinite Loop Cupertino&lt;/br&gt;"</span>,</div><div class="line">        <span class="string">"city"</span>: <span class="string">"California "</span>,</div><div class="line">        <span class="string">"state"</span>: <span class="string">"CA "</span>,</div><div class="line">        <span class="string">"zip"</span>: <span class="string">"95014 "</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"product"</span>: [<span class="string">"Macbook "</span>,<span class="string">"iPhone "</span>,<span class="string">"iPod "</span>,<span class="string">"iPad "</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tpl = <span class="string">'&lt;h1&gt;Hello ｛&#123;company&#125;｝&lt;/h1&gt;'</span>;</div><div class="line"><span class="keyword">var</span> html = Mustache.render(tpl, data);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( html )</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 输出 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Apple<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中，data是数据，tpl是定义的模板，Mustache.render(tpl, data)方法是用于渲染输出最终的HTML代码。</p>
<h3 id="｛-keyName-｝"><a href="#｛-keyName-｝" class="headerlink" title="｛{keyName}｝"></a>｛{keyName}｝</h3><p>keyName表示键名，直接输出与键名匹配的键值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tpl = <span class="string">'｛&#123;company&#125;｝'</span>;</div><div class="line"><span class="keyword">var</span> html = Mustache.render(tpl, data);</div><div class="line"><span class="comment">//输出：</span></div><div class="line">Apple</div></pre></td></tr></table></figure></p>
<h3 id="｛-＃keyName-｝-｛-／keyName-｝"><a href="#｛-＃keyName-｝-｛-／keyName-｝" class="headerlink" title="｛{＃keyName}｝ ｛{／keyName}｝"></a>｛{＃keyName}｝ ｛{／keyName}｝</h3><p>表示区块，它会根据当前上下文中的键值来对区块进行渲染<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tpl = <span class="string">'｛&#123;＃address&#125;｝ &lt;p&gt;｛&#123;street&#125;｝,｛&#123;city&#125;｝,｛&#123;state&#125;｝&lt;/p&gt; ｛&#123;／address&#125;｝'</span>;</div><div class="line"><span class="keyword">var</span> html = Mustache.render(tpl, data);</div><div class="line"><span class="comment">//输出：</span></div><div class="line">&lt;p&gt;<span class="number">1</span> Infinite Loop Cupertino&amp;lt;<span class="regexp">/br&amp;gt;,California,CA&lt;/</span>p&gt;</div></pre></td></tr></table></figure></p>
<p>注意：如果｛{＃keyName}｝ ｛{／keyName}｝中的 keyName 值为 null, undefined, false，空数组，空字符串；则不渲染输出任何内容。</p>
<h3 id="｛-keyName-｝-｛-／keyName-｝"><a href="#｛-keyName-｝-｛-／keyName-｝" class="headerlink" title="｛{^keyName}｝ ｛{／keyName}｝"></a>｛{^keyName}｝ ｛{／keyName}｝</h3><p>当 keyName 值为 null, undefined, false 时才渲染输出该区块内容。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tpl = ｛&#123;^nothing&#125;｝没找到 nothing 键名就会渲染这段｛&#123;／nothing&#125;｝;</div><div class="line"><span class="keyword">var</span> html = Mustache.render(tpl, data);</div><div class="line"><span class="comment">//输出：</span></div><div class="line">没找到 nothing 键名就会渲染这段</div></pre></td></tr></table></figure></p>
<h3 id="｛-｝"><a href="#｛-｝" class="headerlink" title="｛{.}｝"></a>｛{.}｝</h3><p>表示枚举，可以循环输出整个数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tpl = <span class="string">'｛&#123;＃product&#125;｝ &lt;p&gt;｛&#123;.&#125;｝&lt;/p&gt; ｛&#123;／product&#125;｝'</span>;</div><div class="line"><span class="keyword">var</span> html = Mustache.render(tpl, data);</div><div class="line"><span class="comment">//输出：</span></div><div class="line">&lt;p&gt;Macbook &lt;<span class="regexp">/p&gt; &lt;p&gt;iPhone &lt;/</span>p&gt; <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>iPod <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> &lt;p&gt;iPad &lt;<span class="regexp">/p&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="｛-gt-partials-｝"><a href="#｛-gt-partials-｝" class="headerlink" title="｛{&gt;partials}｝"></a>｛{&gt;partials}｝</h3><p>表示子模块，当结构比较复杂时，我们可以使用该语法将复杂的结构拆分成几个小的子模块。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var tpl = "&lt;h1&gt;｛&#123;company&#125;｝&lt;/h1&gt; &lt;ul&gt;｛&#123;&gt;address&#125;｝&lt;/ul&gt;"</div><div class="line">var partials = &#123;address: "｛&#123;＃address&#125;｝&lt;li&gt;｛&#123;street&#125;｝&lt;/li&gt;&lt;li&gt;｛&#123;city&#125;｝&lt;/li&gt;&lt;li&gt;｛&#123;state&#125;｝&lt;/li&gt;&lt;li&gt;｛&#123;zip&#125;｝&lt;/li&gt;｛&#123;／address&#125;｝"&#125;</div><div class="line">var html = Mustache.render(tpl, data, partials);</div><div class="line">//输出：</div><div class="line">&lt;h1&gt;Apple&lt;/h1&gt;</div><div class="line">&lt;ul&gt;&lt;li&gt;1 Infinite Loop Cupertino&amp;lt;/br&amp;gt;&lt;/li&gt;&lt;li&gt;California&lt;/li&gt;&lt;li&gt;CA&lt;/li&gt;&lt;li&gt;95014&lt;/li&gt;&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<h3 id="｛｛-keyName｝-｝"><a href="#｛｛-keyName｝-｝" class="headerlink" title="｛｛{keyName｝}｝"></a>｛｛{keyName｝}｝</h3><p><code>｛{keyName}｝</code> 输出会将等特殊字符转译，如果想保持内容原样输出可以使用<code>｛｛{｝}｝</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tpl = <span class="string">'｛&#123;＃address&#125;｝ &lt;p&gt;｛｛&#123;street｝&#125;｝&lt;/p&gt; ｛&#123;／address&#125;｝'</span></div><div class="line"><span class="comment">//输出：</span></div><div class="line">&lt;p&gt;<span class="number">1</span> Infinite Loop Cupertino&lt;<span class="regexp">/br&gt;&lt;/</span>p&gt;</div></pre></td></tr></table></figure></p>
<h3 id="｛-！comments-｝"><a href="#｛-！comments-｝" class="headerlink" title="｛{！comments}｝"></a>｛{！comments}｝</h3><p>!表示注释，注释后不会渲染输出任何内容。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">｛&#123;！这里是注释&#125;｝</div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="条件式选择是否渲染指定部分"><a href="#条件式选择是否渲染指定部分" class="headerlink" title="条件式选择是否渲染指定部分"></a>条件式选择是否渲染指定部分</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> view = &#123;</div><div class="line">    <span class="attr">person</span>: <span class="literal">false</span></div><div class="line">&#125;;</div><div class="line">show(Mustache.render(<span class="string">"eff｛&#123;＃person&#125;｝abc｛&#123;／person&#125;｝"</span>, view)</div><div class="line"><span class="comment">// 输出：eff</span></div></pre></td></tr></table></figure>
<h3 id="循环输出"><a href="#循环输出" class="headerlink" title="循环输出"></a>循环输出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> view = &#123;</div><div class="line">    <span class="attr">stooges</span>: [</div><div class="line">        &#123; <span class="string">"name"</span>: <span class="string">"Moe"</span> &#125;,</div><div class="line">        &#123; <span class="string">"name"</span>: <span class="string">"Larry"</span> &#125;,</div><div class="line">        &#123; <span class="string">"name"</span>: <span class="string">"Curly"</span> &#125;</div><div class="line">    ]</div><div class="line">&#125;;</div><div class="line">show(Mustache.render(<span class="string">"｛&#123;＃stooges&#125;｝｛&#123;name&#125;｝&lt;br /&gt;｛&#123;／stooges&#125;｝"</span>, view));</div><div class="line">输出：Moe&lt;br /&gt;Larry&lt;br /&gt;Curly&lt;br /&gt;</div></pre></td></tr></table></figure>
<p>如果我们输出的是数组，就需要使用｛{.}｝来替代｛{name}｝，更加方便！</p>
<h3 id="循环输出指定函数处理后返回的值"><a href="#循环输出指定函数处理后返回的值" class="headerlink" title="循环输出指定函数处理后返回的值"></a>循环输出指定函数处理后返回的值</h3><p>对循环进行后期处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> view = &#123;</div><div class="line">    <span class="string">"beatles"</span>: [</div><div class="line">        &#123; <span class="string">"firstname"</span>: <span class="string">"Johh"</span>, <span class="string">"lastname"</span>: <span class="string">"Lennon"</span> &#125;,</div><div class="line">        &#123; <span class="string">"firstname"</span>: <span class="string">"Paul"</span>, <span class="string">"lastname"</span>: <span class="string">"McCartney"</span> &#125;</div><div class="line">    ],</div><div class="line">    <span class="string">"name"</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="keyword">this</span>.lastname;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">show(Mustache.render(<span class="string">"｛&#123;＃beatles&#125;｝｛&#123;name&#125;｝&lt;br /&gt;｛&#123;／beatles&#125;｝"</span>, view));</div><div class="line"><span class="comment">// 输出：JohhLennon&lt;br /&gt;PaulMcCartney</span></div></pre></td></tr></table></figure></p>
<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> view = &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"Tater"</span>,</div><div class="line">    <span class="string">"bold"</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">text, render</span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> render(text) + <span class="string">"&lt;br /&gt;"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">show(Mustache.render(<span class="string">"｛&#123;＃bold&#125;｝｛&#123;name&#125;｝｛&#123;／bold&#125;｝"</span>, view));</div><div class="line"><span class="comment">// 输出：Tater&lt;br /&gt;</span></div></pre></td></tr></table></figure>
<p>自定义函数将原始字符串作为第一个参数，默认的解释器作为第二个参数。</p>
<h2 id="百度品专的扩展"><a href="#百度品专的扩展" class="headerlink" title="百度品专的扩展"></a>百度品专的扩展</h2><p>增加了@index, _index, @first, @last, @odd, @even这6个directives。@index是从0开始计数，_index是从1开始计数。因为在patchData的大部分实现中给_index赋值都是从1开始计数的，为了减少对模版的改动，因此保留了这个实现。<br>例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">&#123;&#123;#options&#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-&#123;&#123;@index&#125;&#125;&#123;&#123;#@first&#125;&#125; first&#123;&#123;/@first&#125;&#125;&#123;&#123;#@last&#125;&#125; last&#123;&#123;/@last&#125;&#125;"</span>&gt;</span>&#123;&#123;_index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">&#123;&#123;/options&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;options&quot;: [</div><div class="line">    &#123;&quot;title&quot;: &quot;hello 1&quot;&#125;,</div><div class="line">    &#123;&quot;title&quot;: &quot;hello 2&quot;&#125;,</div><div class="line">    &#123;&quot;title&quot;: &quot;hello 3&quot;&#125;,</div><div class="line">    &#123;&quot;title&quot;: &quot;hello 4&quot;&#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出的内容是：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 first"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-2"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-3 last"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mustache.github.io/mustache.5.html" target="_blank" rel="external">｛{mustache官方教程}｝</a><br><a href="http://www.iinterest.net/2012/09/12/web-template-engine-mustache/" target="_blank" rel="external">Javascript 语言的模板引擎：Mustache</a><br><a href="http://www.cnblogs.com/yaozhenfa/p/js_mustache.html" target="_blank" rel="external">javascript库之Mustache库使用说明</a></p>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-06-08-%E4%BD%BF%E7%94%A8Mustache%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E.html">使用Mustache模版引擎</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;之前一直在使用jade模版，写过这篇博文&lt;a href=&quot;http://yanglonglong.com/blog/2016-04-26-%
    
    </summary>
    
      <category term="web" scheme="http://yanglonglong.com/categories/web/"/>
    
    
      <category term="HTML" scheme="http://yanglonglong.com/tags/HTML/"/>
    
      <category term="Mustache" scheme="http://yanglonglong.com/tags/Mustache/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript实现散列</title>
    <link href="http://yanglonglong.com/blog/2016-06-07-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E6%95%A3%E5%88%97.html"/>
    <id>http://yanglonglong.com/blog/2016-06-07-使用JavaScript实现散列.html</id>
    <published>2016-06-07T12:22:57.000Z</published>
    <updated>2016-07-10T10:07:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h2 id="散列的抽象数据类型定义"><a href="#散列的抽象数据类型定义" class="headerlink" title="散列的抽象数据类型定义"></a>散列的抽象数据类型定义</h2><p>在散列表上插入、删除和读取数据都非常快，但查找效率较低（二叉树最快）。<br>使用散列表存储数据时，通过一个散列函数将键映射为一个数字（0-散列表长度）。两个键映射为同一值称为碰撞。散列表中的数组长度应该是一个质数，确定数组大小的策略都基于处理碰撞的技术。</p>
<p>需要定义一个类：HashTable类，表示散列表。</p>
<p>散列的应用场景：校验安装文件的完整性、存储和校验用户口令、校验重复提交的消息、作为数据库乐观锁的条件、作为数据库表分区的分区条件等。</p>
<h3 id="HashTable类"><a href="#HashTable类" class="headerlink" title="HashTable类"></a>HashTable类</h3><h4 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h4><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>table</td>
<td style="text-align:center">保存散列表</td>
</tr>
<tr>
<td>value</td>
<td style="text-align:center">线性探测法使用</td>
</tr>
</tbody>
</table>
<h4 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h4><table>
<thead>
<tr>
<th>方法名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>simpleHash</td>
<td style="text-align:center">散列函数</td>
</tr>
<tr>
<td>betterHash</td>
<td style="text-align:center">改进散列函数</td>
</tr>
<tr>
<td>put</td>
<td style="text-align:center">将数据存入散列表</td>
</tr>
<tr>
<td>showDistro</td>
<td style="text-align:center">显示散列表中的数据</td>
</tr>
<tr>
<td>buildChains</td>
<td style="text-align:center">开链法中用来生成二维数组</td>
</tr>
</tbody>
</table>
<h2 id="散列类的实现"><a href="#散列类的实现" class="headerlink" title="散列类的实现"></a>散列类的实现</h2><p>散列函数，若键时整数，最简单的方法是以数组的长度（质数）对键取余。若键是字符串，可以将每个字符的 ASCII 码相加，然后再对数组的长度（质数）对键取余。</p>
<h3 id="实现-HashTable-顶点类："><a href="#实现-HashTable-顶点类：" class="headerlink" title="实现 HashTable 顶点类："></a>实现 HashTable 顶点类：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// HashTable 类的构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.table = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">137</span>);</div><div class="line">    <span class="keyword">this</span>.value = []; <span class="comment">// 线性探测法使用</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 散列化字符串类型的键</span></div><div class="line">HashTable.prototype.simpleHash = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">    [].slice.call(data).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</div><div class="line">        total += data.charCodeAt(index);</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> total % <span class="keyword">this</span>.table.length;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 将数据存入散列表</span></div><div class="line">HashTable.prototype.put = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pos = <span class="keyword">this</span>.simpleHash(data);</div><div class="line">    <span class="keyword">this</span>.table[pos] = data;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 显示散列表中的数据</span></div><div class="line">HashTable.prototype.showDistro = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.table.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (item) &#123;</div><div class="line">            <span class="built_in">console</span>.log(index + <span class="string">': '</span> + item);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="测试散列"><a href="#测试散列" class="headerlink" title="测试散列"></a>测试散列</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someName =  [<span class="string">"David"</span>, <span class="string">"Jennifer"</span>, <span class="string">"Donnie"</span>, <span class="string">"Raymond"</span>,</div><div class="line">                <span class="string">"Cynthia"</span>, <span class="string">"Mike"</span>, <span class="string">"Clayton"</span>, <span class="string">"Danny"</span>, <span class="string">"Jonathan"</span>];</div><div class="line"><span class="keyword">var</span> hTable = <span class="keyword">new</span> HashTable();</div><div class="line">someName.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">    hTable.put(item);</div><div class="line">&#125;);</div><div class="line">hTable.showDistro();</div><div class="line"></div><div class="line"><span class="comment">// 35: Cynthia</span></div><div class="line"><span class="comment">// 45: Clayton</span></div><div class="line"><span class="comment">// 57: Donnie</span></div><div class="line"><span class="comment">// 77: David</span></div><div class="line"><span class="comment">// 95: Danny</span></div><div class="line"><span class="comment">// 116: Mike</span></div><div class="line"><span class="comment">// 132: Jennifer</span></div><div class="line"><span class="comment">// 134: Jonathan</span></div></pre></td></tr></table></figure>
<p>“Clayton” 和 “Raymond” 的散列值碰撞，只有 “Clayton” 存入了散列表。</p>
<h3 id="改进散列函数"><a href="#改进散列函数" class="headerlink" title="改进散列函数"></a>改进散列函数</h3><p>先计算字符串中各字符的 ASCII 码值,不过求和时每次要乘以一个较小的质数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">HashTable.prototype.betterHash = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> H = <span class="number">31</span>; <span class="comment">// 37的话也会有重复</span></div><div class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">    [].slice.call(str).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</div><div class="line">        total += H * total + str.charCodeAt(index);</div><div class="line">    &#125;);</div><div class="line">    total %= <span class="keyword">this</span>.table.length;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(total);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试改进后的散列函数"><a href="#测试改进后的散列函数" class="headerlink" title="测试改进后的散列函数"></a>测试改进后的散列函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">HashTable.prototype.put1 = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pos = <span class="keyword">this</span>.betterHash(data);</div><div class="line">    <span class="keyword">this</span>.table[pos] = data;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">someName.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">    hTable.put1(item);</div><div class="line">&#125;);</div><div class="line">hTable.showDistro();</div><div class="line"></div><div class="line"><span class="comment">// 3: David</span></div><div class="line"><span class="comment">// 25: Raymond</span></div><div class="line"><span class="comment">// 37: Donnie</span></div><div class="line"><span class="comment">// 61: Jonathan</span></div><div class="line"><span class="comment">// 75: Danny</span></div><div class="line"><span class="comment">// 82: Mike</span></div><div class="line"><span class="comment">// 102: Jennifer</span></div><div class="line"><span class="comment">// 130: Clayton</span></div><div class="line"><span class="comment">// 131: Cynthia</span></div></pre></td></tr></table></figure>
<h3 id="散列化整型键"><a href="#散列化整型键" class="headerlink" title="散列化整型键"></a>散列化整型键</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomInt</span>(<span class="params">min, max</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>) + min);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">genStuData</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> num = <span class="string">''</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; j++) &#123; <span class="comment">// 生成学生ID</span></div><div class="line">            num += <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>);</div><div class="line">        &#125;</div><div class="line">        num += getRandomInt(<span class="number">50</span>, <span class="number">100</span>);</div><div class="line">        arr[i] = num;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> students = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</div><div class="line">genStuData(students);</div><div class="line"><span class="built_in">console</span>.log (<span class="string">"Student data: \n"</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; students.length; ++i) &#123;</div><div class="line">    <span class="built_in">console</span>.log(students[i].substring(<span class="number">0</span>,<span class="number">8</span>) + <span class="string">": "</span> + students[i].substring(<span class="number">9</span>));</div><div class="line">&#125;</div><div class="line"><span class="comment">// 26262740: 69</span></div><div class="line"><span class="comment">// 53911761: 91</span></div><div class="line"><span class="comment">// 47997888: 97</span></div><div class="line"><span class="comment">// 03586981: 75</span></div><div class="line"><span class="comment">// 85045015: 53</span></div><div class="line"><span class="comment">// 34160268: 79</span></div><div class="line"><span class="comment">// 75769995: 77</span></div><div class="line"><span class="comment">// 49023337: 51</span></div><div class="line"><span class="comment">// 36220595: 84</span></div><div class="line"><span class="comment">// 17832078: 99</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"\n\nData distribution: \n"</span>);</div><div class="line"><span class="keyword">var</span> hTable = <span class="keyword">new</span> HashTable();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; students.length; ++i) &#123;</div><div class="line">    hTable.put(students[i]);</div><div class="line">&#125;</div><div class="line">hTable.showDistro();</div><div class="line"><span class="comment">// 18: 49023337151</span></div><div class="line"><span class="comment">// 19: 85045015353</span></div><div class="line"><span class="comment">// 27: 26262740369</span></div><div class="line"><span class="comment">// 32: 36220595884</span></div><div class="line"><span class="comment">// 34: 34160268879</span></div><div class="line"><span class="comment">// 40: 03586981875</span></div><div class="line"><span class="comment">// 43: 17832078999</span></div><div class="line"><span class="comment">// 55: 75769995477</span></div><div class="line"><span class="comment">// 58: 47997888297</span></div></pre></td></tr></table></figure>
<p>散列函数再一次产生了碰撞,数组中没有包含所有的数据，使用betterHash的散列效果更好。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; students.length; ++i) &#123;</div><div class="line">    hTable.put1(students[i]);</div><div class="line">&#125;</div><div class="line">hTable.showDistro();</div><div class="line"></div><div class="line"><span class="comment">// 24: 72450713197</span></div><div class="line"><span class="comment">// 32: 30433572750</span></div><div class="line"><span class="comment">// 35: 94559321884</span></div><div class="line"><span class="comment">// 39: 89489872857</span></div><div class="line"><span class="comment">// 40: 19095105057</span></div><div class="line"><span class="comment">// 44: 81937083760</span></div><div class="line"><span class="comment">// 90: 61464688150</span></div><div class="line"><span class="comment">// 92: 49439357690</span></div><div class="line"><span class="comment">// 116: 55931767581</span></div><div class="line"><span class="comment">// 120: 12281933382</span></div></pre></td></tr></table></figure></p>
<h3 id="从散列表中取值"><a href="#从散列表中取值" class="headerlink" title="从散列表中取值"></a>从散列表中取值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">HashTable.prototype.putObj = <span class="function"><span class="keyword">function</span> (<span class="params">key, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pos = <span class="keyword">this</span>.betterHash(key);</div><div class="line">    <span class="keyword">this</span>.table[pos] = data;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 读取散列表中的数据</span></div><div class="line">HashTable.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.table[<span class="keyword">this</span>.betterHash(key)];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="碰撞处理"><a href="#碰撞处理" class="headerlink" title="碰撞处理"></a>碰撞处理</h2><p>当散列函数对于多个输入产生同样的输出时,就产生了碰撞。<br>两种碰撞处理方法：开链法和线性探测法。</p>
<h3 id="开链法"><a href="#开链法" class="headerlink" title="开链法"></a>开链法</h3><p>实现散列表的底层数组中，每个数组元素又是一个新的数据结构，如数组，即使用二维数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">HashTable.prototype.buildChains = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.table.length; i++) &#123;</div><div class="line">        <span class="keyword">this</span>.table[i] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">HashTable.prototype.showDistro1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.table.length; ++i) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.table[i][<span class="number">0</span>] != <span class="literal">undefined</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(i + <span class="string">": "</span> + <span class="keyword">this</span>.table[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">HashTable.prototype.put2 = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pos = <span class="keyword">this</span>.simpleHash(data);</div><div class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.table[pos][index] == <span class="literal">undefined</span>) &#123;</div><div class="line">       <span class="keyword">this</span>.table[pos][index] = data;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>.table[pos][index] != <span class="literal">undefined</span>) &#123;</div><div class="line">            ++index;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.table[pos][index] = data;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="测试开链法"><a href="#测试开链法" class="headerlink" title="测试开链法"></a>测试开链法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hTable = <span class="keyword">new</span> HashTable();</div><div class="line">hTable.buildChains();</div><div class="line"><span class="keyword">var</span> someNames = [<span class="string">"David"</span>, <span class="string">"Jennifer"</span>, <span class="string">"Donnie"</span>, <span class="string">"Raymond"</span>,</div><div class="line">                <span class="string">"Cynthia"</span>, <span class="string">"Mike"</span>, <span class="string">"Clayton"</span>, <span class="string">"Danny"</span>, <span class="string">"Jonathan"</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; someNames.length; ++i) &#123;</div><div class="line">    hTable.put2(someNames[i]);</div><div class="line">&#125;</div><div class="line">hTable.showDistro1();</div><div class="line"></div><div class="line"><span class="comment">// 35: Cynthia</span></div><div class="line"><span class="comment">// 45: Raymond,Clayton</span></div><div class="line"><span class="comment">// 57: Donnie</span></div><div class="line"><span class="comment">// 77: David</span></div><div class="line"><span class="comment">// 95: Danny</span></div><div class="line"><span class="comment">// 116: Mike</span></div><div class="line"><span class="comment">// 132: Jennifer</span></div><div class="line"><span class="comment">// 134: Jonathan</span></div></pre></td></tr></table></figure>
<h3 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h3><p>属于开放寻址散列，当发生碰撞时,线性探测法检查散列表中的下一个位置是否为空。如果为空, 就将数据存入该位置;如果不为空,则继续检查下一个位置,直到找到一个空的位置为止。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">HashTable.prototype.put3 = <span class="function"><span class="keyword">function</span> (<span class="params">key, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pos = <span class="keyword">this</span>.betterHash(key);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.table[pos] == <span class="literal">undefined</span> ) &#123;</div><div class="line">        <span class="keyword">this</span>.table[pos] = key;</div><div class="line">        <span class="keyword">this</span>.values[pos] = data;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>.table[pos] != <span class="literal">undefined</span>) &#123;</div><div class="line">            pos++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.table[pos] = key;</div><div class="line">        <span class="keyword">this</span>.values[pos] = data;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">HashTable.prototype.get3 = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> hash = <span class="keyword">this</span>.betterHash(key);</div><div class="line">    <span class="keyword">if</span>(hash &gt; <span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = hash; <span class="keyword">this</span>.table[hash] != <span class="literal">undefined</span>; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.table[hash] == key) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.values[hash];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="两种方法使用情况"><a href="#两种方法使用情况" class="headerlink" title="两种方法使用情况"></a>两种方法使用情况</h3><p>如果数组的大小是待存储数据个数的 1.5 倍, 那么使用开链法;如果数组的大小是待存储数据的两倍及两倍以上时,那么使用线性探测法。</p>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-06-07-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E6%95%A3%E5%88%97.html">使用JavaScript实现散列</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;h2 id=&quot;散列的抽象数据类型定义&quot;&gt;&lt;a href=&quot;#散列的抽象数据类型定义&quot; class=&quot;headerlink&quot; title=&quot;散列的
    
    </summary>
    
      <category term="算法" scheme="http://yanglonglong.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yanglonglong.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://yanglonglong.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript实现图</title>
    <link href="http://yanglonglong.com/blog/2016-06-04-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E5%9B%BE.html"/>
    <id>http://yanglonglong.com/blog/2016-06-04-使用JavaScript实现图.html</id>
    <published>2016-06-04T15:22:57.000Z</published>
    <updated>2016-07-05T06:46:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h2 id="图的抽象数据类型定义"><a href="#图的抽象数据类型定义" class="headerlink" title="图的抽象数据类型定义"></a>图的抽象数据类型定义</h2><p>需要定义两个类：Vertex类，表示顶点；Graph类，表示图。</p>
<p>图的相关概念：</p>
<ul>
<li>图：由边的集合和店的集合组成</li>
<li>边：由顶点对(v1, v2)定义</li>
<li>有向图：图的顶点对是有序的</li>
<li>路径：由一系列顶点构成</li>
<li>环：指向自身的顶点组成的路径</li>
<li>圈：至少有一条边的路径，且路径的第一个顶点和最后一个顶点相同。</li>
<li>强连通：如果两个顶点之前有路径，那么这两个顶点就是强连通的。如果有向图的所有顶点都是强连通的，那么这个有向图也是强连通的。</li>
</ul>
<p>图的应用场景：对交通流量建模、运输系统建模、局域网和广域网在内的计算机网络建模。</p>
<h3 id="Vertex类"><a href="#Vertex类" class="headerlink" title="Vertex类"></a>Vertex类</h3><h4 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h4><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>label</td>
<td style="text-align:center">标识顶点</td>
</tr>
<tr>
<td>wasVisitied</td>
<td style="text-align:center">顶点是否被访问过</td>
</tr>
</tbody>
</table>
<h3 id="Graph类"><a href="#Graph类" class="headerlink" title="Graph类"></a>Graph类</h3><p>表示图的边的方法称为邻接表，将边存储为由顶点的相邻顶点列表构成的数组，并以此顶点作为索引。</p>
<h4 id="属性定义-1"><a href="#属性定义-1" class="headerlink" title="属性定义"></a>属性定义</h4><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>vertices</td>
<td style="text-align:center">记录顶点的数量</td>
</tr>
<tr>
<td>edges</td>
<td style="text-align:center">记录边的数量</td>
</tr>
<tr>
<td>adj</td>
<td style="text-align:center">邻接表</td>
</tr>
<tr>
<td>marked1</td>
<td style="text-align:center">深度优先搜索，存储已访问过的顶点</td>
</tr>
<tr>
<td>marked2</td>
<td style="text-align:center">广度优先搜索，存储已访问过的顶点</td>
</tr>
<tr>
<td>marked3</td>
<td style="text-align:center">广度优先搜索计算最短路径，存储已访问过的顶点</td>
</tr>
<tr>
<td>edgeTo</td>
<td style="text-align:center">保存从一个顶点到下一个顶点的所有边（计算最短路径）</td>
</tr>
<tr>
<td>vertices</td>
<td style="text-align:center">记录顶点的数量</td>
</tr>
</tbody>
</table>
<h4 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h4><table>
<thead>
<tr>
<th>方法名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>init</td>
<td style="text-align:center">初始化图</td>
</tr>
<tr>
<td>addEdge</td>
<td style="text-align:center">向图中添加一条边(v, w)</td>
</tr>
<tr>
<td>showGraph</td>
<td style="text-align:center">打印所有顶点及其相邻顶点</td>
</tr>
<tr>
<td>dfs</td>
<td style="text-align:center">深度优先搜索函数</td>
</tr>
<tr>
<td>bfs</td>
<td style="text-align:center">广度优先搜索</td>
</tr>
<tr>
<td>bfsPath</td>
<td style="text-align:center">广度优先搜索对应的最短路径</td>
</tr>
<tr>
<td>pathTo</td>
<td style="text-align:center">创建了一个栈,用来存储与指定顶点有共同边的所有顶点</td>
</tr>
<tr>
<td>hasPathTo</td>
<td style="text-align:center">是否有路</td>
</tr>
</tbody>
</table>
<h2 id="图类的实现"><a href="#图类的实现" class="headerlink" title="图类的实现"></a>图类的实现</h2><h3 id="实现-Vertex-顶点类："><a href="#实现-Vertex-顶点类：" class="headerlink" title="实现 Vertex 顶点类："></a>实现 Vertex 顶点类：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vertex</span>(<span class="params">label, wasVisitied</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.label = label; <span class="comment">// 标识顶点</span></div><div class="line">  <span class="keyword">this</span>.wasVisitied = wasVisitied; <span class="comment">// 顶点是否被访问过</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现-Graph-图类"><a href="#实现-Graph-图类" class="headerlink" title="实现 Graph 图类"></a>实现 Graph 图类</h3><p>提供插入删除节点等方法的链表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Graph</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.vertices = v; <span class="comment">// 记录顶点的数量</span></div><div class="line">  <span class="keyword">this</span>.edges = <span class="number">0</span>; <span class="comment">// 记录边的数量</span></div><div class="line">  <span class="keyword">this</span>.adj = []; <span class="comment">// 邻接表</span></div><div class="line">  <span class="keyword">this</span>.marked1 = []; <span class="comment">// 深度优先搜索，存储已访问过的顶点</span></div><div class="line">  <span class="keyword">this</span>.marked2 = []; <span class="comment">// 广度优先搜索，存储已访问过的顶点</span></div><div class="line">  <span class="keyword">this</span>.marked3 = []; <span class="comment">// 广度优先搜索计算最短路径，存储已访问过的顶点</span></div><div class="line">  <span class="keyword">this</span>.edgeTo = []; <span class="comment">// 保存从一个顶点到下一个顶点的所有边（计算最短路径）</span></div><div class="line">  <span class="keyword">this</span>.init();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 初始化图</span></div><div class="line">Graph.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.vertices; i++)&#123;</div><div class="line">    <span class="keyword">this</span>.adj[i] = [];</div><div class="line">    <span class="keyword">this</span>.marked1[i] = <span class="literal">false</span>; <span class="comment">// 所有节点默认未访问过</span></div><div class="line">    <span class="keyword">this</span>.marked2[i] = <span class="literal">false</span>; <span class="comment">// 所有节点默认未访问过</span></div><div class="line">    <span class="keyword">this</span>.marked3[i] = <span class="literal">false</span>; <span class="comment">// 所有节点默认未访问过</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 向图中添加一条边(v, w)</span></div><div class="line">Graph.prototype.addEdge = <span class="function"><span class="keyword">function</span>(<span class="params">v, w</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.adj[v].push(w);</div><div class="line">  <span class="keyword">this</span>.adj[w].push(v);</div><div class="line">  <span class="keyword">this</span>.edges++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 打印所有顶点及其相邻顶点</span></div><div class="line">Graph.prototype.showGraph = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> print = <span class="string">''</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.vertices; i++)&#123;</div><div class="line">    print += <span class="string">'\n'</span> + i + <span class="string">' -&gt; '</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.vertices; j++)&#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.adj[i][j] != <span class="literal">undefined</span>)&#123; <span class="comment">// 注意0是false</span></div><div class="line">        print += <span class="keyword">this</span>.adj[i][j] + <span class="string">' '</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(print);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试图"><a href="#测试图" class="headerlink" title="测试图"></a>测试图</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">g = <span class="keyword">new</span> Graph(<span class="number">5</span>);</div><div class="line">g.addEdge(<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">g.addEdge(<span class="number">0</span>,<span class="number">2</span>);</div><div class="line">g.addEdge(<span class="number">1</span>,<span class="number">3</span>);</div><div class="line">g.addEdge(<span class="number">2</span>,<span class="number">4</span>);</div><div class="line">g.showGraph();</div><div class="line"><span class="comment">// 0 -&gt;  1 2</span></div><div class="line"><span class="comment">// 1 -&gt;  0 3</span></div><div class="line"><span class="comment">// 2 -&gt;  0 4</span></div><div class="line"><span class="comment">// 3 -&gt;  1</span></div><div class="line"><span class="comment">// 4 -&gt;  2</span></div></pre></td></tr></table></figure>
<h2 id="搜索图"><a href="#搜索图" class="headerlink" title="搜索图"></a>搜索图</h2><p>确定从一个指定的顶点可以到达其他哪些顶点</p>
<h3 id="深度优先搜索函数"><a href="#深度优先搜索函数" class="headerlink" title="深度优先搜索函数"></a>深度优先搜索函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Graph.prototype.dfs = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.marked1[v] = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.adj[v] != <span class="literal">undefined</span>)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'访问节点：'</span> + v);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> w <span class="keyword">in</span> <span class="keyword">this</span>.adj[v])&#123;</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.adj[v][w];</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.marked1[currNode])&#123;</div><div class="line">      <span class="keyword">this</span>.dfs(currNode);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">g.dfs(<span class="number">0</span>);</div><div class="line"><span class="comment">// 访问节点：0</span></div><div class="line"><span class="comment">// 访问节点：1</span></div><div class="line"><span class="comment">// 访问节点：3</span></div><div class="line"><span class="comment">// 访问节点：2</span></div><div class="line"><span class="comment">// 访问节点：4</span></div></pre></td></tr></table></figure></p>
<h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><p>从第一个顶点开始，访问尽可能靠近它的顶点，逐层移动。<br>使用队列而不是数据，对已访问过的顶点进行排序。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Graph.prototype.bfs = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> queue = [];</div><div class="line">  <span class="keyword">this</span>.marked2[t] = <span class="literal">true</span>;</div><div class="line">  queue.push(t); <span class="comment">// 添加到队尾</span></div><div class="line">  <span class="keyword">while</span>(queue.length &gt; <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">var</span> v = queue.shift(); <span class="comment">// 从队首移除</span></div><div class="line">    <span class="keyword">if</span>(v != <span class="literal">undefined</span> &amp;&amp; v.toString().length &gt; <span class="number">0</span>)&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'访问节点：'</span> + v);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> w <span class="keyword">in</span> <span class="keyword">this</span>.adj[v])&#123;</div><div class="line">      <span class="keyword">var</span> currNode = <span class="keyword">this</span>.adj[v][w];</div><div class="line">      <span class="keyword">if</span>(!<span class="keyword">this</span>.marked2[currNode])&#123;</div><div class="line">        <span class="keyword">this</span>.marked2[currNode] = <span class="literal">true</span>;</div><div class="line">        queue.push(currNode);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">g.bfs(<span class="number">0</span>);</div><div class="line"><span class="comment">// 访问节点：0</span></div><div class="line"><span class="comment">// 访问节点：1</span></div><div class="line"><span class="comment">// 访问节点：2</span></div><div class="line"><span class="comment">// 访问节点：3</span></div><div class="line"><span class="comment">// 访问节点：4</span></div></pre></td></tr></table></figure></p>
<h3 id="广度优先搜索对应的最短路径"><a href="#广度优先搜索对应的最短路径" class="headerlink" title="广度优先搜索对应的最短路径"></a>广度优先搜索对应的最短路径</h3><p>在执行广度优先搜索时,会自动查找从一个顶点到另一个相连顶点的最短路径。<br>例如,要 查找从顶点 A 到顶点 D 的最短路径,我们首先会查找从 A 到 D 是否有任何一条单边路径, 接着查找两条边的路径,以此类推。这正是广度优先搜索的搜索过程,因此我们可以轻松 地修改广度优先搜索算法,找出最短路径。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">Graph.prototype.bfsPath = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> queue = [];</div><div class="line">  <span class="keyword">this</span>.marked3[t] = <span class="literal">true</span>;</div><div class="line">  queue.push(t); <span class="comment">// 添加到队尾</span></div><div class="line">  <span class="keyword">while</span>(queue.length &gt; <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">var</span> v = queue.shift(); <span class="comment">// 从队首移除</span></div><div class="line">    <span class="keyword">if</span>(v != <span class="literal">undefined</span> &amp;&amp; v.toString().length &gt; <span class="number">0</span>)&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'访问节点：'</span> + v);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> w <span class="keyword">in</span> <span class="keyword">this</span>.adj[v])&#123;</div><div class="line">      <span class="keyword">var</span> currNode = <span class="keyword">this</span>.adj[v][w];</div><div class="line">      <span class="keyword">if</span>(!<span class="keyword">this</span>.marked3[currNode])&#123;</div><div class="line">        <span class="keyword">this</span>.edgeTo[currNode] = v;</div><div class="line">        <span class="keyword">this</span>.marked3[currNode] = <span class="literal">true</span>;</div><div class="line">        queue.push(currNode);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 创建了一个栈,用来存储与指定顶点有共同边的所有顶点</span></div><div class="line">Graph.prototype.pathTo = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.bfsPath(<span class="number">0</span>);</div><div class="line">  <span class="keyword">var</span> source = <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.hasPathTo(v))&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> path = [];</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.edgeTo) <span class="comment">// [ , 0, 0, 1, 2]，4跟2连、3跟1连、2跟0连、1跟0连，四根线。</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = v; i != source; i = <span class="keyword">this</span>.edgeTo[i])&#123;</div><div class="line">    path.push(i);</div><div class="line">  &#125;</div><div class="line">  path.push(source); <span class="comment">// 把起点添加进去</span></div><div class="line">  <span class="keyword">return</span> path; <span class="comment">// [4, 2, 0]</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Graph.prototype.hasPathTo = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.marked3[v];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试最短路径<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'\n最短路径'</span>); <span class="comment">// [4-2-0]</span></div><div class="line"><span class="keyword">var</span> vertext = <span class="number">4</span>;</div><div class="line"><span class="keyword">var</span> paths = g.pathTo(vertext);</div><div class="line"><span class="keyword">while</span>(paths.length &gt; <span class="number">0</span>)&#123;</div><div class="line">  <span class="keyword">if</span>(paths.length &gt; <span class="number">1</span>)&#123;</div><div class="line">    <span class="built_in">console</span>.log(paths.pop() + <span class="string">'-'</span>);</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(paths.pop());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-06-04-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E5%9B%BE.html">使用JavaScript实现图</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;h2 id=&quot;图的抽象数据类型定义&quot;&gt;&lt;a href=&quot;#图的抽象数据类型定义&quot; class=&quot;headerlink&quot; title=&quot;图的抽象数
    
    </summary>
    
      <category term="算法" scheme="http://yanglonglong.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yanglonglong.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://yanglonglong.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript实现集合</title>
    <link href="http://yanglonglong.com/blog/2016-06-02-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E9%9B%86%E5%90%88.html"/>
    <id>http://yanglonglong.com/blog/2016-06-02-使用JavaScript实现集合.html</id>
    <published>2016-06-02T12:26:13.000Z</published>
    <updated>2016-05-30T14:05:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>集合是一种包含不同元素的数据结构：无序、不重复。</p>
<h2 id="集合的抽象数据类型定义"><a href="#集合的抽象数据类型定义" class="headerlink" title="集合的抽象数据类型定义"></a>集合的抽象数据类型定义</h2><h3 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h3><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>dataStore</td>
<td style="text-align:center">初始化一个空数组来保存集合元素</td>
</tr>
</tbody>
</table>
<h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><table>
<thead>
<tr>
<th>方法名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>add</td>
<td style="text-align:center">集合添加元素</td>
</tr>
<tr>
<td>remove</td>
<td style="text-align:center">删除集合中的元素</td>
</tr>
<tr>
<td>contains</td>
<td style="text-align:center">判断集合是否包括元素</td>
</tr>
<tr>
<td>union</td>
<td style="text-align:center">求两个集合的并集</td>
</tr>
<tr>
<td>intersect</td>
<td style="text-align:center">求两个集合的交集</td>
</tr>
<tr>
<td>size</td>
<td style="text-align:center">获取集合的大小</td>
</tr>
<tr>
<td>subSet</td>
<td style="text-align:center">判断集合是否是另一个集合set的子集</td>
</tr>
<tr>
<td>difference</td>
<td style="text-align:center">求两个集合的补集，属于this集合，不属于set集合</td>
</tr>
</tbody>
</table>
<h2 id="实现集合类"><a href="#实现集合类" class="headerlink" title="实现集合类"></a>实现集合类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.datastore = []; <span class="comment">// 初始化一个空数组来保存字典元素</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 集合添加元素</span></div><div class="line"><span class="built_in">Set</span>.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.datastore.indexOf(data) &lt; <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">this</span>.datastore.push(data);</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 删除集合中的元素</span></div><div class="line"><span class="built_in">Set</span>.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pos = <span class="keyword">this</span>.datastore.indexOf(data);</div><div class="line">    <span class="keyword">if</span>(pos &gt; <span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">this</span>.datastore.splice(pos,<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 判断集合是否包括元素</span></div><div class="line"><span class="built_in">Set</span>.prototype.contains = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.datastore.indexOf(data) &gt; <span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 求两个集合的并集</span></div><div class="line"><span class="built_in">Set</span>.prototype.union = <span class="function"><span class="keyword">function</span>(<span class="params">set</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> tempSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.datastore.length; i++)&#123;</div><div class="line">        tempSet.add(<span class="keyword">this</span>.datastore[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; set.datastore.length; j++)&#123;</div><div class="line">        <span class="keyword">if</span>(!tempSet.contains(set.datastore[j]))&#123;</div><div class="line">           tempSet.datastore.push(set.datastore[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tempSet;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 求两个集合的交集</span></div><div class="line"><span class="built_in">Set</span>.prototype.intersect = <span class="function"><span class="keyword">function</span>(<span class="params">set</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> tempSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.datastore.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(set.contains(<span class="keyword">this</span>.datastore[i]))&#123;</div><div class="line">            tempSet.add(<span class="keyword">this</span>.datastore[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tempSet;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取集合的大小</span></div><div class="line"><span class="built_in">Set</span>.prototype.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.datastore.length;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 判断集合是否是另一个集合set的子集</span></div><div class="line"><span class="built_in">Set</span>.prototype.subSet = <span class="function"><span class="keyword">function</span>(<span class="params">set</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.size() &gt; set.size())&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> member <span class="keyword">of</span> <span class="keyword">this</span>.datastore)&#123;</div><div class="line">            <span class="keyword">if</span>(!set.contains(member))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 求两个集合的补集，属于this集合，不属于set集合。</span></div><div class="line"><span class="built_in">Set</span>.prototype.difference = <span class="function"><span class="keyword">function</span>(<span class="params">set</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> tempSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.datastore.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!set.contains(<span class="keyword">this</span>.datastore[i]))&#123;</div><div class="line">            tempSet.add(<span class="keyword">this</span>.datastore[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tempSet;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="简单测试字典类"><a href="#简单测试字典类" class="headerlink" title="简单测试字典类"></a>简单测试字典类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">a.add(<span class="number">1</span>);</div><div class="line">a.add(<span class="number">2</span>);</div><div class="line">a.add(<span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">b.add(<span class="number">2</span>);</div><div class="line">b.add(<span class="number">3</span>);</div><div class="line">b.add(<span class="number">4</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a.union(b)); <span class="comment">// [ 1, 2, 3, 4 ]</span></div><div class="line"><span class="built_in">console</span>.log(a.intersect(b)); <span class="comment">//  [ 2, 3 ]</span></div><div class="line"><span class="built_in">console</span>.log( (a.intersect(b)).subSet(a) ); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(a.difference(b)); <span class="comment">// [ 1 ]</span></div></pre></td></tr></table></figure>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-06-02-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E9%9B%86%E5%90%88.html">使用JavaScript实现集合</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;集合是一种包含不同元素的数据结构：无序、不重复。&lt;/p&gt;
&lt;h2 id=&quot;集合的抽象数据类型定义&quot;&gt;&lt;a href=&quot;#集合的抽象数据类型定
    
    </summary>
    
      <category term="算法" scheme="http://yanglonglong.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yanglonglong.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://yanglonglong.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript实现字典</title>
    <link href="http://yanglonglong.com/blog/2016-06-01-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E5%AD%97%E5%85%B8.html"/>
    <id>http://yanglonglong.com/blog/2016-06-01-使用JavaScript实现字典.html</id>
    <published>2016-06-01T11:43:17.000Z</published>
    <updated>2016-07-05T03:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>字典是一种以键-值对应形式存储的数据结构，主要用途是键取值，利用Object类本身的特性，实现一个Dictionary类。</p>
<h2 id="字典的抽象数据类型定义"><a href="#字典的抽象数据类型定义" class="headerlink" title="字典的抽象数据类型定义"></a>字典的抽象数据类型定义</h2><h3 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h3><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>dataStore</td>
<td style="text-align:center">初始化一个空数组来保存队列元素</td>
</tr>
</tbody>
</table>
<h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><table>
<thead>
<tr>
<th>方法名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>add</td>
<td style="text-align:center">向字典中添加一个元素</td>
</tr>
<tr>
<td>find</td>
<td style="text-align:center">以键为参数，返回和其关联的值</td>
</tr>
<tr>
<td>remove</td>
<td style="text-align:center">从字典中删除键-值</td>
</tr>
<tr>
<td>showAll</td>
<td style="text-align:center">显示字典中所有的键-值对</td>
</tr>
<tr>
<td>count</td>
<td style="text-align:center">统计字典中元素的个数</td>
</tr>
<tr>
<td>clear</td>
<td style="text-align:center">清空字典</td>
</tr>
</tbody>
</table>
<h2 id="实现字典类"><a href="#实现字典类" class="headerlink" title="实现字典类"></a>实现字典类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dictionary</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.datastore = []; <span class="comment">// 初始化一个空数组来保存字典元素</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Dictionary.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.datastore[key] = value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Dictionary.prototype.find = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.datastore[key];</div><div class="line">&#125;</div><div class="line"></div><div class="line">Dictionary.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.datastore[key];</div><div class="line">&#125;</div><div class="line"></div><div class="line">Dictionary.prototype.showAll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//调用Object的keys()方法可以返回传入参数中储存的所有键</span></div><div class="line">    <span class="keyword">var</span> datakeys = [].slice.call(<span class="built_in">Object</span>.keys(<span class="keyword">this</span>.datastore));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> datakeys) &#123; </div><div class="line">        <span class="built_in">console</span>.log(datakeys[i] + <span class="string">" -&gt; "</span> + <span class="keyword">this</span>.datastore[datakeys[i]])</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Dictionary.prototype.count = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 注意：当键的类型为为字符串时，length属性就不管用了</span></div><div class="line">    <span class="keyword">var</span> datakeys = [].slice.call(<span class="built_in">Object</span>.keys(<span class="keyword">this</span>.datastore));</div><div class="line">    <span class="keyword">return</span> datakeys.length;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Dictionary.prototype.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> datakeys = [].slice.call(<span class="built_in">Object</span>.keys(<span class="keyword">this</span>.datastore));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> datakeys) &#123;</div><div class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>.datastore[datakeys[i]];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">## 简单测试字典类</div><div class="line">`<span class="string">``</span>javascript</div><div class="line"><span class="keyword">var</span> pbook = <span class="keyword">new</span> Dictionary();</div><div class="line">pbook.add(<span class="string">"Mike"</span>,<span class="string">"123"</span>);</div><div class="line">pbook.add(<span class="string">"David"</span>,<span class="string">"345"</span>);</div><div class="line">pbook.add(<span class="string">"Cynthia"</span>,<span class="string">"456"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">" David's extension: "</span> + pbook.find(<span class="string">"David"</span>)) ;<span class="comment">// David's extension: 345</span></div><div class="line">pbook.remove(<span class="string">"David"</span>);</div><div class="line">pbook.showAll() <span class="comment">// mike - &gt; 123 Cynthia - &gt; 456</span></div><div class="line"><span class="built_in">console</span>.log(pbook.count()); <span class="comment">// 2</span></div><div class="line">pbook.clear();</div><div class="line"><span class="built_in">console</span>.log(pbook.count()); <span class="comment">// 0</span></div></pre></td></tr></table></figure>
<h2 id="测试当键的类型为为字符串时，length属性就不管用了"><a href="#测试当键的类型为为字符串时，length属性就不管用了" class="headerlink" title="测试当键的类型为为字符串时，length属性就不管用了"></a>测试当键的类型为为字符串时，length属性就不管用了</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nums = [];</div><div class="line">nums[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">nums[<span class="number">1</span>] = <span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(nums.length) <span class="comment">//2</span></div><div class="line"><span class="keyword">var</span> objArr = [];</div><div class="line">objArr[<span class="string">"yll"</span>] = <span class="string">"123"</span>;</div><div class="line">objArr[<span class="string">"ziv"</span>] = <span class="string">"123"</span>;</div><div class="line"><span class="built_in">console</span>.log(objArr.length);<span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log( [].slice.call(<span class="built_in">Object</span>.keys(objArr)).length ) <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-06-01-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E5%AD%97%E5%85%B8.html">使用JavaScript实现字典</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;字典是一种以键-值对应形式存储的数据结构，主要用途是键取值，利用Object类本身的特性，实现一个Dictionary类。&lt;/p&gt;
&lt;h2 
    
    </summary>
    
      <category term="算法" scheme="http://yanglonglong.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yanglonglong.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://yanglonglong.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript实现链表</title>
    <link href="http://yanglonglong.com/blog/2016-06-01-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%A1%A8.html"/>
    <id>http://yanglonglong.com/blog/2016-06-01-使用JavaScript实现链表.html</id>
    <published>2016-06-01T02:22:57.000Z</published>
    <updated>2017-07-30T02:31:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h2 id="链表的抽象数据类型定义"><a href="#链表的抽象数据类型定义" class="headerlink" title="链表的抽象数据类型定义"></a>链表的抽象数据类型定义</h2><p>需要定义两个类：Node类，表示节点；LinkedList类，提供插入删除节点等方法的链表。</p>
<h3 id="Node类"><a href="#Node类" class="headerlink" title="Node类"></a>Node类</h3><h4 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h4><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>element</td>
<td style="text-align:center">节点的内容</td>
</tr>
<tr>
<td>next</td>
<td style="text-align:center">指向节点的下一个节点</td>
</tr>
<tr>
<td>previous</td>
<td style="text-align:center">指向节点的上一个节点（双向链表）</td>
</tr>
</tbody>
</table>
<h3 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h3><h4 id="属性定义-1"><a href="#属性定义-1" class="headerlink" title="属性定义"></a>属性定义</h4><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>head</td>
<td style="text-align:center">头节点</td>
</tr>
</tbody>
</table>
<h4 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h4><table>
<thead>
<tr>
<th>方法名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>find</td>
<td style="text-align:center">遍历链表，查找给定数据</td>
</tr>
<tr>
<td>insert</td>
<td style="text-align:center">在链表中插入节点，需要修改前一个链表的指向，和当前列表的指向</td>
</tr>
<tr>
<td>display</td>
<td style="text-align:center">显示链表中的节点</td>
</tr>
<tr>
<td>findPrevious</td>
<td style="text-align:center">返回节点的前一个节点</td>
</tr>
<tr>
<td>remove</td>
<td style="text-align:center">从链表中删除一个节点</td>
</tr>
<tr>
<td>findLast</td>
<td style="text-align:center">返回链表最后一个节点（双向链表）</td>
</tr>
<tr>
<td>dispReverse</td>
<td style="text-align:center">反序显示链表中的节点（双向链表）</td>
</tr>
</tbody>
</table>
<h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><p>链表的链接方向是单向的，对链表的访问要通过顺序读取从头部开始；其中每个结点都有指针成员变量指向列表中的下一个结点。</p>
<h3 id="实现-Node-节点类："><a href="#实现-Node-节点类：" class="headerlink" title="实现 Node 节点类："></a>实现 Node 节点类：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.element = element;</div><div class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现LinkedList类"><a href="#实现LinkedList类" class="headerlink" title="实现LinkedList类"></a>实现LinkedList类</h3><p>提供插入删除节点等方法的链表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.head = <span class="keyword">new</span> Node(<span class="string">'head'</span>); <span class="comment">// 头节点</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遍历链表，查找给定数据</span></div><div class="line">LinkedList.prototype.find = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.head;</div><div class="line">    <span class="keyword">while</span>(currNode.element != item)&#123;</div><div class="line">        currNode = currNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> currNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 在链表中插入节点，需要修改前一个链表的指向，和当前列表的指向</span></div><div class="line">LinkedList.prototype.insert = <span class="function"><span class="keyword">function</span>(<span class="params">newElement, item</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(newElement);</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.find(item);</div><div class="line">    newNode.next = currNode.next;</div><div class="line">    currNode.next = newNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 显示链表中的节点</span></div><div class="line">LinkedList.prototype.display = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.head;</div><div class="line">    <span class="keyword">while</span>( currNode.next != <span class="literal">null</span> )&#123;</div><div class="line">        <span class="built_in">console</span>.log(currNode.next.element);</div><div class="line">        currNode = currNode.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回节点的前一个节点</span></div><div class="line">LinkedList.prototype.findPrevious = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.head;</div><div class="line">    <span class="keyword">while</span>( currNode.next != <span class="literal">null</span> &amp;&amp; currNode.next.element != item )&#123;</div><div class="line">        currNode = currNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> currNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 从链表中删除一个节点</span></div><div class="line">LinkedList.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> prevNode = <span class="keyword">this</span>.findPrevious(item);</div><div class="line">    <span class="keyword">if</span>( prevNode.next != <span class="literal">null</span> )&#123;</div><div class="line">        <span class="comment">// 让前一个节点指向待删除节点的后一个节点</span></div><div class="line">        prevNode.next = prevNode.next.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试单向链表"><a href="#测试单向链表" class="headerlink" title="测试单向链表"></a>测试单向链表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cities = <span class="keyword">new</span> LinkedList();</div><div class="line">cities.insert(<span class="string">'Wuhan'</span>, <span class="string">'head'</span>);</div><div class="line">cities.insert(<span class="string">'Shanghai'</span>, <span class="string">'Wuhan'</span>);</div><div class="line">cities.insert(<span class="string">'Changchun'</span>, <span class="string">'Shanghai'</span>);</div><div class="line">cities.display(); <span class="comment">// Wuhan Shanghai Changchun</span></div><div class="line">cities.remove(<span class="string">'Shanghai'</span>);</div><div class="line">cities.display(); <span class="comment">// Wuhan Changchun</span></div></pre></td></tr></table></figure>
<h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从头节点到尾节点遍历，从尾节点到头节点遍历都很容易。</p>
<h3 id="与单项列表的不同"><a href="#与单项列表的不同" class="headerlink" title="与单项列表的不同"></a>与单项列表的不同</h3><ol>
<li>在Node中添加previous属性，修改insert、remove方法</li>
<li>添加findLast、dispReverse方法</li>
<li>删除findPrevious方法。</li>
</ol>
<h3 id="实现-Node-节点类：-1"><a href="#实现-Node-节点类：-1" class="headerlink" title="实现 Node 节点类："></a>实现 Node 节点类：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.element = element;</div><div class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.previous = <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现LinkedList类-1"><a href="#实现LinkedList类-1" class="headerlink" title="实现LinkedList类"></a>实现LinkedList类</h3><p>提供插入删除节点等方法的链表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.head = <span class="keyword">new</span> Node(<span class="string">'head'</span>); <span class="comment">// 头节点</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遍历链表，查找给定数据</span></div><div class="line">LinkedList.prototype.find = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.head;</div><div class="line">    <span class="keyword">while</span>(currNode.element != item)&#123;</div><div class="line">        currNode = currNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> currNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回链表最后一个节点</span></div><div class="line">LinkedList.prototype.findLast = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.head;</div><div class="line">    <span class="keyword">while</span>( currNode.next != <span class="literal">null</span> )&#123;</div><div class="line">        currNode = currNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> currNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 在链表中插入节点，需要修改前一个链表的指向，和当前列表的指向</span></div><div class="line">LinkedList.prototype.insert = <span class="function"><span class="keyword">function</span>(<span class="params">newElement, item</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(newElement);</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.find(item);</div><div class="line">    newNode.next = currNode.next;</div><div class="line">    newNode.previous = currNode;</div><div class="line">    currNode.next = newNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 显示链表中的节点</span></div><div class="line">LinkedList.prototype.display = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.head;</div><div class="line">    <span class="keyword">while</span>( currNode.next != <span class="literal">null</span> )&#123;</div><div class="line">        <span class="built_in">console</span>.log(currNode.next.element);</div><div class="line">        currNode = currNode.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 反序显示链表中的节点</span></div><div class="line">LinkedList.prototype.dispReverse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.findLast();</div><div class="line">    <span class="keyword">while</span>( currNode.previous != <span class="literal">null</span> )&#123;</div><div class="line">        <span class="built_in">console</span>.log(currNode.element);</div><div class="line">        currNode = currNode.previous;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 从链表中删除一个节点</span></div><div class="line">LinkedList.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.find(item);</div><div class="line">    <span class="keyword">if</span>( currNode.next != <span class="literal">null</span> )&#123;</div><div class="line">        currNode.previous.next = currNode.next;</div><div class="line">        currNode.next.previous = currNode.previous;</div><div class="line">        currNode.next = <span class="literal">null</span>;</div><div class="line">        currNode.previous = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试双向链表"><a href="#测试双向链表" class="headerlink" title="测试双向链表"></a>测试双向链表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cities = <span class="keyword">new</span> LinkedList();</div><div class="line">cities.insert(<span class="string">'Wuhan'</span>, <span class="string">'head'</span>);</div><div class="line">cities.insert(<span class="string">'Shanghai'</span>, <span class="string">'Wuhan'</span>);</div><div class="line">cities.insert(<span class="string">'Changchun'</span>, <span class="string">'Shanghai'</span>);</div><div class="line">cities.display(); <span class="comment">// Wuhan Shanghai Changchun</span></div><div class="line">cities.remove(<span class="string">'Shanghai'</span>);</div><div class="line">cities.display(); <span class="comment">// Wuhan Changchun</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'sdfsd'</span>)</div><div class="line">cities.dispReverse(); <span class="comment">// Changchun Wuhan</span></div></pre></td></tr></table></figure>
<h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><h3 id="与单项列表的不同-1"><a href="#与单项列表的不同-1" class="headerlink" title="与单项列表的不同"></a>与单项列表的不同</h3><ol>
<li>只需要修改LinkedList类的构造函数，使链表的尾节点指向头节点。</li>
<li>修改display等方法</li>
</ol>
<h3 id="实现-Node-节点类：-2"><a href="#实现-Node-节点类：-2" class="headerlink" title="实现 Node 节点类："></a>实现 Node 节点类：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.element = element;</div><div class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现LinkedList类-2"><a href="#实现LinkedList类-2" class="headerlink" title="实现LinkedList类"></a>实现LinkedList类</h3><p>提供插入删除节点等方法的链表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.head = <span class="keyword">new</span> Node(<span class="string">'head'</span>); <span class="comment">// 头节点</span></div><div class="line">    <span class="keyword">this</span>.head.next = <span class="keyword">this</span>.head;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遍历链表，查找给定数据</span></div><div class="line">LinkedList.prototype.find = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.head;</div><div class="line">    <span class="keyword">while</span>(currNode.element != item)&#123;</div><div class="line">        currNode = currNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> currNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 在链表中插入节点，需要修改前一个链表的指向，和当前列表的指向</span></div><div class="line">LinkedList.prototype.insert = <span class="function"><span class="keyword">function</span>(<span class="params">newElement, item</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(newElement);</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.find(item);</div><div class="line">    newNode.next = currNode.next;</div><div class="line">    currNode.next = newNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 显示链表中的节点</span></div><div class="line">LinkedList.prototype.display = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.head;</div><div class="line">    <span class="keyword">while</span>( currNode.next != <span class="literal">null</span> &amp;&amp; currNode.next.element != <span class="string">'head'</span> )&#123;</div><div class="line">        <span class="built_in">console</span>.log(currNode.next.element);</div><div class="line">        currNode = currNode.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回节点的前一个节点</span></div><div class="line">LinkedList.prototype.findPrevious = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.head;</div><div class="line">    <span class="keyword">while</span>( currNode.next != <span class="literal">null</span> &amp;&amp; currNode.next.element != item  &amp;&amp; currNode.next.element != <span class="string">'head'</span> )&#123;</div><div class="line">        currNode = currNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> currNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 从链表中删除一个节点</span></div><div class="line">LinkedList.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> prevNode = <span class="keyword">this</span>.findPrevious(item);</div><div class="line">    <span class="keyword">if</span>( prevNode.next != <span class="literal">null</span> &amp;&amp; prevNode.next.element != <span class="string">'head'</span> )&#123;</div><div class="line">        <span class="comment">// 让前一个节点指向待删除节点的后一个节点</span></div><div class="line">        prevNode.next = prevNode.next.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试双向链表-1"><a href="#测试双向链表-1" class="headerlink" title="测试双向链表"></a>测试双向链表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cities = <span class="keyword">new</span> LinkedList();</div><div class="line">cities.insert(<span class="string">'Wuhan'</span>, <span class="string">'head'</span>);</div><div class="line">cities.insert(<span class="string">'Shanghai'</span>, <span class="string">'Wuhan'</span>);</div><div class="line">cities.insert(<span class="string">'Changchun'</span>, <span class="string">'Shanghai'</span>);</div><div class="line">cities.display(); <span class="comment">// Wuhan Shanghai Changchun</span></div><div class="line"><span class="built_in">console</span>.log(cities.find(<span class="string">'Changchun'</span>).next.element) <span class="comment">// head</span></div></pre></td></tr></table></figure>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-06-01-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%A1%A8.html">使用JavaScript实现链表</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;h2 id=&quot;链表的抽象数据类型定义&quot;&gt;&lt;a href=&quot;#链表的抽象数据类型定义&quot; class=&quot;headerlink&quot; title=&quot;链表的
    
    </summary>
    
      <category term="算法" scheme="http://yanglonglong.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yanglonglong.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://yanglonglong.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript实现二叉查找树</title>
    <link href="http://yanglonglong.com/blog/2016-05-31-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91.html"/>
    <id>http://yanglonglong.com/blog/2016-05-31-使用JavaScript实现二叉查找树.html</id>
    <published>2016-05-31T15:24:01.000Z</published>
    <updated>2016-05-31T15:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本文主要讲述如何创建一个二叉查找树类。</p>
<ul>
<li>二叉树：每个节点的子节点不允许超过两个。<br>二叉查找树：BinarySearchTree，较小的值保存在左节点，较大的值保存在右节点。</li>
</ul>
<h2 id="实现二叉查找树BST"><a href="#实现二叉查找树BST" class="headerlink" title="实现二叉查找树BST"></a>实现二叉查找树BST</h2><h3 id="Node类：定义节点类"><a href="#Node类：定义节点类" class="headerlink" title="Node类：定义节点类"></a>Node类：定义节点类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data, left, right</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.data = data;</div><div class="line">  <span class="keyword">this</span>.left = left;</div><div class="line">  <span class="keyword">this</span>.right = right;</div><div class="line">  <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二叉查找树，BST类"><a href="#二叉查找树，BST类" class="headerlink" title="二叉查找树，BST类"></a>二叉查找树，BST类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BST</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.root = <span class="literal">null</span>; <span class="comment">// 根节点</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="向树中加入新节点"><a href="#向树中加入新节点" class="headerlink" title="向树中加入新节点"></a>向树中加入新节点</h4><p>查找正确插入点的算法：</p>
<ol>
<li>设根节点为当前节点</li>
<li>如果待插入节点保存的数据 &lt; 当前节点，则设置当前节点 = 原节点的左节点，反之执行第四步。</li>
<li>若当前节点的左节点为null，则将新节点插入到这个位置，退出循环；反之执行下一次循环。</li>
<li>设置当前节点 = 原节点的右节点</li>
<li>若当前节点的右节点为null，则将新节点插入到这个位置，退出循环；反之执行下一次循环。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">BST.prototype.insert = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> n = <span class="keyword">new</span> Node(data, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="literal">null</span>)&#123;</div><div class="line">    <span class="keyword">this</span>.root = n;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> current = <span class="keyword">this</span>.root;</div><div class="line">    <span class="keyword">var</span> parent = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">      parent = current;</div><div class="line">      <span class="keyword">if</span>(data &lt; current.data)&#123;</div><div class="line">        current = current.left;</div><div class="line">        <span class="keyword">if</span>(current == <span class="literal">null</span>)&#123;</div><div class="line">          parent.left = n;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        current = current.right;</div><div class="line">        <span class="keyword">if</span>(current == <span class="literal">null</span>)&#123;</div><div class="line">          parent.right = n;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在二叉查找树中进行查找"><a href="#在二叉查找树中进行查找" class="headerlink" title="在二叉查找树中进行查找"></a>在二叉查找树中进行查找</h4><p>查找最小值：遍历左子树，直到找到最后一个节点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BST.prototype.getMin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> current = <span class="keyword">this</span>.root;</div><div class="line">  <span class="keyword">while</span>(current.left != <span class="literal">null</span>)&#123;</div><div class="line">    current = current.left;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> current.data;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查找最大值：遍历右子树，直到找到最后一个节点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BST.prototype.getMax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> current = <span class="keyword">this</span>.root;</div><div class="line">  <span class="keyword">while</span>(current.right != <span class="literal">null</span>)&#123;</div><div class="line">    current = current.right;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> current.data;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查找给定值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">BST.prototype.find = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> current = <span class="keyword">this</span>.root;</div><div class="line">  <span class="keyword">while</span>(current != <span class="literal">null</span>)&#123;</div><div class="line">    <span class="keyword">if</span>( current.data == data )&#123;</div><div class="line">      <span class="keyword">return</span> current</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data &lt; current.data)&#123;</div><div class="line">      current = current.left;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      current = current.right;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>先中后是针对父节点说的</p>
<h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>先遍历左子树，然后访问根结点，最后遍历右子树。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inOrder</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(node != <span class="literal">null</span>)&#123;</div><div class="line">    inOrder(node.left);</div><div class="line">    <span class="built_in">console</span>.log(node.show() + <span class="string">' '</span>);</div><div class="line">    inOrder(node.right);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><p>先遍历根结点，然后访问左子树，最后遍历右子树。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">preOrder</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(node != <span class="literal">null</span>)&#123;</div><div class="line">    <span class="built_in">console</span>.log(node.show() + <span class="string">' '</span>);</div><div class="line">    preOrder(node.left);</div><div class="line">    preOrder(node.right);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>先遍历左子树，然后访问右子树，最后遍历根结点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">postOrder</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(node != <span class="literal">null</span>)&#123;</div><div class="line">    postOrder(node.left);</div><div class="line">    postOrder(node.right);</div><div class="line">    <span class="built_in">console</span>.log(node.show() + <span class="string">' '</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="测试二叉查找树BST"><a href="#测试二叉查找树BST" class="headerlink" title="测试二叉查找树BST"></a>测试二叉查找树BST</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nums = <span class="keyword">new</span> BST();</div><div class="line">nums.insert(<span class="number">23</span>);</div><div class="line">nums.insert(<span class="number">45</span>);</div><div class="line">nums.insert(<span class="number">16</span>);</div><div class="line">nums.insert(<span class="number">37</span>);</div><div class="line">nums.insert(<span class="number">3</span>);</div><div class="line">nums.insert(<span class="number">99</span>);</div><div class="line">nums.insert(<span class="number">22</span>);</div><div class="line"><span class="comment">// 查找</span></div><div class="line"><span class="built_in">console</span>.log(nums.getMin()); <span class="comment">// 3</span></div><div class="line"><span class="built_in">console</span>.log(nums.getMax()); <span class="comment">// 9</span></div><div class="line"><span class="built_in">console</span>.log(nums.find(<span class="number">22</span>)); <span class="comment">// Node &#123; data: 22, left: null, right: null, show: [Function] &#125;</span></div><div class="line"><span class="built_in">console</span>.log(nums.find(<span class="number">21</span>)); <span class="comment">// null</span></div><div class="line"><span class="comment">// 遍历</span></div><div class="line">inOrder(nums.root); <span class="comment">// 2 16 22 23 37 45 99</span></div><div class="line">preOrder(nums.root); <span class="comment">// 23 16 3 22 45 37 99</span></div><div class="line">postOrder(nums.root); <span class="comment">// 3 22 16 37 99 45 23</span></div><div class="line"><span class="comment">// 删除</span></div><div class="line">nums.remove(<span class="number">22</span>);</div><div class="line">postOrder(nums.root); <span class="comment">// 3 16 37 99 45 23</span></div></pre></td></tr></table></figure>
<h2 id="从二叉查找树中删除节点"><a href="#从二叉查找树中删除节点" class="headerlink" title="从二叉查找树中删除节点"></a>从二叉查找树中删除节点</h2><ul>
<li>判断当前节点是否包含待删除的数据，若包含则删除该节点，若不包含，则比较当前节点上的数据和待删除的数据</li>
<li>若待删除的数据 &lt; 当前节点数据，则移至当前节点的左子节点进行比较</li>
<li>若待删除的数据 &gt; 当前节点数据，则移至当前节点的右子节点进行比较</li>
<li>若待删除的节点 = 叶子节点，则将指向它的节点指向null。</li>
<li>若待删除的节点只包含一个子节点，则将指向它的节点指向其子节点。</li>
<li>若待删除的节点包含两个子节点，用待删除节点的右子树上最小值创建一个临时节点，将临时节点的值复制到待删除节点，然后再删除临时节点。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">BST.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="literal">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.root;</div><div class="line">    <span class="keyword">var</span> parent = <span class="literal">null</span>;</div><div class="line">    <span class="comment">//注意边界值，如果被删除的是根结点,循环是不进入的,parent为null</span></div><div class="line">    <span class="keyword">while</span>(currNode != <span class="literal">null</span> &amp;&amp; currNode.data != data) &#123;</div><div class="line">        parent = currNode;</div><div class="line">        <span class="keyword">if</span>(data &lt; currNode.data)&#123;</div><div class="line">            currNode = currNode.left;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            currNode = currNode.right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(currNode == <span class="literal">null</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(currNode.left == <span class="literal">null</span> || currNode.right == <span class="literal">null</span>)&#123;  <span class="comment">//至少有一个孩子为空时</span></div><div class="line">        <span class="keyword">if</span>(parent == <span class="literal">null</span>)&#123;                 <span class="comment">//处理边界值,但左右子树同时存在时,不会出问题</span></div><div class="line">            <span class="keyword">this</span>.root = currNode.left == <span class="literal">null</span> ? currNode.right : currNode.left;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(parent.left == currNode)&#123;</div><div class="line">            parent.left = currNode.left == <span class="literal">null</span> ? currNode.right : currNode.left;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            parent.right = currNode.left == <span class="literal">null</span> ? currNode.right : currNode.left;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;    <span class="comment">//孩子都不为空，找直接后继</span></div><div class="line">        <span class="keyword">var</span> mid = currNode.right;</div><div class="line">        parent = currNode;</div><div class="line">        <span class="keyword">while</span>(mid.left != <span class="literal">null</span>)&#123;</div><div class="line">            parent = mid;</div><div class="line">            mid = mid.left;</div><div class="line">        &#125;</div><div class="line">        currNode.data = mid.data;    <span class="comment">//后继取代被删节点</span></div><div class="line">        <span class="keyword">if</span>(parent.left == mid)&#123;      <span class="comment">//删除其后继</span></div><div class="line">            parent.left = mid.right;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            parent.right = mid.right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-05-31-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91.html">使用JavaScript实现二叉查找树</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;本文主要讲述如何创建一个二叉查找树类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二叉树：每个节点的子节点不允许超过两个。&lt;br&gt;二叉查找树：BinaryS
    
    </summary>
    
      <category term="算法" scheme="http://yanglonglong.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yanglonglong.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://yanglonglong.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript实现栈</title>
    <link href="http://yanglonglong.com/blog/2016-05-30-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E6%A0%88.html"/>
    <id>http://yanglonglong.com/blog/2016-05-30-使用JavaScript实现栈.html</id>
    <published>2016-05-30T03:45:24.000Z</published>
    <updated>2016-05-30T12:07:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>栈，类似于洗盘子，后进先出。<br>本文主要讲述如何创建一个栈类，并举出三个的实例来应用栈类：数制转换、判断回文、实现阶乘。</p>
<h2 id="栈的抽象数据类型定义"><a href="#栈的抽象数据类型定义" class="headerlink" title="栈的抽象数据类型定义"></a>栈的抽象数据类型定义</h2><h3 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h3><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>top</td>
<td style="text-align:center">记录栈顶元素的位置</td>
</tr>
<tr>
<td>dataStore</td>
<td style="text-align:center">初始化一个空数组来保存栈元素</td>
</tr>
</tbody>
</table>
<h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><table>
<thead>
<tr>
<th>方法名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>push</td>
<td style="text-align:center">向栈中压入一个元素</td>
</tr>
<tr>
<td>peek</td>
<td style="text-align:center">返回栈顶元素</td>
</tr>
<tr>
<td>pop</td>
<td style="text-align:center">将一个元素弹出栈</td>
</tr>
<tr>
<td>clear</td>
<td style="text-align:center">清除栈内所有元素</td>
</tr>
<tr>
<td>length</td>
<td style="text-align:center">记录栈内元素的个数</td>
</tr>
</tbody>
</table>
<h2 id="实现栈类"><a href="#实现栈类" class="headerlink" title="实现栈类"></a>实现栈类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.dataStore = []; <span class="comment">// 初始化一个空数组来保存栈元素</span></div><div class="line">  <span class="keyword">this</span>.top = <span class="number">0</span>; <span class="comment">// 记录栈顶元素的位置</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 向栈中压入一个元素</span></div><div class="line">Stack.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.top++] = element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回栈顶元素</span></div><div class="line">Stack.prototype.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.top - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 将一个元素弹出栈</span></div><div class="line">Stack.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.dataStore[--<span class="keyword">this</span>.top];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 清除栈内所有元素</span></div><div class="line">Stack.prototype.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.top = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 记录栈内元素的个数</span></div><div class="line">Stack.prototype.length = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.top;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Stack();</div><div class="line">s.push(<span class="string">'yll'</span>);</div><div class="line">s.push(<span class="string">'ziv'</span>);</div><div class="line">s.push(<span class="string">'lxj'</span>);</div><div class="line"><span class="built_in">console</span>.log(s.length()); <span class="comment">// 3</span></div><div class="line"><span class="built_in">console</span>.log(s.peek()); <span class="comment">// lxj</span></div><div class="line"><span class="keyword">var</span> poped = s.pop();</div><div class="line"><span class="built_in">console</span>.log(poped); <span class="comment">// lxj</span></div><div class="line">s.push(<span class="string">'yanglonglong'</span>);</div><div class="line"><span class="built_in">console</span>.log(s.peek()); <span class="comment">// yanglonglong</span></div><div class="line">s.clear();</div><div class="line"><span class="built_in">console</span>.log(s.peek()); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<h2 id="利用栈实现数制间的相互转换"><a href="#利用栈实现数制间的相互转换" class="headerlink" title="利用栈实现数制间的相互转换"></a>利用栈实现数制间的相互转换</h2><p>描述：将数字n转换为以b为基数的数字</p>
<ol>
<li>最高位为 n%b，将此位压入栈</li>
<li>使用 n/b 代替n。</li>
<li>重复步骤1和2，直到n == 0，且没有余数</li>
<li>持续将栈内元素弹出，直到栈为空，依次将这些元素排列，就得到转换后数字的字符串形式。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mulBase</span>(<span class="params">num, base</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> s = <span class="keyword">new</span> Stack();</div><div class="line">  <span class="keyword">do</span>&#123;</div><div class="line">    s.push(num % base);</div><div class="line">    num = <span class="built_in">Math</span>.floor(num /= base);</div><div class="line">  &#125;<span class="keyword">while</span>(num &gt; <span class="number">0</span>);</div><div class="line">  <span class="keyword">var</span> converted = <span class="string">''</span>;</div><div class="line">  <span class="keyword">while</span>(s.length() &gt; <span class="number">0</span>)&#123;</div><div class="line">    converted += s.pop();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> converted;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(mulBase(<span class="number">7</span>,<span class="number">2</span>)); <span class="comment">// 111</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="利用栈判断字符串是否是回文"><a href="#利用栈判断字符串是否是回文" class="headerlink" title="利用栈判断字符串是否是回文"></a>利用栈判断字符串是否是回文</h2><p>回文：从前往后写和从后往前写都是一样的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">word</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> s = <span class="keyword">new</span> Stack();</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; word.length; i++)&#123;</div><div class="line">    s.push(word[i]);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> rword = <span class="string">''</span>;</div><div class="line">  <span class="keyword">while</span>(s.length() &gt; <span class="number">0</span>)&#123;</div><div class="line">    rword += s.pop();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(word == rword)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">'word'</span>)); <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">'racecar'</span>)); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h2 id="实现阶乘"><a href="#实现阶乘" class="headerlink" title="实现阶乘"></a>实现阶乘</h2><h3 id="计算阶乘－使用递归实现"><a href="#计算阶乘－使用递归实现" class="headerlink" title="计算阶乘－使用递归实现"></a>计算阶乘－使用递归实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(factorial(<span class="number">5</span>)); <span class="comment">// 120</span></div></pre></td></tr></table></figure>
<h3 id="计算阶乘－使用迭代实现"><a href="#计算阶乘－使用迭代实现" class="headerlink" title="计算阶乘－使用迭代实现"></a>计算阶乘－使用迭代实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factIter</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> result = <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span>(n &gt; <span class="number">1</span>)&#123;</div><div class="line">      result *= n;</div><div class="line">      n--;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(factIter(<span class="number">5</span>)); <span class="comment">// 120</span></div></pre></td></tr></table></figure>
<h3 id="计算阶乘－使用栈实现："><a href="#计算阶乘－使用栈实现：" class="headerlink" title="计算阶乘－使用栈实现："></a>计算阶乘－使用栈实现：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fact</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> s = <span class="keyword">new</span> Stack();</div><div class="line">  <span class="keyword">while</span>(n &gt; <span class="number">1</span>)&#123;</div><div class="line">    s.push(n--);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> product = <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span>( s.length() &gt; <span class="number">0</span> )&#123;</div><div class="line">    product *= s.pop();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> product;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fact(<span class="number">5</span>)); <span class="comment">// 120</span></div></pre></td></tr></table></figure>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-05-30-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E6%A0%88.html">使用JavaScript实现栈</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;栈，类似于洗盘子，后进先出。&lt;br&gt;本文主要讲述如何创建一个栈类，并举出三个的实例来应用栈类：数制转换、判断回文、实现阶乘。&lt;/p&gt;
&lt;h2
    
    </summary>
    
      <category term="算法" scheme="http://yanglonglong.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yanglonglong.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://yanglonglong.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript实现列表</title>
    <link href="http://yanglonglong.com/blog/2016-05-30-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8.html"/>
    <id>http://yanglonglong.com/blog/2016-05-30-使用JavaScript实现列表.html</id>
    <published>2016-05-30T02:24:22.000Z</published>
    <updated>2016-05-30T03:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本文主要讲述如何创建一个列表类，并举出一个简单的实例来应用列表类。</p>
<h2 id="列表的抽象数据类型定义"><a href="#列表的抽象数据类型定义" class="headerlink" title="列表的抽象数据类型定义"></a>列表的抽象数据类型定义</h2><h3 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h3><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>listSize</td>
<td style="text-align:center">列表的元素个数</td>
</tr>
<tr>
<td>pos</td>
<td style="text-align:center">列表当前位置</td>
</tr>
<tr>
<td>dataStore</td>
<td style="text-align:center">初始化一个空数组来保存列表元素</td>
</tr>
</tbody>
</table>
<h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><table>
<thead>
<tr>
<th>方法名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>append</td>
<td style="text-align:center">给列表添加元素</td>
</tr>
<tr>
<td>find</td>
<td style="text-align:center">在列表中查找某一元素</td>
</tr>
<tr>
<td>remove</td>
<td style="text-align:center">从列表中删除元素</td>
</tr>
<tr>
<td>length</td>
<td style="text-align:center">列表中元素的数量</td>
</tr>
<tr>
<td>toString</td>
<td style="text-align:center">显示列表中的元素</td>
</tr>
<tr>
<td>insert</td>
<td style="text-align:center">在列表某元素后插入一个元素</td>
</tr>
<tr>
<td>clear</td>
<td style="text-align:center">清空列表中所有元素</td>
</tr>
<tr>
<td>contains</td>
<td style="text-align:center">判断给定元素是否在列表中</td>
</tr>
<tr>
<td>front</td>
<td style="text-align:center">遍历列表：移动到第一个元素</td>
</tr>
<tr>
<td>end</td>
<td style="text-align:center">遍历列表：移动到最后一个元素</td>
</tr>
<tr>
<td>prev</td>
<td style="text-align:center">遍历列表：移动到前一个元素</td>
</tr>
<tr>
<td>next</td>
<td style="text-align:center">遍历列表：移动到后一个元素</td>
</tr>
<tr>
<td>currPos</td>
<td style="text-align:center">遍历列表：返回当前位置</td>
</tr>
<tr>
<td>moveTo</td>
<td style="text-align:center">移动</td>
</tr>
<tr>
<td>getElement</td>
<td style="text-align:center">遍历列表：获取当前位置元素</td>
</tr>
</tbody>
</table>
<h2 id="实现列表类"><a href="#实现列表类" class="headerlink" title="实现列表类"></a>实现列表类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">List</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.listSize = <span class="number">0</span>; <span class="comment">// 列表中元素个数</span></div><div class="line">  <span class="keyword">this</span>.pos = <span class="number">0</span>; <span class="comment">// 列表当前位置</span></div><div class="line">  <span class="keyword">this</span>.dataStore = []; <span class="comment">// 初始化一个空数组来保存列表元素</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 给列表添加元素</span></div><div class="line">List.prototype.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.listSize++] = element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 在列表中查找某一元素</span></div><div class="line">List.prototype.find = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123; </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.dataStore.length; i++)&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.dataStore[i] == element)&#123;</div><div class="line">      <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 从列表中删除元素</span></div><div class="line">List.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123; </div><div class="line">  <span class="keyword">var</span> foundAt = <span class="keyword">this</span>.find(element);</div><div class="line">  <span class="keyword">if</span>(foundAt &gt; <span class="number">-1</span>)&#123;</div><div class="line">    <span class="keyword">this</span>.dataStore.splice(foundAt,<span class="number">1</span>);</div><div class="line">    --<span class="keyword">this</span>.listSize;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 列表中元素的数量</span></div><div class="line">List.prototype.length = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.listSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 显示列表中的元素</span></div><div class="line">List.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.dataStore;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 在列表after元素后插入一个元素</span></div><div class="line">List.prototype.insert = <span class="function"><span class="keyword">function</span>(<span class="params">element, after</span>)</span>&#123; </div><div class="line">  <span class="keyword">var</span> insertPos = <span class="keyword">this</span>.find(after);</div><div class="line">  <span class="keyword">if</span>(insertPos &gt; <span class="number">-1</span>)&#123;</div><div class="line">    <span class="keyword">this</span>.dataStore.splice(insertPos, <span class="number">0</span>, element);</div><div class="line">    ++<span class="keyword">this</span>.listSize;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 清空列表中所有元素</span></div><div class="line">List.prototype.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">delete</span> <span class="keyword">this</span>.dataStore;</div><div class="line">  <span class="keyword">this</span>.listSize = <span class="keyword">this</span>.pos = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 判断给定元素是否在列表中</span></div><div class="line">List.prototype.contains = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123; </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.dataStore.length; i++)&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.dataStore[i] == element)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遍历列表：移动到第一个元素</span></div><div class="line">List.prototype.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.pos = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遍历列表：移动到最后一个元素</span></div><div class="line">List.prototype.end = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.pos = <span class="keyword">this</span>.listSize - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遍历列表：移动到前一个元素</span></div><div class="line">List.prototype.prev = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.pos &gt; <span class="number">-1</span>)&#123;</div><div class="line">    --<span class="keyword">this</span>.pos;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遍历列表：移动到后一个元素</span></div><div class="line">List.prototype.next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.pos &lt; <span class="keyword">this</span>.listSize)&#123;</div><div class="line">    ++<span class="keyword">this</span>.pos;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遍历列表：返回当前位置</span></div><div class="line">List.prototype.currPos = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.pos;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遍历列表：移动</span></div><div class="line">List.prototype.moveTo = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.pos = position;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遍历列表：获取当前位置元素</span></div><div class="line">List.prototype.getElement = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.pos];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="应用列表类"><a href="#应用列表类" class="headerlink" title="应用列表类"></a>应用列表类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> List();</div><div class="line">names.append(<span class="string">'yll'</span>);</div><div class="line">names.append(<span class="string">'lxj'</span>);</div><div class="line">names.append(<span class="string">'ziv'</span>);</div><div class="line">names.front();</div><div class="line"><span class="built_in">console</span>.log(names.getElement());</div><div class="line">names.next();</div><div class="line"><span class="built_in">console</span>.log(names.getElement());</div><div class="line">names.insert(<span class="string">'yanglonglong'</span>,<span class="string">'lxj'</span>);</div><div class="line"><span class="built_in">console</span>.log(names.toString());</div></pre></td></tr></table></figure>
<h2 id="使用迭代器遍历列表"><a href="#使用迭代器遍历列表" class="headerlink" title="使用迭代器遍历列表"></a>使用迭代器遍历列表</h2><p>使用迭代器，不用关心数据的内部存储方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'使用迭代器访问列表，从前往后'</span>);</div><div class="line"><span class="keyword">for</span>(names.front(); names.currPos() &lt; names.length(); names.next())&#123;</div><div class="line">  <span class="built_in">console</span>.log(names.getElement());</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'使用迭代器访问列表，从后往前'</span>);</div><div class="line"><span class="keyword">for</span>(names.end(); names.currPos() &gt;= <span class="number">0</span>; names.prev())&#123;</div><div class="line">  <span class="built_in">console</span>.log(names.getElement());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-05-30-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8.html">使用JavaScript实现列表</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;本文主要讲述如何创建一个列表类，并举出一个简单的实例来应用列表类。&lt;/p&gt;
&lt;h2 id=&quot;列表的抽象数据类型定义&quot;&gt;&lt;a href=&quot;#列
    
    </summary>
    
      <category term="算法" scheme="http://yanglonglong.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yanglonglong.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://yanglonglong.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript实现队列</title>
    <link href="http://yanglonglong.com/blog/2016-05-28-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.html"/>
    <id>http://yanglonglong.com/blog/2016-05-28-使用JavaScript实现队列.html</id>
    <published>2016-05-28T12:02:06.000Z</published>
    <updated>2016-05-30T12:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>队列，类似于排队，先进先出。<br>本文主要讲述如何创建一个队列类以及优先队列类，并讲解了队列应用的实例：基数排序。</p>
<h2 id="队列的抽象数据类型定义"><a href="#队列的抽象数据类型定义" class="headerlink" title="队列的抽象数据类型定义"></a>队列的抽象数据类型定义</h2><h3 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h3><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>dataStore</td>
<td style="text-align:center">初始化一个空数组来保存队列元素</td>
</tr>
</tbody>
</table>
<h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><table>
<thead>
<tr>
<th>方法名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>enqueue</td>
<td style="text-align:center">向队尾添加一个元素</td>
</tr>
<tr>
<td>dequeue</td>
<td style="text-align:center">删除队首的元素</td>
</tr>
<tr>
<td>front</td>
<td style="text-align:center">读取队首元素</td>
</tr>
<tr>
<td>back</td>
<td style="text-align:center">读取队尾元素</td>
</tr>
<tr>
<td>toString</td>
<td style="text-align:center">显示队列所有元素</td>
</tr>
<tr>
<td>empty</td>
<td style="text-align:center">判断队列是否为空</td>
</tr>
</tbody>
</table>
<h2 id="实现队列类"><a href="#实现队列类" class="headerlink" title="实现队列类"></a>实现队列类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.dataStore = []; <span class="comment">// 初始化一个空数组来保存栈元素</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 向队尾添加一个元素</span></div><div class="line">Queue.prototype.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.dataStore.push(element);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 删除队首的元素</span></div><div class="line">Queue.prototype.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.dataStore.shift();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 读取队首元素</span></div><div class="line">Queue.prototype.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.dataStore[<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 读取队尾元素</span></div><div class="line">Queue.prototype.back = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.dataStore.length - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 显示队列所有元素</span></div><div class="line">Queue.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">var</span> retStr = <span class="string">''</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.dataStore.length; i++)&#123;</div><div class="line">    retStr += <span class="keyword">this</span>.dataStore[i] + <span class="string">'\n'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> retStr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 判断队列是否为空</span></div><div class="line">Queue.prototype.empty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.dataStore.length == <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Queue();</div><div class="line">s.enqueue(<span class="string">'yll'</span>);</div><div class="line">s.enqueue(<span class="string">'ziv'</span>);</div><div class="line">s.enqueue(<span class="string">'lxj'</span>);</div><div class="line"><span class="built_in">console</span>.log(s.toString()); <span class="comment">// yll ziv lxj</span></div><div class="line">s.dequeue();</div><div class="line"><span class="built_in">console</span>.log(s.toString()); <span class="comment">// ziv lxj</span></div><div class="line"><span class="built_in">console</span>.log(s.front()); <span class="comment">// ziv</span></div><div class="line"><span class="built_in">console</span>.log(s.back()); <span class="comment">// lxj</span></div></pre></td></tr></table></figure>
<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>需要9个队列，每一个对应一个数字。所有队列保存在一个数组中，使用取余和除法操作决定个位和十位。算法的剩余部分将数字加入相应队列，根据个位数值对其从新排序，然后根据十位上的数值进行排序。结果即为排列好的数字</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据个位或者十位上的数值，将数字分配到相应队列</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">distribute</span>(<span class="params">nums, queues, n, digit</span>) </span>&#123; <span class="comment">//digit表示个位和十位上的值</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; n ; ++i) &#123;</div><div class="line">        <span class="keyword">if</span> (digit == <span class="number">1</span>) &#123;</div><div class="line">            queues[nums[i]%<span class="number">10</span>].enqueue(nums[i]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            queues[<span class="built_in">Math</span>.floor(nums[i] / <span class="number">10</span>)].enqueue(nums[i])</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 从队列收集数字</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">collect</span>(<span class="params">queues, nums</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> digit = <span class="number">0</span>; digit &lt; <span class="number">10</span>; ++digit) &#123;</div><div class="line">        <span class="keyword">while</span>(!queues[digit].empty())&#123;</div><div class="line">            nums[i++] = queues[digit].dequeue()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 打印</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispArray</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(arr.toString());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//主程序</span></div><div class="line"><span class="keyword">var</span> queues = []</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</div><div class="line">    queues[i] = <span class="keyword">new</span> Queue();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> nums = []</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)&#123;</div><div class="line">    nums[i] = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">101</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"之前的基数："</span>)</div><div class="line">dispArray(nums); <span class="comment">// 32,15,85,2,82,3,95,10,20,25</span></div><div class="line">distribute(nums, queues, <span class="number">10</span>, <span class="number">1</span>);</div><div class="line">collect(queues, nums);</div><div class="line">distribute(nums,queues, <span class="number">10</span> ,<span class="number">10</span>);</div><div class="line">collect(queues, nums);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"之后的基数："</span>)</div><div class="line">dispArray(nums) <span class="comment">// 2,3,10,15,20,25,32,82,85,95</span></div></pre></td></tr></table></figure>
<h2 id="优先队列方法"><a href="#优先队列方法" class="headerlink" title="优先队列方法"></a>优先队列方法</h2><p>从优先队列中删除元素时，需要考虑优先权的限制<br>先来定义存储队列元素的对象，然后再构建我们的优先队列系统。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Patient</span>(<span class="params">name, code</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.code = code; <span class="comment">// 变量code是一个整数，表示优先级</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在需要从新定义dequeue()方法。使其删除队列中优先级最高级的元素。我们规定：优先码的值最小的元素优先级最高。新的dequeue()方法遍历队列底层存储数组，从中找出优先码最低的元素，然后使用数据的splice()方法删除优先级最高的元素。新的dequeue()方法定义如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dequeue</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> priority = <span class="keyword">this</span>.dataStore[<span class="number">0</span>].code;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.dataStore.length; ++i) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.dataStore.[i].code &lt; priority) &#123;</div><div class="line">            priority = i</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dataStore.splice(priority,<span class="number">1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>dequeue()方法使用简单的顺序查找方法寻找优先级最高的元素(优先码最小优先级越高，比如1比5的优先级高)该方法返回包含一个元素的数组—从队列中删除的元素。<br>最后，定义toString()来显示patient对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> retStr = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="keyword">this</span>.dataStore.length; ++i) &#123;</div><div class="line">        retStr += <span class="keyword">this</span>.dataStore[i].name + <span class="string">" code:"</span> + <span class="keyword">this</span>.dataStore[i].code + <span class="string">"\n"</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> retStr</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="本文永久链接"><a href="#本文永久链接" class="headerlink" title="本文永久链接"></a>本文永久链接</h2><p><a href="http://yanglonglong.com/blog/2016-05-28-%E4%BD%BF%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.html">使用JavaScript实现队列</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;队列，类似于排队，先进先出。&lt;br&gt;本文主要讲述如何创建一个队列类以及优先队列类，并讲解了队列应用的实例：基数排序。&lt;/p&gt;
&lt;h2 id=
    
    </summary>
    
      <category term="算法" scheme="http://yanglonglong.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yanglonglong.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://yanglonglong.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
